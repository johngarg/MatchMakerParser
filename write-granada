#!/usr/bin/env python3

"""Scrpt to match and convert granada dictionary to Python classes"""

import os
import pandas as pd

WARSAW = [
    "alphaO3G",
    "alphaO3Gt",
    "alphaO3W",
    "alphaO3Wt",
    "alphaOHG",
    "alphaOHGt",
    "alphaOHW",
    "alphaOHWt",
    "alphaOHB",
    "alphaOHBt",
    "alphaOHWB",
    "alphaOHWBt",
    "alphaOHBox",
    "alphaOHD",
    "alphaOH",
    "alphaOuG",
    "alphaOuW",
    "alphaOuB",
    "alphaOdG",
    "alphaOdW",
    "alphaOdB",
    "alphaOeW",
    "alphaOeB",
    "alphaOHq1",
    "alphaOHq3",
    "alphaOHu",
    "alphaOHd",
    "alphaOHud",
    "alphaOHl1",
    "alphaOHl3",
    "alphaOHe",
    "alphaOuH",
    "alphaOdH",
    "alphaOeH",
    "alphaOuGbar",
    "alphaOuWbar",
    "alphaOuBbar",
    "alphaOdGbar",
    "alphaOdWbar",
    "alphaOdBbar",
    "alphaOeWbar",
    "alphaOeBbar",
    "alphaOHq1bar",
    "alphaOHq3bar",
    "alphaOHubar",
    "alphaOHdbar",
    "alphaOHudbar",
    "alphaOHl1bar",
    "alphaOHl3bar",
    "alphaOHebar",
    "alphaOuHbar",
    "alphaOdHbar",
    "alphaOeHbar",
    "alphaOqq1",
    "alphaOqq3",
    "alphaOuu",
    "alphaOdd",
    "alphaOud1",
    "alphaOud8",
    "alphaOqu1",
    "alphaOqu8",
    "alphaOqd1",
    "alphaOqd8",
    "alphaOquqd1",
    "alphaOquqd8",
    "alphaOll",
    "alphaOee",
    "alphaOle",
    "alphaOlq1",
    "alphaOlq3",
    "alphaOeu",
    "alphaOed",
    "alphaOqe",
    "alphaOlu",
    "alphaOld",
    "alphaOledq",
    "alphaOlequ1",
    "alphaOlequ3",
    "alphaOqq1bar",
    "alphaOqq3bar",
    "alphaOuubar",
    "alphaOddbar",
    "alphaOud1bar",
    "alphaOud8bar",
    "alphaOqu1bar",
    "alphaOqu8bar",
    "alphaOqd1bar",
    "alphaOqd8bar",
    "alphaOquqd1bar",
    "alphaOquqd8bar",
    "alphaOllbar",
    "alphaOeebar",
    "alphaOlebar",
    "alphaOlq1bar",
    "alphaOlq3bar",
    "alphaOeubar",
    "alphaOedbar",
    "alphaOqebar",
    "alphaOlubar",
    "alphaOldbar",
    "alphaOledqbar",
    "alphaOlequ1bar",
    "alphaOlequ3bar",
    "alphaWeinberg",
    "alphaWeinbergbar",
]

VALID_MULTIPLETS = {
    "S",
    "S1",
    "S2",
    "varphi",
    "Xi",
    "Xi1",
    "Theta1",
    "Theta3",
    "omega1",
    "omega2",
    "omega4",
    "Pi1",
    "Pi7",
    "zeta",
    "Omega1",
    "Omega2",
    "Omega4",
    "Upsilon",
    "Phi",
    "N",
    "E",
    "Delta1",
    "Delta3",
    "Sigma",
    "Sigma1",
    "U",
    "D",
    "Q1",
    "Q5",
    "Q7",
    "T1",
    "T2",
}
VALID_MULTIPLETS = {"Granada" + f for f in VALID_MULTIPLETS}
DRY = False


def run_and_print(cmd, dry=DRY):
    print("$ " + cmd)
    if not dry:
        os.system(cmd)


NONVANISHING = {}
for f in VALID_MULTIPLETS:
    valid_unix_name = f
    if f.removeprefix("Granada")[0].isupper():
        valid_unix_name = "GranadaCapital" + f.removeprefix("Granada")

    # Make output directory if it doesn't already exist
    if not os.path.exists(f"granada/{valid_unix_name}"):
        run_and_print(f"mkdir granada/{valid_unix_name}")

        # Match the fields
        print(f"\n\nNow matching {f}...")
        run_and_print(f"cd mm/ && ./match {f}")

        # Copy results to corresponding directory
        model_path = f"granada/{valid_unix_name}/"
        print(f"\nCopying MatchingResult.dat...")
        matching_result_path = os.path.join(model_path, "MatchingResult.dat")
        rge_result_path = os.path.join(model_path, "RGEResult.dat")
        run_and_print(f"cp mm/{f}_MM/MatchingResult.dat {matching_result_path}")
        run_and_print(f"cp mm/{f}_MM/RGEResult.dat {rge_result_path}")

        # Write config
        print(f"\nWriting MatchMakerParser config...")
        config_path = os.path.join(model_path, "Config.m")
        run_and_print(f"feynwrite {f} --mmp-config > {config_path}")

    # Run MatchMakerParser
    print(f"\nRunning matchmaker parser...")
    python_file = f"{valid_unix_name}_matching.py"
    output = os.path.join("python", python_file)
    if not os.path.exists(output):
        run_and_print(
            f"./parse-matchmaker-output {f} {config_path} {matching_result_path} {output}"
        )

    # Load class from python directory
    cmd = (
        f"from python.{python_file.removesuffix('.py')} import {f}MatchingResult as MR"
    )
    print("Reading class...")
    print(cmd)
    if not DRY:
        exec(cmd)
        mr = MR()
        print(mr.nonvanishing)
        NONVANISHING[f] = mr.nonvanishing

    # Return to parent directory
    run_and_print("cd mm/ && ./clean")

print("Writing dataframe to csv...")

WARSAW_NO_BARS = [op for op in WARSAW if not op.endswith("bar")]
table_data = {"ops": WARSAW_NO_BARS}
for k, v in NONVANISHING.items():
    data = []
    for op in WARSAW_NO_BARS:
        if op in v:
            data.append(1)
        else:
            data.append(0)

    table_data[k] = data

pd.DataFrame(table_data).to_csv("./nonvanishing.csv")
