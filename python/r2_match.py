## Symbols used:
# ydbar
# yd
# aEV
# iCPV
# Y2RLbar
# yl
# ylbar
# Y2RL
# g1
# muH
# g2
# epsilonbar
# invepsilonbar
# mu
# Y2LR
# MR2
# lam
# g3
# yubar
# Y2LRbar
# onelooporder
# yu

import matchingresult
import numpy as np

class R2MatchingResult(matchingresult.GenericMatchingResult):
    def __init__(self, name='R2', scale=91.1876):
        super().__init__(name, scale)
        self.Y2RL = np.zeros((3, 3))
        self.Y2LR = np.zeros((3, 3))
        self.Y2RLbar = np.zeros((3, 3))
        self.Y2LRbar = np.zeros((3, 3))
        self.MR2 = 1

    def alphaKB(self, ):
        return 1

    def alphaKW(self, ):
        return 1

    def alphaKG(self, ):
        return 1

    def alphaKq(self, mif1,mif2):
        return self.kronecker_delta(mif1,mif2)

    def alphaKl(self, mif1,mif2):
        return self.kronecker_delta(mif1,mif2)

    def alphaKu(self, mif1,mif2):
        return self.kronecker_delta(mif1,mif2)

    def alphaKd(self, mif1,mif2):
        return self.kronecker_delta(mif1,mif2)

    def alphaKe(self, mif1,mif2):
        return self.kronecker_delta(mif1,mif2)

    def alphaOmuH2(self, ):
        return (self.muH)**(2)

    def alphaKH(self, ):
        return 1

    def alphaOlambda(self, ):
        return (self.lam + 1/640 * (self.g2)**(4) * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2))

    def alphaOlambdad(self, mif1,mif2):
        return (-1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] + self.yd[mif1,mif2])

    def alphaOlambdae(self, mif1,mif2):
        return (-3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] + self.yl[mif1,mif2] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2])

    def alphaOlambdau(self, mif1,mif2):
        return (-1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,0] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,0] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,0] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,0] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,0] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,0] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,0] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,0] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,0] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,1] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,1] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,1] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,1] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,1] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,1] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,1] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,1] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,1] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,2] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,2] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,2] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,2] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,2] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,2] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,2] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,2] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,2] + self.yu[mif1,mif2])

    def alphaKqbar(self, mif1,mif2):
        return self.kronecker_delta(mif1,mif2)

    def alphaKlbar(self, mif1,mif2):
        return self.kronecker_delta(mif1,mif2)

    def alphaKubar(self, mif1,mif2):
        return self.kronecker_delta(mif1,mif2)

    def alphaKdbar(self, mif1,mif2):
        return self.kronecker_delta(mif1,mif2)

    def alphaKebar(self, mif1,mif2):
        return self.kronecker_delta(mif1,mif2)

    def alphaOlambdadbar(self, mif1,mif2):
        return (-1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] + self.ydbar[mif1,mif2])

    def alphaOlambdaebar(self, mif1,mif2):
        return (-3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] + -3/128 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] + -3/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] + 3/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] + -3/64 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] + -3/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] + 3/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] + self.ylbar[mif1,mif2] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + -3/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + -3/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + 9/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + 3/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + -3/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2])

    def alphaOlambdaubar(self, mif1,mif2):
        return (-1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + -1/16 * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + -1/16 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + 3/64 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + 1/16 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + -1/32 * (self.MR2)**(-2) * (self.muH)**(2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yubar[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yubar[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yubar[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yubar[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yubar[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yubar[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yubar[0,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yubar[0,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yubar[0,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yubar[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yubar[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yubar[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yubar[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yubar[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yubar[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yubar[1,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yubar[1,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yubar[1,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yubar[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yubar[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yubar[2,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yubar[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yubar[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yubar[2,mif2] + -1/128 * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yubar[2,mif2] + -1/64 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yubar[2,mif2] + 1/64 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yubar[2,mif2] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,0] * self.yubar[mif1,0] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,0] * self.yubar[mif1,0] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[0,0] * self.yubar[mif1,0] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,1] * self.yubar[mif1,0] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,1] * self.yubar[mif1,0] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[0,1] * self.yubar[mif1,0] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,2] * self.yubar[mif1,0] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,2] * self.yubar[mif1,0] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[0,2] * self.yubar[mif1,0] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,0] * self.yubar[mif1,1] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,0] * self.yubar[mif1,1] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[1,0] * self.yubar[mif1,1] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,1] * self.yubar[mif1,1] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,1] * self.yubar[mif1,1] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[1,1] * self.yubar[mif1,1] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,2] * self.yubar[mif1,1] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,2] * self.yubar[mif1,1] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[1,2] * self.yubar[mif1,1] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,0] * self.yubar[mif1,2] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,0] * self.yubar[mif1,2] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[2,0] * self.yubar[mif1,2] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,1] * self.yubar[mif1,2] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,1] * self.yubar[mif1,2] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[2,1] * self.yubar[mif1,2] + -1/64 * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,2] * self.yubar[mif1,2] + -1/32 * self.invepsilonbar * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,2] * self.yubar[mif1,2] + 1/32 * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[2,2] * self.yubar[mif1,2] + self.yubar[mif1,mif2])

    def alphaO3G(self, ):
        return 1/2880 * (self.g3)**(3) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaO3Gt(self, ):
        return 0

    def alphaO3W(self, ):
        return 1/1920 * (self.g2)**(3) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaO3Wt(self, ):
        return 0

    def alphaOHG(self, ):
        return 0

    def alphaOHGt(self, ):
        return 0

    def alphaOHW(self, ):
        return 0

    def alphaOHWt(self, ):
        return 0

    def alphaOHB(self, ):
        return 0

    def alphaOHBt(self, ):
        return 0

    def alphaOHWB(self, ):
        return 0

    def alphaOHWBt(self, ):
        return 0

    def alphaOHBox(self, ):
        return (-49/23040 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) + -3/2560 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2))

    def alphaOHD(self, ):
        return -49/5760 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaOH(self, ):
        return -1/320 * (self.g2)**(4) * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaOuG(self, mif1,mif2):
        return (-1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,0] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,0] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,0] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,1] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,1] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,1] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,2] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,2] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,2])

    def alphaOuW(self, mif1,mif2):
        return (1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yu[2,mif2])

    def alphaOuB(self, mif1,mif2):
        return (13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,0] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,0] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,0] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,0] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,0] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,0] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,1] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,1] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,1] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,1] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,1] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,1] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,0] * self.yu[mif1,2] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,1] * self.yu[mif1,2] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,2] * self.yu[mif1,2])

    def alphaOdG(self, mif1,mif2):
        return (-1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2])

    def alphaOdW(self, mif1,mif2):
        return (-1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2])

    def alphaOdB(self, mif1,mif2):
        return (-1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2])

    def alphaOeW(self, mif1,mif2):
        return (-1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2])

    def alphaOeB(self, mif1,mif2):
        return (1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2])

    def alphaOHq1(self, mif1,mif2):
        return (-49/34560 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,1] * self.yl[0,1] * self.ylbar[0,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,1] * self.yl[0,1] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,1] * self.yl[0,1] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,2] * self.yl[0,2] * self.ylbar[0,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,2] * self.yl[0,2] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,2] * self.yl[0,2] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,0] * self.yl[0,0] * self.ylbar[0,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,0] * self.yl[0,0] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,0] * self.yl[0,0] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.yl[0,1] * self.ylbar[0,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.yl[0,1] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.yl[0,1] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,2] * self.yl[0,2] * self.ylbar[0,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,2] * self.yl[0,2] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,2] * self.yl[0,2] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,0] * self.yl[0,0] * self.ylbar[0,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,0] * self.yl[0,0] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,0] * self.yl[0,0] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,1] * self.yl[0,1] * self.ylbar[0,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,1] * self.yl[0,1] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,1] * self.yl[0,1] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.yl[0,2] * self.ylbar[0,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.yl[0,2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.yl[0,2] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.yl[1,0] * self.ylbar[1,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.yl[1,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.yl[1,0] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,1] * self.yl[1,1] * self.ylbar[1,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,1] * self.yl[1,1] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,1] * self.yl[1,1] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,2] * self.yl[1,2] * self.ylbar[1,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,2] * self.yl[1,2] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,2] * self.yl[1,2] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,0] * self.yl[1,0] * self.ylbar[1,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,0] * self.yl[1,0] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,0] * self.yl[1,0] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,2] * self.yl[1,2] * self.ylbar[1,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,2] * self.yl[1,2] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,2] * self.yl[1,2] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,0] * self.yl[1,0] * self.ylbar[1,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,0] * self.yl[1,0] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,0] * self.yl[1,0] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,1] * self.yl[1,1] * self.ylbar[1,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,1] * self.yl[1,1] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,1] * self.yl[1,1] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.yl[1,2] * self.ylbar[1,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.yl[1,2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.yl[1,2] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.yl[2,0] * self.ylbar[2,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.yl[2,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.yl[2,0] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,1] * self.yl[2,1] * self.ylbar[2,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,1] * self.yl[2,1] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,1] * self.yl[2,1] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,2] * self.yl[2,2] * self.ylbar[2,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,2] * self.yl[2,2] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,2] * self.yl[2,2] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,0] * self.yl[2,0] * self.ylbar[2,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,0] * self.yl[2,0] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,0] * self.yl[2,0] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.yl[2,1] * self.ylbar[2,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.yl[2,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.yl[2,1] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,2] * self.yl[2,2] * self.ylbar[2,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,2] * self.yl[2,2] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,2] * self.yl[2,2] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,0] * self.yl[2,0] * self.ylbar[2,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,0] * self.yl[2,0] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,0] * self.yl[2,0] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,1] * self.yl[2,1] * self.ylbar[2,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,1] * self.yl[2,1] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,1] * self.yl[2,1] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.yl[2,2] * self.ylbar[2,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.yl[2,2] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.yl[2,2] * self.ylbar[2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[0,0] * self.yl[0,0] * self.yu[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[0,0] * self.yl[0,1] * self.yu[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[0,0] * self.yl[0,2] * self.yu[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[0,1] * self.yl[1,0] * self.yu[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[0,1] * self.yl[1,1] * self.yu[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[0,1] * self.yl[1,2] * self.yu[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[0,2] * self.yl[2,0] * self.yu[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[0,2] * self.yl[2,1] * self.yu[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[0,2] * self.yl[2,2] * self.yu[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[1,0] * self.yl[0,0] * self.yu[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[1,0] * self.yl[0,1] * self.yu[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[1,0] * self.yl[0,2] * self.yu[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[1,1] * self.yl[1,0] * self.yu[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[1,1] * self.yl[1,1] * self.yu[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[1,1] * self.yl[1,2] * self.yu[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[1,2] * self.yl[2,0] * self.yu[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[1,2] * self.yl[2,1] * self.yu[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[1,2] * self.yl[2,2] * self.yu[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[2,0] * self.yl[0,0] * self.yu[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[2,0] * self.yl[0,1] * self.yu[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[2,0] * self.yl[0,2] * self.yu[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[2,1] * self.yl[1,0] * self.yu[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[2,1] * self.yl[1,1] * self.yu[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[2,1] * self.yl[1,2] * self.yu[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[2,2] * self.yl[2,0] * self.yu[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[2,2] * self.yl[2,1] * self.yu[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[2,2] * self.yl[2,2] * self.yu[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,0] * self.ylbar[0,0] * self.yubar[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,0] * self.ylbar[0,1] * self.yubar[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,0] * self.ylbar[0,2] * self.yubar[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,1] * self.ylbar[1,0] * self.yubar[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,1] * self.ylbar[1,1] * self.yubar[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,1] * self.ylbar[1,2] * self.yubar[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,2] * self.ylbar[2,0] * self.yubar[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,2] * self.ylbar[2,1] * self.yubar[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,2] * self.ylbar[2,2] * self.yubar[mif2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yu[mif1,0] * self.yubar[mif2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yu[mif1,0] * self.yubar[mif2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yu[mif1,0] * self.yubar[mif2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,0] * self.yu[mif1,1] * self.yubar[mif2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,1] * self.yu[mif1,1] * self.yubar[mif2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,2] * self.yu[mif1,1] * self.yubar[mif2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,0] * self.yu[mif1,2] * self.yubar[mif2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,1] * self.yu[mif1,2] * self.yubar[mif2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,2] * self.yu[mif1,2] * self.yubar[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,0] * self.ylbar[0,0] * self.yubar[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,0] * self.ylbar[0,1] * self.yubar[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,0] * self.ylbar[0,2] * self.yubar[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,1] * self.ylbar[1,0] * self.yubar[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,1] * self.ylbar[1,1] * self.yubar[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,1] * self.ylbar[1,2] * self.yubar[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,2] * self.ylbar[2,0] * self.yubar[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,2] * self.ylbar[2,1] * self.yubar[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,2] * self.ylbar[2,2] * self.yubar[mif2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,0] * self.yu[mif1,0] * self.yubar[mif2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,1] * self.yu[mif1,0] * self.yubar[mif2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,2] * self.yu[mif1,0] * self.yubar[mif2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yu[mif1,1] * self.yubar[mif2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yu[mif1,1] * self.yubar[mif2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yu[mif1,1] * self.yubar[mif2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,0] * self.yu[mif1,2] * self.yubar[mif2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,1] * self.yu[mif1,2] * self.yubar[mif2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,2] * self.yu[mif1,2] * self.yubar[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,0] * self.ylbar[0,0] * self.yubar[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,0] * self.ylbar[0,1] * self.yubar[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,0] * self.ylbar[0,2] * self.yubar[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,1] * self.ylbar[1,0] * self.yubar[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,1] * self.ylbar[1,1] * self.yubar[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,1] * self.ylbar[1,2] * self.yubar[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,2] * self.ylbar[2,0] * self.yubar[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,2] * self.ylbar[2,1] * self.yubar[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,2] * self.ylbar[2,2] * self.yubar[mif2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,0] * self.yu[mif1,0] * self.yubar[mif2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,1] * self.yu[mif1,0] * self.yubar[mif2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,2] * self.yu[mif1,0] * self.yubar[mif2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,0] * self.yu[mif1,1] * self.yubar[mif2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,1] * self.yu[mif1,1] * self.yubar[mif2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,2] * self.yu[mif1,1] * self.yubar[mif2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yu[mif1,2] * self.yubar[mif2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yu[mif1,2] * self.yubar[mif2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yu[mif1,2] * self.yubar[mif2,2])

    def alphaOHq3(self, mif1,mif2):
        return (-1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[0,0] * self.yl[0,0] * self.yu[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[0,0] * self.yl[0,1] * self.yu[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[0,0] * self.yl[0,2] * self.yu[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[0,1] * self.yl[1,0] * self.yu[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[0,1] * self.yl[1,1] * self.yu[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[0,1] * self.yl[1,2] * self.yu[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[0,2] * self.yl[2,0] * self.yu[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[0,2] * self.yl[2,1] * self.yu[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[0,2] * self.yl[2,2] * self.yu[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[1,0] * self.yl[0,0] * self.yu[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[1,0] * self.yl[0,1] * self.yu[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[1,0] * self.yl[0,2] * self.yu[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[1,1] * self.yl[1,0] * self.yu[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[1,1] * self.yl[1,1] * self.yu[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[1,1] * self.yl[1,2] * self.yu[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[1,2] * self.yl[2,0] * self.yu[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[1,2] * self.yl[2,1] * self.yu[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[1,2] * self.yl[2,2] * self.yu[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[2,0] * self.yl[0,0] * self.yu[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[2,0] * self.yl[0,1] * self.yu[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[2,0] * self.yl[0,2] * self.yu[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[2,1] * self.yl[1,0] * self.yu[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[2,1] * self.yl[1,1] * self.yu[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[2,1] * self.yl[1,2] * self.yu[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[2,2] * self.yl[2,0] * self.yu[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[2,2] * self.yl[2,1] * self.yu[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[2,2] * self.yl[2,2] * self.yu[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,0] * self.ylbar[0,0] * self.yubar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,0] * self.ylbar[0,1] * self.yubar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,0] * self.ylbar[0,2] * self.yubar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,1] * self.ylbar[1,0] * self.yubar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,1] * self.ylbar[1,1] * self.yubar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,1] * self.ylbar[1,2] * self.yubar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,2] * self.ylbar[2,0] * self.yubar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,2] * self.ylbar[2,1] * self.yubar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,2] * self.ylbar[2,2] * self.yubar[mif2,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yu[mif1,0] * self.yubar[mif2,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yu[mif1,0] * self.yubar[mif2,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yu[mif1,0] * self.yubar[mif2,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,0] * self.yu[mif1,1] * self.yubar[mif2,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,1] * self.yu[mif1,1] * self.yubar[mif2,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,2] * self.yu[mif1,1] * self.yubar[mif2,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,0] * self.yu[mif1,2] * self.yubar[mif2,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,1] * self.yu[mif1,2] * self.yubar[mif2,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,2] * self.yu[mif1,2] * self.yubar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,0] * self.ylbar[0,0] * self.yubar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,0] * self.ylbar[0,1] * self.yubar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,0] * self.ylbar[0,2] * self.yubar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,1] * self.ylbar[1,0] * self.yubar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,1] * self.ylbar[1,1] * self.yubar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,1] * self.ylbar[1,2] * self.yubar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,2] * self.ylbar[2,0] * self.yubar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,2] * self.ylbar[2,1] * self.yubar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,2] * self.ylbar[2,2] * self.yubar[mif2,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,0] * self.yu[mif1,0] * self.yubar[mif2,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,1] * self.yu[mif1,0] * self.yubar[mif2,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,2] * self.yu[mif1,0] * self.yubar[mif2,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yu[mif1,1] * self.yubar[mif2,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yu[mif1,1] * self.yubar[mif2,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yu[mif1,1] * self.yubar[mif2,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,0] * self.yu[mif1,2] * self.yubar[mif2,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,1] * self.yu[mif1,2] * self.yubar[mif2,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,2] * self.yu[mif1,2] * self.yubar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,0] * self.ylbar[0,0] * self.yubar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,0] * self.ylbar[0,1] * self.yubar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,0] * self.ylbar[0,2] * self.yubar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,1] * self.ylbar[1,0] * self.yubar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,1] * self.ylbar[1,1] * self.yubar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,1] * self.ylbar[1,2] * self.yubar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,2] * self.ylbar[2,0] * self.yubar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,2] * self.ylbar[2,1] * self.yubar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,2] * self.ylbar[2,2] * self.yubar[mif2,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,0] * self.yu[mif1,0] * self.yubar[mif2,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,1] * self.yu[mif1,0] * self.yubar[mif2,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,2] * self.yu[mif1,0] * self.yubar[mif2,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,0] * self.yu[mif1,1] * self.yubar[mif2,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,1] * self.yu[mif1,1] * self.yubar[mif2,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,2] * self.yu[mif1,1] * self.yubar[mif2,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yu[mif1,2] * self.yubar[mif2,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yu[mif1,2] * self.yubar[mif2,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yu[mif1,2] * self.yubar[mif2,2])

    def alphaOHu(self, mif1,mif2):
        return (-49/8640 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + 35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + 35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[2,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[2,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[2,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[2,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[2,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[2,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif1,0] * self.yl[0,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif1,0] * self.yl[0,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif1,0] * self.yl[0,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif1,1] * self.yl[1,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif1,1] * self.yl[1,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif1,1] * self.yl[1,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif1,2] * self.yl[2,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif1,2] * self.yl[2,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif1,2] * self.yl[2,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif1,0] * self.yl[0,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif1,0] * self.yl[0,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif1,0] * self.yl[0,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif1,1] * self.yl[1,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif1,1] * self.yl[1,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif1,1] * self.yl[1,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif1,2] * self.yl[2,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif1,2] * self.yl[2,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif1,2] * self.yl[2,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif1,0] * self.yl[0,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif1,0] * self.yl[0,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif1,0] * self.yl[0,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif1,1] * self.yl[1,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif1,1] * self.yl[1,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif1,1] * self.yl[1,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif1,2] * self.yl[2,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif1,2] * self.yl[2,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif1,2] * self.yl[2,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yubar[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yubar[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yubar[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yubar[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yubar[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yubar[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yubar[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yubar[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yubar[0,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yubar[0,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yubar[0,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yubar[0,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yubar[0,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yubar[0,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yubar[0,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yubar[0,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yubar[0,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yubar[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yubar[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yubar[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yubar[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yubar[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yubar[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yubar[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yubar[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yubar[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yubar[1,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yubar[1,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yubar[1,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yubar[1,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yubar[1,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yubar[1,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yubar[1,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yubar[1,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yubar[1,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yubar[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yubar[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yubar[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yubar[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yubar[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yubar[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yubar[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yubar[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yubar[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yubar[2,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yubar[2,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yubar[2,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yubar[2,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yubar[2,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yubar[2,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yubar[2,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yubar[2,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yubar[2,mif1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yubar[2,mif1])

    def alphaOHd(self, mif1,mif2):
        return (49/17280 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.ydbar[0,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.ydbar[0,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.ydbar[0,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.ydbar[0,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.ydbar[0,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.ydbar[0,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.ydbar[0,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.ydbar[0,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.ydbar[0,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.ydbar[1,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.ydbar[1,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.ydbar[1,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.ydbar[1,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.ydbar[1,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.ydbar[1,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.ydbar[1,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.ydbar[1,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.ydbar[1,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.ydbar[2,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.ydbar[2,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.ydbar[2,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.ydbar[2,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.ydbar[2,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.ydbar[2,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.ydbar[2,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.ydbar[2,mif1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.ydbar[2,mif1])

    def alphaOHud(self, mif1,mif2):
        return (1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif1,0] * self.yd[0,mif2] * self.yl[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif1,0] * self.yd[1,mif2] * self.yl[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif1,0] * self.yd[2,mif2] * self.yl[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif1,0] * self.yd[0,mif2] * self.yl[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif1,0] * self.yd[1,mif2] * self.yl[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif1,0] * self.yd[2,mif2] * self.yl[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif1,0] * self.yd[0,mif2] * self.yl[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif1,0] * self.yd[1,mif2] * self.yl[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif1,0] * self.yd[2,mif2] * self.yl[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif1,1] * self.yd[0,mif2] * self.yl[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif1,1] * self.yd[1,mif2] * self.yl[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif1,1] * self.yd[2,mif2] * self.yl[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif1,1] * self.yd[0,mif2] * self.yl[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif1,1] * self.yd[1,mif2] * self.yl[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif1,1] * self.yd[2,mif2] * self.yl[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif1,1] * self.yd[0,mif2] * self.yl[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif1,1] * self.yd[1,mif2] * self.yl[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif1,1] * self.yd[2,mif2] * self.yl[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif1,2] * self.yd[0,mif2] * self.yl[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif1,2] * self.yd[1,mif2] * self.yl[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif1,2] * self.yd[2,mif2] * self.yl[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif1,2] * self.yd[0,mif2] * self.yl[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif1,2] * self.yd[1,mif2] * self.yl[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif1,2] * self.yd[2,mif2] * self.yl[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif1,2] * self.yd[0,mif2] * self.yl[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif1,2] * self.yd[1,mif2] * self.yl[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif1,2] * self.yd[2,mif2] * self.yl[2,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yubar[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yubar[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yubar[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yubar[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yubar[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yubar[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yubar[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yubar[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yubar[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yubar[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yubar[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yubar[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yubar[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yubar[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yubar[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yubar[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yubar[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yubar[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yubar[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yubar[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yubar[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yubar[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yubar[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yubar[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yubar[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yubar[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yubar[2,mif1])

    def alphaOHl1(self, mif1,mif2):
        return (49/11520 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * self.yubar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * self.yubar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * self.yubar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * self.yubar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * self.yubar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * self.yubar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * self.yubar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * self.yubar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * self.yubar[2,2])

    def alphaOHl3(self, mif1,mif2):
        return (-1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[2,2])

    def alphaOHe(self, mif1,mif2):
        return (49/5760 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,0] * self.ydbar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,0] * self.ydbar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,0] * self.ydbar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,0] * self.ydbar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,0] * self.ydbar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,0] * self.ydbar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,0] * self.ydbar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,0] * self.ydbar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,0] * self.ydbar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,1] * self.ydbar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,1] * self.ydbar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,1] * self.ydbar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,1] * self.ydbar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,1] * self.ydbar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,1] * self.ydbar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,1] * self.ydbar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,1] * self.ydbar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,1] * self.ydbar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,2] * self.ydbar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,2] * self.ydbar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,2] * self.ydbar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,2] * self.ydbar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,2] * self.ydbar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,2] * self.ydbar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,2] * self.ydbar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,2] * self.ydbar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,2] * self.ydbar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,0] * self.ydbar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,0] * self.ydbar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,0] * self.ydbar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,0] * self.ydbar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,0] * self.ydbar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,0] * self.ydbar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,0] * self.ydbar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,0] * self.ydbar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,0] * self.ydbar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,1] * self.ydbar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,1] * self.ydbar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,1] * self.ydbar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,1] * self.ydbar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,1] * self.ydbar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,1] * self.ydbar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,1] * self.ydbar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,1] * self.ydbar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,1] * self.ydbar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,2] * self.ydbar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,2] * self.ydbar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,2] * self.ydbar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,2] * self.ydbar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,2] * self.ydbar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,2] * self.ydbar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,2] * self.ydbar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,2] * self.ydbar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,2] * self.ydbar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,0] * self.ydbar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,0] * self.ydbar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,0] * self.ydbar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,0] * self.ydbar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,0] * self.ydbar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,0] * self.ydbar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,0] * self.ydbar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,0] * self.ydbar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,0] * self.ydbar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,1] * self.ydbar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,1] * self.ydbar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,1] * self.ydbar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,1] * self.ydbar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,1] * self.ydbar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,1] * self.ydbar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,1] * self.ydbar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,1] * self.ydbar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,1] * self.ydbar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,2] * self.ydbar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,2] * self.ydbar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,2] * self.ydbar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,2] * self.ydbar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,2] * self.ydbar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,2] * self.ydbar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,2] * self.ydbar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,2] * self.ydbar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,2] * self.ydbar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yl[0,mif2] * self.ylbar[0,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yl[0,mif2] * self.ylbar[0,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yl[0,mif2] * self.ylbar[0,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,0] * self.yl[1,mif2] * self.ylbar[0,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,0] * self.yl[1,mif2] * self.ylbar[0,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,0] * self.yl[1,mif2] * self.ylbar[0,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,0] * self.yl[2,mif2] * self.ylbar[0,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,0] * self.yl[2,mif2] * self.ylbar[0,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,0] * self.yl[2,mif2] * self.ylbar[0,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,1] * self.yl[0,mif2] * self.ylbar[1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,1] * self.yl[0,mif2] * self.ylbar[1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,1] * self.yl[0,mif2] * self.ylbar[1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yl[1,mif2] * self.ylbar[1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yl[1,mif2] * self.ylbar[1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yl[1,mif2] * self.ylbar[1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,1] * self.yl[2,mif2] * self.ylbar[1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,1] * self.yl[2,mif2] * self.ylbar[1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,1] * self.yl[2,mif2] * self.ylbar[1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,2] * self.yl[0,mif2] * self.ylbar[2,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,2] * self.yl[0,mif2] * self.ylbar[2,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,2] * self.yl[0,mif2] * self.ylbar[2,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,2] * self.yl[1,mif2] * self.ylbar[2,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,2] * self.yl[1,mif2] * self.ylbar[2,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,2] * self.yl[1,mif2] * self.ylbar[2,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yl[2,mif2] * self.ylbar[2,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yl[2,mif2] * self.ylbar[2,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yl[2,mif2] * self.ylbar[2,mif1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[0,0] * self.yl[0,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[0,1] * self.yl[1,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[0,2] * self.yl[2,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[1,0] * self.yl[0,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[1,1] * self.yl[1,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[1,2] * self.yl[2,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[2,0] * self.yl[0,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[2,1] * self.yl[1,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[2,2] * self.yl[2,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[0,0] * self.yl[0,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[0,1] * self.yl[1,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[0,2] * self.yl[2,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[1,0] * self.yl[0,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[1,1] * self.yl[1,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[1,2] * self.yl[2,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[2,0] * self.yl[0,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[2,1] * self.yl[1,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[2,2] * self.yl[2,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[0,0] * self.yl[0,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[0,1] * self.yl[1,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[0,2] * self.yl[2,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[1,0] * self.yl[0,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[1,1] * self.yl[1,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[1,2] * self.yl[2,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[2,0] * self.yl[0,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[2,1] * self.yl[1,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[2,2] * self.yl[2,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,0] * self.ylbar[0,mif1] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,1] * self.ylbar[1,mif1] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,2] * self.ylbar[2,mif1] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,0] * self.yubar[0,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,0] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,0] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,0] * self.yubar[0,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,0] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,0] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,0] * self.ylbar[0,mif1] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,1] * self.ylbar[1,mif1] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,2] * self.ylbar[2,mif1] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,1] * self.yubar[0,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,1] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,1] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,1] * self.yubar[0,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,1] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,1] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,1] * self.yubar[0,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,1] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,1] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,0] * self.ylbar[0,mif1] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,1] * self.ylbar[1,mif1] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,2] * self.ylbar[2,mif1] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,2] * self.yubar[0,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,2] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,2] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,2] * self.yubar[0,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,2] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,2] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,2] * self.yubar[0,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,2] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,2] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,0] * self.ylbar[0,mif1] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,1] * self.ylbar[1,mif1] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,2] * self.ylbar[2,mif1] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,0] * self.yubar[1,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,0] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,0] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,0] * self.yubar[1,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,0] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,0] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,0] * self.yubar[1,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,0] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,0] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,0] * self.ylbar[0,mif1] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,1] * self.ylbar[1,mif1] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,2] * self.ylbar[2,mif1] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,1] * self.yubar[1,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,1] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,1] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,1] * self.yubar[1,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,1] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,1] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,1] * self.yubar[1,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,1] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,1] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,0] * self.ylbar[0,mif1] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,1] * self.ylbar[1,mif1] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,2] * self.ylbar[2,mif1] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,2] * self.yubar[1,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,2] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,2] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,2] * self.yubar[1,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,2] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,2] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,2] * self.yubar[1,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,2] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,2] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,0] * self.ylbar[0,mif1] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,1] * self.ylbar[1,mif1] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,2] * self.ylbar[2,mif1] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,0] * self.yubar[2,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,0] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,0] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,0] * self.yubar[2,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,0] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,0] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,0] * self.yubar[2,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,0] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,0] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,0] * self.ylbar[0,mif1] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,1] * self.ylbar[1,mif1] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,2] * self.ylbar[2,mif1] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,1] * self.yubar[2,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,1] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,1] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,1] * self.yubar[2,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,1] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,1] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,1] * self.yubar[2,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,1] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,1] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,0] * self.ylbar[0,mif1] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,1] * self.ylbar[1,mif1] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,2] * self.ylbar[2,mif1] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,2] * self.yubar[2,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,2] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,2] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,2] * self.yubar[2,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,2] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,2] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,2] * self.yubar[2,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,2] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,2] * self.yubar[2,2])

    def alphaOuH(self, mif1,mif2):
        return (-3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,0] * (self.ylbar[0,0])**(2) + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,0] * (self.ylbar[0,0])**(2) + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,0] * (self.ylbar[0,0])**(2) + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[0,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[0,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[0,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[0,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[0,1] * (self.ylbar[0,1])**(2) + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[0,1] * (self.ylbar[0,1])**(2) + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[0,1] * (self.ylbar[0,1])**(2) + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[0,2] * (self.ylbar[0,2])**(2) + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[0,2] * (self.ylbar[0,2])**(2) + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[0,2] * (self.ylbar[0,2])**(2) + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[0,1] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[0,1] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[0,2] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[0,2] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[1,0] * (self.ylbar[1,0])**(2) + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[1,0] * (self.ylbar[1,0])**(2) + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[1,0] * (self.ylbar[1,0])**(2) + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[0,2] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[0,2] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,1] * (self.ylbar[1,1])**(2) + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,1] * (self.ylbar[1,1])**(2) + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,1] * (self.ylbar[1,1])**(2) + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[1,2] * (self.ylbar[1,2])**(2) + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[1,2] * (self.ylbar[1,2])**(2) + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[1,2] * (self.ylbar[1,2])**(2) + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[0,0] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[0,1] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[0,1] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[0,2] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[0,2] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[1,0] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[1,1] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[1,1] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[1,2] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[1,2] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[2,0] * (self.ylbar[2,0])**(2) + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[2,0] * (self.ylbar[2,0])**(2) + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[2,0] * (self.ylbar[2,0])**(2) + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[0,0] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[0,1] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[0,2] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[0,2] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[1,0] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[1,1] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[1,2] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[1,2] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,0] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[2,1] * (self.ylbar[2,1])**(2) + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[2,1] * (self.ylbar[2,1])**(2) + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[2,1] * (self.ylbar[2,1])**(2) + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[0,0] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[0,1] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[0,2] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[1,0] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[1,1] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[1,2] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,0] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,1] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,1] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,1] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,1] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,2] * (self.ylbar[2,2])**(2) + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,2] * (self.ylbar[2,2])**(2) + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yl[2,2] * (self.ylbar[2,2])**(2) + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yl[0,0] * self.ylbar[0,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,1] * self.yl[0,1] * self.ylbar[0,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,2] * self.yl[0,2] * self.ylbar[0,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,0] * self.yl[0,0] * self.ylbar[0,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yl[0,1] * self.ylbar[0,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,2] * self.yl[0,2] * self.ylbar[0,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,0] * self.yl[0,0] * self.ylbar[0,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,1] * self.yl[0,1] * self.ylbar[0,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yl[0,2] * self.ylbar[0,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yl[1,0] * self.ylbar[1,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,1] * self.yl[1,1] * self.ylbar[1,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,2] * self.yl[1,2] * self.ylbar[1,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,0] * self.yl[1,0] * self.ylbar[1,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yl[1,1] * self.ylbar[1,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,2] * self.yl[1,2] * self.ylbar[1,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,0] * self.yl[1,0] * self.ylbar[1,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,1] * self.yl[1,1] * self.ylbar[1,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yl[1,2] * self.ylbar[1,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yl[2,0] * self.ylbar[2,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,1] * self.yl[2,1] * self.ylbar[2,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,2] * self.yl[2,2] * self.ylbar[2,0] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,0] * self.yl[2,0] * self.ylbar[2,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yl[2,1] * self.ylbar[2,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,2] * self.yl[2,2] * self.ylbar[2,1] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,0] * self.yl[2,0] * self.ylbar[2,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,1] * self.yl[2,1] * self.ylbar[2,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yl[2,2] * self.ylbar[2,2] * self.yu[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yl[0,0] * self.ylbar[0,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,1] * self.yl[0,1] * self.ylbar[0,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,2] * self.yl[0,2] * self.ylbar[0,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,0] * self.yl[0,0] * self.ylbar[0,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yl[0,1] * self.ylbar[0,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,2] * self.yl[0,2] * self.ylbar[0,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,0] * self.yl[0,0] * self.ylbar[0,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,1] * self.yl[0,1] * self.ylbar[0,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yl[0,2] * self.ylbar[0,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yl[1,0] * self.ylbar[1,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,1] * self.yl[1,1] * self.ylbar[1,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,2] * self.yl[1,2] * self.ylbar[1,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,0] * self.yl[1,0] * self.ylbar[1,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yl[1,1] * self.ylbar[1,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,2] * self.yl[1,2] * self.ylbar[1,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,0] * self.yl[1,0] * self.ylbar[1,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,1] * self.yl[1,1] * self.ylbar[1,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yl[1,2] * self.ylbar[1,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yl[2,0] * self.ylbar[2,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,1] * self.yl[2,1] * self.ylbar[2,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,2] * self.yl[2,2] * self.ylbar[2,0] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,0] * self.yl[2,0] * self.ylbar[2,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yl[2,1] * self.ylbar[2,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,2] * self.yl[2,2] * self.ylbar[2,1] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,0] * self.yl[2,0] * self.ylbar[2,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,1] * self.yl[2,1] * self.ylbar[2,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yl[2,2] * self.ylbar[2,2] * self.yu[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yl[0,0] * self.ylbar[0,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,1] * self.yl[0,1] * self.ylbar[0,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,2] * self.yl[0,2] * self.ylbar[0,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,0] * self.yl[0,0] * self.ylbar[0,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yl[0,1] * self.ylbar[0,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,2] * self.yl[0,2] * self.ylbar[0,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,0] * self.yl[0,0] * self.ylbar[0,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,1] * self.yl[0,1] * self.ylbar[0,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yl[0,2] * self.ylbar[0,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yl[1,0] * self.ylbar[1,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,1] * self.yl[1,1] * self.ylbar[1,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,2] * self.yl[1,2] * self.ylbar[1,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,0] * self.yl[1,0] * self.ylbar[1,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yl[1,1] * self.ylbar[1,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,2] * self.yl[1,2] * self.ylbar[1,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,0] * self.yl[1,0] * self.ylbar[1,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,1] * self.yl[1,1] * self.ylbar[1,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yl[1,2] * self.ylbar[1,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yl[2,0] * self.ylbar[2,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,1] * self.yl[2,1] * self.ylbar[2,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,2] * self.yl[2,2] * self.ylbar[2,0] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,0] * self.yl[2,0] * self.ylbar[2,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yl[2,1] * self.ylbar[2,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,2] * self.yl[2,2] * self.ylbar[2,1] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,0] * self.yl[2,0] * self.ylbar[2,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,1] * self.yl[2,1] * self.ylbar[2,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yl[2,2] * self.ylbar[2,2] * self.yu[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,1] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,2] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[1,0] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[1,1] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[1,2] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,2] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[2,0] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[2,0] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[2,1] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[2,1] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,1] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[2,2] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[2,2] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,2] * self.yu[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,1] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,2] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[1,0] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[1,1] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[1,2] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,2] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[2,0] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[2,0] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[2,1] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[2,1] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,1] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[2,2] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[2,2] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,2] * self.yu[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,0] * self.yl[0,0] * self.ylbar[0,0] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,0] * self.yl[1,0] * self.ylbar[0,0] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,0] * self.yl[2,0] * self.ylbar[0,0] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,0] * self.yl[0,1] * self.ylbar[0,1] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,0] * self.yl[1,1] * self.ylbar[0,1] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,0] * self.yl[2,1] * self.ylbar[0,1] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,0] * self.yl[0,2] * self.ylbar[0,2] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,0] * self.yl[1,2] * self.ylbar[0,2] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,0] * self.yl[2,2] * self.ylbar[0,2] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,1] * self.yl[0,0] * self.ylbar[1,0] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,1] * self.yl[1,0] * self.ylbar[1,0] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,1] * self.yl[2,0] * self.ylbar[1,0] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,1] * self.yl[0,1] * self.ylbar[1,1] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,1] * self.yl[1,1] * self.ylbar[1,1] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,1] * self.yl[2,1] * self.ylbar[1,1] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,1] * self.yl[0,2] * self.ylbar[1,2] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,1] * self.yl[1,2] * self.ylbar[1,2] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,1] * self.yl[2,2] * self.ylbar[1,2] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,2] * self.yl[0,0] * self.ylbar[2,0] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,2] * self.yl[1,0] * self.ylbar[2,0] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,2] * self.yl[2,0] * self.ylbar[2,0] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,2] * self.yl[0,1] * self.ylbar[2,1] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,2] * self.yl[1,1] * self.ylbar[2,1] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,2] * self.yl[2,1] * self.ylbar[2,1] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[mif2,2] * self.yl[0,2] * self.ylbar[2,2] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[mif2,2] * self.yl[1,2] * self.ylbar[2,2] * self.yu[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[mif2,2] * self.yl[2,2] * self.ylbar[2,2] * self.yu[mif1,2] + -1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yu[mif1,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,0] * self.ylbar[0,0] * self.yu[0,mif2] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,0] * self.ylbar[0,1] * self.yu[0,mif2] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,0] * self.ylbar[0,2] * self.yu[0,mif2] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,1] * self.ylbar[1,0] * self.yu[0,mif2] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,1] * self.ylbar[1,1] * self.yu[0,mif2] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,1] * self.ylbar[1,2] * self.yu[0,mif2] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,2] * self.ylbar[2,0] * self.yu[0,mif2] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,2] * self.ylbar[2,1] * self.yu[0,mif2] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,2] * self.ylbar[2,2] * self.yu[0,mif2] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yu[mif1,0] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yu[mif1,0] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yu[mif1,0] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yu[mif1,0] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yu[mif1,0] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yu[mif1,0] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yu[mif1,0] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yu[mif1,0] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yu[mif1,0] * self.yubar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[0,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,0] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,1] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,2] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,0] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,1] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,2] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,0] * self.ylbar[0,0] * self.yu[0,mif2] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,0] * self.ylbar[0,1] * self.yu[0,mif2] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,0] * self.ylbar[0,2] * self.yu[0,mif2] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,1] * self.ylbar[1,0] * self.yu[0,mif2] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,1] * self.ylbar[1,1] * self.yu[0,mif2] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,1] * self.ylbar[1,2] * self.yu[0,mif2] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,2] * self.ylbar[2,0] * self.yu[0,mif2] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,2] * self.ylbar[2,1] * self.yu[0,mif2] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,2] * self.ylbar[2,2] * self.yu[0,mif2] * self.yubar[0,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,0] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,1] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,2] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yu[mif1,1] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yu[mif1,1] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yu[mif1,1] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yu[mif1,1] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yu[mif1,1] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yu[mif1,1] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yu[mif1,1] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yu[mif1,1] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yu[mif1,1] * self.yubar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[0,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,0] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,1] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,2] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,0] * self.ylbar[0,0] * self.yu[0,mif2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,0] * self.ylbar[0,1] * self.yu[0,mif2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,0] * self.ylbar[0,2] * self.yu[0,mif2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,1] * self.ylbar[1,0] * self.yu[0,mif2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,1] * self.ylbar[1,1] * self.yu[0,mif2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,1] * self.ylbar[1,2] * self.yu[0,mif2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,2] * self.ylbar[2,0] * self.yu[0,mif2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,2] * self.ylbar[2,1] * self.yu[0,mif2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,2] * self.ylbar[2,2] * self.yu[0,mif2] * self.yubar[0,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,0] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,1] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,2] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[0,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,0] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,1] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,2] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yu[mif1,2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yu[mif1,2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yu[mif1,2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yu[mif1,2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yu[mif1,2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yu[mif1,2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yu[mif1,2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yu[mif1,2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yu[mif1,2] * self.yubar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,0] * self.ylbar[0,0] * self.yu[1,mif2] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,0] * self.ylbar[0,1] * self.yu[1,mif2] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,0] * self.ylbar[0,2] * self.yu[1,mif2] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,1] * self.ylbar[1,0] * self.yu[1,mif2] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,1] * self.ylbar[1,1] * self.yu[1,mif2] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,1] * self.ylbar[1,2] * self.yu[1,mif2] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,2] * self.ylbar[2,0] * self.yu[1,mif2] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,2] * self.ylbar[2,1] * self.yu[1,mif2] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,2] * self.ylbar[2,2] * self.yu[1,mif2] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yu[mif1,0] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yu[mif1,0] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yu[mif1,0] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yu[mif1,0] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yu[mif1,0] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yu[mif1,0] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yu[mif1,0] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yu[mif1,0] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yu[mif1,0] * self.yubar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,0] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,1] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,2] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,0] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,1] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,2] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,0] * self.ylbar[0,0] * self.yu[1,mif2] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,0] * self.ylbar[0,1] * self.yu[1,mif2] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,0] * self.ylbar[0,2] * self.yu[1,mif2] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,1] * self.ylbar[1,0] * self.yu[1,mif2] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,1] * self.ylbar[1,1] * self.yu[1,mif2] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,1] * self.ylbar[1,2] * self.yu[1,mif2] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,2] * self.ylbar[2,0] * self.yu[1,mif2] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,2] * self.ylbar[2,1] * self.yu[1,mif2] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,2] * self.ylbar[2,2] * self.yu[1,mif2] * self.yubar[1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,0] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,1] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,2] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yu[mif1,1] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yu[mif1,1] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yu[mif1,1] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yu[mif1,1] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yu[mif1,1] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yu[mif1,1] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yu[mif1,1] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yu[mif1,1] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yu[mif1,1] * self.yubar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,0] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,1] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,2] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,0] * self.ylbar[0,0] * self.yu[1,mif2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,0] * self.ylbar[0,1] * self.yu[1,mif2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,0] * self.ylbar[0,2] * self.yu[1,mif2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,1] * self.ylbar[1,0] * self.yu[1,mif2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,1] * self.ylbar[1,1] * self.yu[1,mif2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,1] * self.ylbar[1,2] * self.yu[1,mif2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,2] * self.ylbar[2,0] * self.yu[1,mif2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,2] * self.ylbar[2,1] * self.yu[1,mif2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,2] * self.ylbar[2,2] * self.yu[1,mif2] * self.yubar[1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,0] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,1] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,2] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,0] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,1] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,2] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yu[mif1,2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yu[mif1,2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yu[mif1,2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yu[mif1,2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yu[mif1,2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yu[mif1,2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yu[mif1,2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yu[mif1,2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yu[mif1,2] * self.yubar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,0] * self.ylbar[0,0] * self.yu[2,mif2] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,0] * self.ylbar[0,1] * self.yu[2,mif2] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,0] * self.ylbar[0,2] * self.yu[2,mif2] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,1] * self.ylbar[1,0] * self.yu[2,mif2] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,1] * self.ylbar[1,1] * self.yu[2,mif2] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,1] * self.ylbar[1,2] * self.yu[2,mif2] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[0,2] * self.ylbar[2,0] * self.yu[2,mif2] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[0,2] * self.ylbar[2,1] * self.yu[2,mif2] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[0,2] * self.ylbar[2,2] * self.yu[2,mif2] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yu[mif1,0] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yu[mif1,0] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yu[mif1,0] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yu[mif1,0] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yu[mif1,0] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yu[mif1,0] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yu[mif1,0] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yu[mif1,0] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yu[mif1,0] * self.yubar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,0] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,1] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,2] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,0] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,1] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,2] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,0] * self.ylbar[0,0] * self.yu[2,mif2] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,0] * self.ylbar[0,1] * self.yu[2,mif2] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,0] * self.ylbar[0,2] * self.yu[2,mif2] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,1] * self.ylbar[1,0] * self.yu[2,mif2] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,1] * self.ylbar[1,1] * self.yu[2,mif2] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,1] * self.ylbar[1,2] * self.yu[2,mif2] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[1,2] * self.ylbar[2,0] * self.yu[2,mif2] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[1,2] * self.ylbar[2,1] * self.yu[2,mif2] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[1,2] * self.ylbar[2,2] * self.yu[2,mif2] * self.yubar[2,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,0] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,1] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,2] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yu[mif1,1] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yu[mif1,1] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yu[mif1,1] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yu[mif1,1] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yu[mif1,1] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yu[mif1,1] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yu[mif1,1] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yu[mif1,1] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yu[mif1,1] * self.yubar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,0] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,1] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,2] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,0] * self.ylbar[0,0] * self.yu[2,mif2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,0] * self.ylbar[0,1] * self.yu[2,mif2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,0] * self.ylbar[0,2] * self.yu[2,mif2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,1] * self.ylbar[1,0] * self.yu[2,mif2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,1] * self.ylbar[1,1] * self.yu[2,mif2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,1] * self.ylbar[1,2] * self.yu[2,mif2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[2,2] * self.ylbar[2,0] * self.yu[2,mif2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[2,2] * self.ylbar[2,1] * self.yu[2,mif2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[2,2] * self.ylbar[2,2] * self.yu[2,mif2] * self.yubar[2,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,0] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,1] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,2] * self.yu[2,mif2] * self.yu[mif1,0] * self.yubar[2,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,0] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,1] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,2] * self.yu[2,mif2] * self.yu[mif1,1] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,0] * self.ylbar[0,0] * self.yu[mif1,2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,0] * self.ylbar[0,1] * self.yu[mif1,2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,0] * self.ylbar[0,2] * self.yu[mif1,2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,1] * self.ylbar[1,0] * self.yu[mif1,2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,1] * self.ylbar[1,1] * self.yu[mif1,2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,1] * self.ylbar[1,2] * self.yu[mif1,2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif2,2] * self.ylbar[2,0] * self.yu[mif1,2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif2,2] * self.ylbar[2,1] * self.yu[mif1,2] * self.yubar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif2,2] * self.ylbar[2,2] * self.yu[mif1,2] * self.yubar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yu[0,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yu[1,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yu[2,mif2] * self.yu[mif1,2] * self.yubar[2,2])

    def alphaOdH(self, mif1,mif2):
        return (-1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[0,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[0,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[0,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yl[0,0] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yl[0,0] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yl[0,0] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yl[0,1] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yl[0,1] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yl[0,1] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yl[0,2] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yl[0,2] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yl[0,2] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yl[0,0] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yl[0,0] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yl[0,0] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yl[0,1] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yl[0,1] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yl[0,1] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yl[0,2] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yl[0,2] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yl[0,2] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yl[0,0] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yl[0,0] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yl[0,0] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yl[0,1] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yl[0,1] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yl[0,1] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yl[0,2] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yl[0,2] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yl[0,2] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yl[1,0] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yl[1,0] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yl[1,0] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yl[1,1] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yl[1,1] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yl[1,1] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yl[1,2] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yl[1,2] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yl[1,2] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yl[1,0] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yl[1,0] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yl[1,0] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yl[1,1] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yl[1,1] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yl[1,1] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yl[1,2] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yl[1,2] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yl[1,2] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yl[1,0] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yl[1,0] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yl[1,0] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yl[1,1] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yl[1,1] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yl[1,1] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yl[1,2] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yl[1,2] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yl[1,2] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yl[2,0] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yl[2,0] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yl[2,0] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yl[2,1] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yl[2,1] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yl[2,1] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yl[2,2] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yl[2,2] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yl[2,2] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yl[2,0] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yl[2,0] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yl[2,0] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yl[2,1] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yl[2,1] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yl[2,1] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yl[2,2] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yl[2,2] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yl[2,2] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,0] * self.yd[0,mif2] * self.yl[2,0] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,0] * self.yd[1,mif2] * self.yl[2,0] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,0] * self.yd[2,mif2] * self.yl[2,0] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,1] * self.yd[0,mif2] * self.yl[2,1] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,1] * self.yd[1,mif2] * self.yl[2,1] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,1] * self.yd[2,mif2] * self.yl[2,1] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.yd[0,mif2] * self.yl[2,2] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.yd[1,mif2] * self.yl[2,2] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.yd[2,mif2] * self.yl[2,2] * self.ylbar[2,2])

    def alphaOeH(self, mif1,mif2):
        return (-3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,0] * self.yd[0,0] * self.ydbar[0,0] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,0] * self.yd[1,0] * self.ydbar[0,0] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,0] * self.yd[2,0] * self.ydbar[0,0] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,0] * self.yd[0,1] * self.ydbar[0,1] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,0] * self.yd[1,1] * self.ydbar[0,1] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,0] * self.yd[2,1] * self.ydbar[0,1] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,0] * self.yd[0,2] * self.ydbar[0,2] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,0] * self.yd[1,2] * self.ydbar[0,2] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,0] * self.yd[2,2] * self.ydbar[0,2] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,0] * self.yd[0,0] * self.ydbar[1,0] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,0] * self.yd[1,0] * self.ydbar[1,0] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,0] * self.yd[2,0] * self.ydbar[1,0] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,0] * self.yd[0,1] * self.ydbar[1,1] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,0] * self.yd[1,1] * self.ydbar[1,1] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,0] * self.yd[2,1] * self.ydbar[1,1] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,0] * self.yd[0,2] * self.ydbar[1,2] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,0] * self.yd[1,2] * self.ydbar[1,2] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,0] * self.yd[2,2] * self.ydbar[1,2] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,0] * self.yd[0,0] * self.ydbar[2,0] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,0] * self.yd[1,0] * self.ydbar[2,0] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,0] * self.yd[2,0] * self.ydbar[2,0] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,0] * self.yd[0,1] * self.ydbar[2,1] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,0] * self.yd[1,1] * self.ydbar[2,1] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,0] * self.yd[2,1] * self.ydbar[2,1] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,0] * self.yd[0,2] * self.ydbar[2,2] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,0] * self.yd[1,2] * self.ydbar[2,2] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,0] * self.yd[2,2] * self.ydbar[2,2] * self.yl[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,1] * self.yd[0,0] * self.ydbar[0,0] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,1] * self.yd[1,0] * self.ydbar[0,0] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,1] * self.yd[2,0] * self.ydbar[0,0] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,1] * self.yd[0,1] * self.ydbar[0,1] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,1] * self.yd[1,1] * self.ydbar[0,1] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,1] * self.yd[2,1] * self.ydbar[0,1] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,1] * self.yd[0,2] * self.ydbar[0,2] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,1] * self.yd[1,2] * self.ydbar[0,2] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,1] * self.yd[2,2] * self.ydbar[0,2] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,1] * self.yd[0,0] * self.ydbar[1,0] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,1] * self.yd[1,0] * self.ydbar[1,0] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,1] * self.yd[2,0] * self.ydbar[1,0] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,1] * self.yd[0,1] * self.ydbar[1,1] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,1] * self.yd[1,1] * self.ydbar[1,1] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,1] * self.yd[2,1] * self.ydbar[1,1] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,1] * self.yd[0,2] * self.ydbar[1,2] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,1] * self.yd[1,2] * self.ydbar[1,2] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,1] * self.yd[2,2] * self.ydbar[1,2] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,1] * self.yd[0,0] * self.ydbar[2,0] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,1] * self.yd[1,0] * self.ydbar[2,0] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,1] * self.yd[2,0] * self.ydbar[2,0] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,1] * self.yd[0,1] * self.ydbar[2,1] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,1] * self.yd[1,1] * self.ydbar[2,1] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,1] * self.yd[2,1] * self.ydbar[2,1] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,1] * self.yd[0,2] * self.ydbar[2,2] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,1] * self.yd[1,2] * self.ydbar[2,2] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,1] * self.yd[2,2] * self.ydbar[2,2] * self.yl[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,2] * self.yd[0,0] * self.ydbar[0,0] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,2] * self.yd[1,0] * self.ydbar[0,0] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,2] * self.yd[2,0] * self.ydbar[0,0] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,2] * self.yd[0,1] * self.ydbar[0,1] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,2] * self.yd[1,1] * self.ydbar[0,1] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,2] * self.yd[2,1] * self.ydbar[0,1] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,2] * self.yd[0,2] * self.ydbar[0,2] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,2] * self.yd[1,2] * self.ydbar[0,2] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,2] * self.yd[2,2] * self.ydbar[0,2] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,2] * self.yd[0,0] * self.ydbar[1,0] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,2] * self.yd[1,0] * self.ydbar[1,0] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,2] * self.yd[2,0] * self.ydbar[1,0] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,2] * self.yd[0,1] * self.ydbar[1,1] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,2] * self.yd[1,1] * self.ydbar[1,1] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,2] * self.yd[2,1] * self.ydbar[1,1] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,2] * self.yd[0,2] * self.ydbar[1,2] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,2] * self.yd[1,2] * self.ydbar[1,2] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,2] * self.yd[2,2] * self.ydbar[1,2] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,2] * self.yd[0,0] * self.ydbar[2,0] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,2] * self.yd[1,0] * self.ydbar[2,0] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,2] * self.yd[2,0] * self.ydbar[2,0] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,2] * self.yd[0,1] * self.ydbar[2,1] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,2] * self.yd[1,1] * self.ydbar[2,1] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,2] * self.yd[2,1] * self.ydbar[2,1] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,2] * self.yd[0,2] * self.ydbar[2,2] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,2] * self.yd[1,2] * self.ydbar[2,2] * self.yl[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,2] * self.yd[2,2] * self.ydbar[2,2] * self.yl[mif1,2] + -1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yl[mif1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,0] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,0] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,0] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,0] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,0] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,0] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,0] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,0] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,0] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,0] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,0] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,0] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,0] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[0,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,1] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,1] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,1] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,1] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,1] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,1] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,1] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,0] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,1] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,1] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,1] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,1] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,1] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,1] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,1] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,2] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,2] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,2] * self.yl[0,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,2] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,2] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,2] * self.yl[1,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,2] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,2] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,2] * self.yl[0,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,2] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,2] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,2] * self.yl[1,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,0] * self.yl[2,mif2] * self.yl[mif1,0] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,1] * self.yl[2,mif2] * self.yl[mif1,1] * self.ylbar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,2] * self.yl[0,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,2] * self.yl[1,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yl[2,mif2] * self.yl[mif1,2] * self.ylbar[2,2] + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.ylbar[0,0] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,0] * self.yl[mif1,0] * self.ylbar[0,0] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.ylbar[0,1] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,0] * self.yl[mif1,1] * self.ylbar[0,1] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.ylbar[0,2] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,0] * self.yl[mif1,2] * self.ylbar[0,2] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.ylbar[1,0] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,1] * self.yl[mif1,0] * self.ylbar[1,0] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.ylbar[1,1] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,1] * self.yl[mif1,1] * self.ylbar[1,1] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.ylbar[1,2] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,1] * self.yl[mif1,2] * self.ylbar[1,2] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.ylbar[2,0] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.ylbar[2,2] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.yu[0,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.yu[0,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.yu[0,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.yu[0,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.yu[0,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.yu[0,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.yu[0,1] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.yu[0,1] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.yu[0,1] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.yu[0,2] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.yu[0,2] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.yu[0,2] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.yu[1,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.yu[1,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.yu[1,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.yu[2,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.yu[2,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.yu[2,0] * self.yubar[0,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * (self.yubar[0,0])**(2) + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * (self.yubar[0,0])**(2) + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * (self.yubar[0,0])**(2) + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.ylbar[0,0] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,0] * self.yl[mif1,0] * self.ylbar[0,0] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.ylbar[0,1] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,0] * self.yl[mif1,1] * self.ylbar[0,1] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.ylbar[0,2] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,0] * self.yl[mif1,2] * self.ylbar[0,2] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.ylbar[1,0] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,1] * self.yl[mif1,0] * self.ylbar[1,0] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.ylbar[1,1] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,1] * self.yl[mif1,1] * self.ylbar[1,1] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.ylbar[1,2] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,1] * self.yl[mif1,2] * self.ylbar[1,2] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.ylbar[2,0] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.ylbar[2,2] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.yu[0,0] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.yu[0,0] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.yu[0,0] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.yu[0,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.yu[0,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.yu[0,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.yu[0,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.yu[0,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.yu[0,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.yu[0,2] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.yu[0,2] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.yu[0,2] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.yu[1,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.yu[1,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.yu[1,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.yu[2,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.yu[2,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.yu[2,1] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[0,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[0,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] * self.yubar[0,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] * self.yubar[0,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * (self.yubar[0,1])**(2) + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * (self.yubar[0,1])**(2) + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * (self.yubar[0,1])**(2) + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.ylbar[0,0] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,0] * self.yl[mif1,0] * self.ylbar[0,0] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.ylbar[0,1] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,0] * self.yl[mif1,1] * self.ylbar[0,1] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.ylbar[0,2] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,0] * self.yl[mif1,2] * self.ylbar[0,2] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.ylbar[1,0] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,1] * self.yl[mif1,0] * self.ylbar[1,0] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.ylbar[1,1] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,1] * self.yl[mif1,1] * self.ylbar[1,1] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.ylbar[1,2] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,1] * self.yl[mif1,2] * self.ylbar[1,2] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.ylbar[2,0] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.ylbar[2,2] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.yu[0,0] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.yu[0,0] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.yu[0,0] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.yu[0,1] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.yu[0,1] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.yu[0,1] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.yu[0,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.yu[0,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.yu[0,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.yu[0,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.yu[0,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.yu[0,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.yu[1,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.yu[1,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.yu[1,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.yu[2,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.yu[2,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.yu[2,2] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,1] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,1] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,1] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * (self.yubar[0,2])**(2) + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * (self.yubar[0,2])**(2) + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * (self.yubar[0,2])**(2) + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.ylbar[0,0] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,0] * self.yl[mif1,0] * self.ylbar[0,0] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.ylbar[0,1] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,0] * self.yl[mif1,1] * self.ylbar[0,1] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.ylbar[0,2] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,0] * self.yl[mif1,2] * self.ylbar[0,2] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.ylbar[1,0] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,1] * self.yl[mif1,0] * self.ylbar[1,0] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.ylbar[1,1] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,1] * self.yl[mif1,1] * self.ylbar[1,1] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.ylbar[1,2] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,1] * self.yl[mif1,2] * self.ylbar[1,2] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.ylbar[2,0] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.ylbar[2,2] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.yu[0,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.yu[0,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.yu[0,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.yu[1,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.yu[1,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.yu[1,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.yu[1,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.yu[1,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.yu[1,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.yu[1,1] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.yu[1,1] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.yu[1,1] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.yu[1,2] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.yu[1,2] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.yu[1,2] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.yu[2,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.yu[2,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.yu[2,0] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,1] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,1] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,1] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,2] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,2] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,2] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * (self.yubar[1,0])**(2) + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * (self.yubar[1,0])**(2) + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * (self.yubar[1,0])**(2) + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.ylbar[0,0] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,0] * self.yl[mif1,0] * self.ylbar[0,0] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.ylbar[0,1] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,0] * self.yl[mif1,1] * self.ylbar[0,1] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.ylbar[0,2] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,0] * self.yl[mif1,2] * self.ylbar[0,2] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.ylbar[1,0] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,1] * self.yl[mif1,0] * self.ylbar[1,0] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.ylbar[1,1] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,1] * self.yl[mif1,1] * self.ylbar[1,1] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.ylbar[1,2] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,1] * self.yl[mif1,2] * self.ylbar[1,2] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.ylbar[2,0] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.ylbar[2,2] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.yu[0,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.yu[0,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.yu[0,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.yu[1,0] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.yu[1,0] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.yu[1,0] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.yu[1,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.yu[1,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.yu[1,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.yu[1,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.yu[1,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.yu[1,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.yu[1,2] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.yu[1,2] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.yu[1,2] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.yu[2,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.yu[2,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.yu[2,1] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * self.yubar[0,1] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * self.yubar[0,1] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * self.yubar[0,1] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,2] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,2] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,2] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[1,0] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[1,0] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[1,0] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[1,0] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[1,0] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[1,0] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * (self.yubar[1,1])**(2) + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * (self.yubar[1,1])**(2) + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * (self.yubar[1,1])**(2) + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.ylbar[0,0] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,0] * self.yl[mif1,0] * self.ylbar[0,0] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.ylbar[0,1] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,0] * self.yl[mif1,1] * self.ylbar[0,1] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.ylbar[0,2] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,0] * self.yl[mif1,2] * self.ylbar[0,2] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.ylbar[1,0] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,1] * self.yl[mif1,0] * self.ylbar[1,0] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.ylbar[1,1] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,1] * self.yl[mif1,1] * self.ylbar[1,1] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.ylbar[1,2] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,1] * self.yl[mif1,2] * self.ylbar[1,2] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.ylbar[2,0] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.ylbar[2,2] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.yu[0,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.yu[0,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.yu[0,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.yu[1,0] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.yu[1,0] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.yu[1,0] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.yu[1,1] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.yu[1,1] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.yu[1,1] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.yu[1,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.yu[1,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.yu[1,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.yu[1,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.yu[1,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.yu[1,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.yu[2,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.yu[2,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.yu[2,2] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * self.yubar[0,2] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * self.yubar[0,2] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * self.yubar[0,2] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[1,0] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[1,0] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[1,0] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[1,0] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[1,0] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[1,0] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[1,1] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[1,1] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[1,1] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[1,1] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[1,1] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[1,1] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * (self.yubar[1,2])**(2) + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * (self.yubar[1,2])**(2) + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * (self.yubar[1,2])**(2) + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.ylbar[0,0] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,0] * self.yl[mif1,0] * self.ylbar[0,0] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.ylbar[0,1] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,0] * self.yl[mif1,1] * self.ylbar[0,1] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.ylbar[0,2] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,0] * self.yl[mif1,2] * self.ylbar[0,2] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.ylbar[1,0] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,1] * self.yl[mif1,0] * self.ylbar[1,0] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.ylbar[1,1] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,1] * self.yl[mif1,1] * self.ylbar[1,1] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.ylbar[1,2] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,1] * self.yl[mif1,2] * self.ylbar[1,2] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.ylbar[2,0] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.ylbar[2,2] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.yu[0,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.yu[0,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.yu[0,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.yu[1,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.yu[1,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.yu[1,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.yu[2,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.yu[2,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.yu[2,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.yu[2,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.yu[2,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.yu[2,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.yu[2,1] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.yu[2,1] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.yu[2,1] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,mif1] * self.yl[0,mif2] * self.yu[2,2] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,mif1] * self.yl[1,mif2] * self.yu[2,2] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,mif1] * self.yl[2,mif2] * self.yu[2,2] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,1] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,1] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,0] * self.yubar[0,1] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,2] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,2] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,0] * self.yubar[0,2] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * self.yubar[1,0] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * self.yubar[1,0] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,0] * self.yubar[1,0] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[1,1] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[1,1] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,0] * self.yubar[1,1] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[1,2] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[1,2] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,0] * self.yubar[1,2] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * (self.yubar[2,0])**(2) + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * (self.yubar[2,0])**(2) + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,0] * (self.yubar[2,0])**(2) + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.ylbar[0,0] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,0] * self.yl[mif1,0] * self.ylbar[0,0] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.ylbar[0,1] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,0] * self.yl[mif1,1] * self.ylbar[0,1] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.ylbar[0,2] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,0] * self.yl[mif1,2] * self.ylbar[0,2] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.ylbar[1,0] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,1] * self.yl[mif1,0] * self.ylbar[1,0] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.ylbar[1,1] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,1] * self.yl[mif1,1] * self.ylbar[1,1] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.ylbar[1,2] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,1] * self.yl[mif1,2] * self.ylbar[1,2] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.ylbar[2,0] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.ylbar[2,2] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.yu[0,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.yu[0,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.yu[0,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.yu[1,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.yu[1,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.yu[1,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.yu[2,0] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.yu[2,0] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.yu[2,0] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.yu[2,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.yu[2,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.yu[2,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.yu[2,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.yu[2,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.yu[2,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,mif1] * self.yl[0,mif2] * self.yu[2,2] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,mif1] * self.yl[1,mif2] * self.yu[2,2] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,mif1] * self.yl[2,mif2] * self.yu[2,2] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,1] * self.yubar[0,0] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * self.yubar[0,1] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * self.yubar[0,1] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,1] * self.yubar[0,1] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,2] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,2] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,1] * self.yubar[0,2] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[1,0] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[1,0] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,1] * self.yubar[1,0] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * self.yubar[1,1] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * self.yubar[1,1] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,1] * self.yubar[1,1] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[1,2] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[1,2] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,1] * self.yubar[1,2] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[2,0] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[2,0] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,0] * self.yubar[2,0] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[2,0] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[2,0] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,1] * self.yubar[2,0] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * (self.yubar[2,1])**(2) + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * (self.yubar[2,1])**(2) + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,1] * (self.yubar[2,1])**(2) + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.ylbar[0,0] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,0] * self.yl[mif1,0] * self.ylbar[0,0] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.ylbar[0,1] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,0] * self.yl[mif1,1] * self.ylbar[0,1] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.ylbar[0,2] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,0] * self.yl[mif1,2] * self.ylbar[0,2] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.ylbar[1,0] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,1] * self.yl[mif1,0] * self.ylbar[1,0] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.ylbar[1,1] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,1] * self.yl[mif1,1] * self.ylbar[1,1] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.ylbar[1,2] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,1] * self.yl[mif1,2] * self.ylbar[1,2] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.ylbar[2,0] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,2] * self.yl[mif1,0] * self.ylbar[2,0] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.ylbar[2,1] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,2] * self.yl[mif1,1] * self.ylbar[2,1] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.ylbar[2,2] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,2] * self.yl[mif1,2] * self.ylbar[2,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,0] * self.yl[mif1,0] * self.yu[0,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,1] * self.yl[mif1,1] * self.yu[0,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,2] * self.yl[mif1,2] * self.yu[0,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,0] * self.yl[mif1,0] * self.yu[1,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,1] * self.yl[mif1,1] * self.yu[1,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,2] * self.yl[mif1,2] * self.yu[1,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.yu[2,0] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.yu[2,0] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.yu[2,0] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.yu[2,1] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.yu[2,1] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.yu[2,1] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.yl[0,mif2] * self.yu[2,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.yl[1,mif2] * self.yu[2,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.yl[2,mif2] * self.yu[2,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,0] * self.yl[mif1,0] * self.yu[2,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,1] * self.yl[mif1,1] * self.yu[2,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,2] * self.yl[mif1,2] * self.yu[2,2] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[0,2] * self.yubar[0,0] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[0,2] * self.yubar[0,1] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * self.yubar[0,2] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * self.yubar[0,2] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[0,2] * self.yubar[0,2] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[1,0] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[1,0] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[1,2] * self.yubar[1,0] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[1,1] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[1,1] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[1,2] * self.yubar[1,1] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * self.yubar[1,2] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * self.yubar[1,2] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[1,2] * self.yubar[1,2] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[2,0] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[2,0] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,0] * self.yubar[2,0] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[2,0] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[2,0] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[2,2] * self.yubar[2,0] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[2,1] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[2,1] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,1] * self.yubar[2,1] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[2,1] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[2,1] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[2,2] * self.yubar[2,1] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * (self.yubar[2,2])**(2) + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * (self.yubar[2,2])**(2) + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[2,2] * (self.yubar[2,2])**(2))

    def alphaOuGbar(self, mif1,mif2):
        return (-1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + -1/64 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yubar[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yubar[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yubar[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yubar[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yubar[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yubar[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yubar[2,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yubar[2,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yubar[2,mif2] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,0] * self.yubar[mif1,0] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,1] * self.yubar[mif1,0] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,2] * self.yubar[mif1,0] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,0] * self.yubar[mif1,1] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,1] * self.yubar[mif1,1] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,2] * self.yubar[mif1,1] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,0] * self.yubar[mif1,2] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,1] * self.yubar[mif1,2] + -1/192 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,2] * self.yubar[mif1,2])

    def alphaOuWbar(self, mif1,mif2):
        return (1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + 1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + 1/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + -1/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yubar[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yubar[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yubar[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yubar[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yubar[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yubar[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yubar[2,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yubar[2,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yubar[2,mif2])

    def alphaOuBbar(self, mif1,mif2):
        return (13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + 13/768 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + 3/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + -3/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yubar[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yubar[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yubar[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yubar[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yubar[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yubar[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yubar[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yubar[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yubar[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yubar[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yubar[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yubar[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yubar[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yubar[2,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yubar[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yubar[2,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yubar[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yubar[2,mif2] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,0] * self.yubar[mif1,0] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,0] * self.yubar[mif1,0] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,1] * self.yubar[mif1,0] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,1] * self.yubar[mif1,0] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,2] * self.yubar[mif1,0] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,2] * self.yubar[mif1,0] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,0] * self.yubar[mif1,1] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,0] * self.yubar[mif1,1] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,1] * self.yubar[mif1,1] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,1] * self.yubar[mif1,1] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,2] * self.yubar[mif1,1] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,2] * self.yubar[mif1,1] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,0] * self.yubar[mif1,2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,0] * self.yubar[mif1,2] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,1] * self.yubar[mif1,2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,1] * self.yubar[mif1,2] + -1/288 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,2] * self.yubar[mif1,2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,2] * self.yubar[mif1,2])

    def alphaOdGbar(self, mif1,mif2):
        return (-1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] + -1/384 * self.g3 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2])

    def alphaOdWbar(self, mif1,mif2):
        return (-1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] + -1/768 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2])

    def alphaOdBbar(self, mif1,mif2):
        return (-1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] + -1/2304 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] + -1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2])

    def alphaOeWbar(self, mif1,mif2):
        return (-1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] + -1/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + 3/256 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + 3/128 * self.g2 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + -3/128 * self.g2 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2])

    def alphaOeBbar(self, mif1,mif2):
        return (1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] + 1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] + 1/64 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] + 1/64 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] + 1/128 * self.g1 * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + -1/256 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + -5/128 * self.g1 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + 5/128 * self.g1 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2])

    def alphaOHq1bar(self, mif1,mif2):
        return (-49/34560 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,0] * self.yl[0,0] * self.yu[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,0] * self.yl[0,1] * self.yu[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,0] * self.yl[0,2] * self.yu[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,1] * self.yl[1,0] * self.yu[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,1] * self.yl[1,1] * self.yu[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,1] * self.yl[1,2] * self.yu[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,2] * self.yl[2,0] * self.yu[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,2] * self.yl[2,1] * self.yu[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,2] * self.yl[2,2] * self.yu[mif2,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,0] * self.yl[0,0] * self.yu[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,0] * self.yl[0,1] * self.yu[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,0] * self.yl[0,2] * self.yu[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,1] * self.yl[1,0] * self.yu[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,1] * self.yl[1,1] * self.yu[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,1] * self.yl[1,2] * self.yu[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,2] * self.yl[2,0] * self.yu[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,2] * self.yl[2,1] * self.yu[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,2] * self.yl[2,2] * self.yu[mif2,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,0] * self.yl[0,0] * self.yu[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,0] * self.yl[0,1] * self.yu[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,0] * self.yl[0,2] * self.yu[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,1] * self.yl[1,0] * self.yu[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,1] * self.yl[1,1] * self.yu[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,1] * self.yl[1,2] * self.yu[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,2] * self.yl[2,0] * self.yu[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,2] * self.yl[2,1] * self.yu[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,2] * self.yl[2,2] * self.yu[mif2,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[0,0] * self.ylbar[0,0] * self.yubar[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[0,0] * self.ylbar[0,1] * self.yubar[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[0,0] * self.ylbar[0,2] * self.yubar[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[0,1] * self.ylbar[1,0] * self.yubar[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[0,1] * self.ylbar[1,1] * self.yubar[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[0,1] * self.ylbar[1,2] * self.yubar[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[0,2] * self.ylbar[2,0] * self.yubar[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[0,2] * self.ylbar[2,1] * self.yubar[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[0,2] * self.ylbar[2,2] * self.yubar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yu[mif2,0] * self.yubar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yu[mif2,0] * self.yubar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yu[mif2,0] * self.yubar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,0] * self.yu[mif2,1] * self.yubar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,1] * self.yu[mif2,1] * self.yubar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,2] * self.yu[mif2,1] * self.yubar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,0] * self.yu[mif2,2] * self.yubar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,1] * self.yu[mif2,2] * self.yubar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,2] * self.yu[mif2,2] * self.yubar[mif1,0] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[1,0] * self.ylbar[0,0] * self.yubar[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[1,0] * self.ylbar[0,1] * self.yubar[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[1,0] * self.ylbar[0,2] * self.yubar[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[1,1] * self.ylbar[1,0] * self.yubar[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[1,1] * self.ylbar[1,1] * self.yubar[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[1,1] * self.ylbar[1,2] * self.yubar[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[1,2] * self.ylbar[2,0] * self.yubar[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[1,2] * self.ylbar[2,1] * self.yubar[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[1,2] * self.ylbar[2,2] * self.yubar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,0] * self.yu[mif2,0] * self.yubar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,1] * self.yu[mif2,0] * self.yubar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,2] * self.yu[mif2,0] * self.yubar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yu[mif2,1] * self.yubar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yu[mif2,1] * self.yubar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yu[mif2,1] * self.yubar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,0] * self.yu[mif2,2] * self.yubar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,1] * self.yu[mif2,2] * self.yubar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,2] * self.yu[mif2,2] * self.yubar[mif1,1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[2,0] * self.ylbar[0,0] * self.yubar[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[2,0] * self.ylbar[0,1] * self.yubar[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[2,0] * self.ylbar[0,2] * self.yubar[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[2,1] * self.ylbar[1,0] * self.yubar[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[2,1] * self.ylbar[1,1] * self.yubar[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[2,1] * self.ylbar[1,2] * self.yubar[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[2,2] * self.ylbar[2,0] * self.yubar[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[2,2] * self.ylbar[2,1] * self.yubar[mif1,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[2,2] * self.ylbar[2,2] * self.yubar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,0] * self.yu[mif2,0] * self.yubar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,1] * self.yu[mif2,0] * self.yubar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,2] * self.yu[mif2,0] * self.yubar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,0] * self.yu[mif2,1] * self.yubar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,1] * self.yu[mif2,1] * self.yubar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,2] * self.yu[mif2,1] * self.yubar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yu[mif2,2] * self.yubar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yu[mif2,2] * self.yubar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yu[mif2,2] * self.yubar[mif1,2])

    def alphaOHq3bar(self, mif1,mif2):
        return (-1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,0] * self.yl[0,0] * self.yu[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,0] * self.yl[0,1] * self.yu[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,0] * self.yl[0,2] * self.yu[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,1] * self.yl[1,0] * self.yu[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,1] * self.yl[1,1] * self.yu[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,1] * self.yl[1,2] * self.yu[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,2] * self.yl[2,0] * self.yu[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,2] * self.yl[2,1] * self.yu[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,2] * self.yl[2,2] * self.yu[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,0] * self.yl[0,0] * self.yu[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,0] * self.yl[0,1] * self.yu[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,0] * self.yl[0,2] * self.yu[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,1] * self.yl[1,0] * self.yu[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,1] * self.yl[1,1] * self.yu[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,1] * self.yl[1,2] * self.yu[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,2] * self.yl[2,0] * self.yu[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,2] * self.yl[2,1] * self.yu[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,2] * self.yl[2,2] * self.yu[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,0] * self.yl[0,0] * self.yu[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,0] * self.yl[0,1] * self.yu[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,0] * self.yl[0,2] * self.yu[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,1] * self.yl[1,0] * self.yu[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,1] * self.yl[1,1] * self.yu[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,1] * self.yl[1,2] * self.yu[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,2] * self.yl[2,0] * self.yu[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,2] * self.yl[2,1] * self.yu[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,2] * self.yl[2,2] * self.yu[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[0,0] * self.ylbar[0,0] * self.yubar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[0,0] * self.ylbar[0,1] * self.yubar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[0,0] * self.ylbar[0,2] * self.yubar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[0,1] * self.ylbar[1,0] * self.yubar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[0,1] * self.ylbar[1,1] * self.yubar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[0,1] * self.ylbar[1,2] * self.yubar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[0,2] * self.ylbar[2,0] * self.yubar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[0,2] * self.ylbar[2,1] * self.yubar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[0,2] * self.ylbar[2,2] * self.yubar[mif1,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yu[mif2,0] * self.yubar[mif1,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yu[mif2,0] * self.yubar[mif1,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yu[mif2,0] * self.yubar[mif1,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,0] * self.yu[mif2,1] * self.yubar[mif1,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,1] * self.yu[mif2,1] * self.yubar[mif1,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,2] * self.yu[mif2,1] * self.yubar[mif1,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,0] * self.yu[mif2,2] * self.yubar[mif1,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,1] * self.yu[mif2,2] * self.yubar[mif1,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,2] * self.yu[mif2,2] * self.yubar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[1,0] * self.ylbar[0,0] * self.yubar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[1,0] * self.ylbar[0,1] * self.yubar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[1,0] * self.ylbar[0,2] * self.yubar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[1,1] * self.ylbar[1,0] * self.yubar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[1,1] * self.ylbar[1,1] * self.yubar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[1,1] * self.ylbar[1,2] * self.yubar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[1,2] * self.ylbar[2,0] * self.yubar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[1,2] * self.ylbar[2,1] * self.yubar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[1,2] * self.ylbar[2,2] * self.yubar[mif1,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,0] * self.yu[mif2,0] * self.yubar[mif1,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,1] * self.yu[mif2,0] * self.yubar[mif1,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,2] * self.yu[mif2,0] * self.yubar[mif1,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yu[mif2,1] * self.yubar[mif1,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yu[mif2,1] * self.yubar[mif1,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yu[mif2,1] * self.yubar[mif1,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,0] * self.yu[mif2,2] * self.yubar[mif1,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,1] * self.yu[mif2,2] * self.yubar[mif1,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,2] * self.yu[mif2,2] * self.yubar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[2,0] * self.ylbar[0,0] * self.yubar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[2,0] * self.ylbar[0,1] * self.yubar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[2,0] * self.ylbar[0,2] * self.yubar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[2,1] * self.ylbar[1,0] * self.yubar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[2,1] * self.ylbar[1,1] * self.yubar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[2,1] * self.ylbar[1,2] * self.yubar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[2,2] * self.ylbar[2,0] * self.yubar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[2,2] * self.ylbar[2,1] * self.yubar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[2,2] * self.ylbar[2,2] * self.yubar[mif1,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,0] * self.yu[mif2,0] * self.yubar[mif1,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,1] * self.yu[mif2,0] * self.yubar[mif1,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,2] * self.yu[mif2,0] * self.yubar[mif1,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,0] * self.yu[mif2,1] * self.yubar[mif1,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,1] * self.yu[mif2,1] * self.yubar[mif1,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,2] * self.yu[mif2,1] * self.yubar[mif1,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yu[mif2,2] * self.yubar[mif1,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yu[mif2,2] * self.yubar[mif1,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yu[mif2,2] * self.yubar[mif1,2])

    def alphaOHubar(self, mif1,mif2):
        return (-49/8640 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + 35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + 35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] * self.yl[0,0] * self.ylbar[0,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] * self.yl[0,0] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] * self.yl[0,0] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,0] * self.yl[1,0] * self.ylbar[0,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,0] * self.yl[1,0] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,0] * self.yl[1,0] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,0] * self.yl[2,0] * self.ylbar[0,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,0] * self.yl[2,0] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,0] * self.yl[2,0] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] * self.yl[0,1] * self.ylbar[0,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] * self.yl[0,1] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] * self.yl[0,1] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,0] * self.yl[1,1] * self.ylbar[0,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,0] * self.yl[1,1] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,0] * self.yl[1,1] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,0] * self.yl[2,1] * self.ylbar[0,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,0] * self.yl[2,1] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,0] * self.yl[2,1] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] * self.yl[0,2] * self.ylbar[0,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] * self.yl[0,2] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] * self.yl[0,2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,0] * self.yl[1,2] * self.ylbar[0,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,0] * self.yl[1,2] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,0] * self.yl[1,2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,0] * self.yl[2,2] * self.ylbar[0,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,0] * self.yl[2,2] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,0] * self.yl[2,2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,1] * self.yl[0,0] * self.ylbar[1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,1] * self.yl[0,0] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,1] * self.yl[0,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] * self.yl[1,0] * self.ylbar[1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] * self.yl[1,0] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] * self.yl[1,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,1] * self.yl[2,0] * self.ylbar[1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,1] * self.yl[2,0] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,1] * self.yl[2,0] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,1] * self.yl[0,1] * self.ylbar[1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,1] * self.yl[0,1] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,1] * self.yl[0,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] * self.yl[1,1] * self.ylbar[1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] * self.yl[1,1] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] * self.yl[1,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,1] * self.yl[2,1] * self.ylbar[1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,1] * self.yl[2,1] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,1] * self.yl[2,1] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,1] * self.yl[0,2] * self.ylbar[1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,1] * self.yl[0,2] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,1] * self.yl[0,2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] * self.yl[1,2] * self.ylbar[1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] * self.yl[1,2] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] * self.yl[1,2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,1] * self.yl[2,2] * self.ylbar[1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,1] * self.yl[2,2] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,1] * self.yl[2,2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,2] * self.yl[0,0] * self.ylbar[2,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,2] * self.yl[0,0] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,2] * self.yl[0,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,2] * self.yl[1,0] * self.ylbar[2,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,2] * self.yl[1,0] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,2] * self.yl[1,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] * self.yl[2,0] * self.ylbar[2,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] * self.yl[2,0] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] * self.yl[2,0] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,2] * self.yl[0,1] * self.ylbar[2,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,2] * self.yl[0,1] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,2] * self.yl[0,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,2] * self.yl[1,1] * self.ylbar[2,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,2] * self.yl[1,1] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,2] * self.yl[1,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] * self.yl[2,1] * self.ylbar[2,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] * self.yl[2,1] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] * self.yl[2,1] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,2] * self.yl[0,2] * self.ylbar[2,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,2] * self.yl[0,2] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,2] * self.yl[0,2] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,2] * self.yl[1,2] * self.ylbar[2,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,2] * self.yl[1,2] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,2] * self.yl[1,2] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] * self.yl[2,2] * self.ylbar[2,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] * self.yl[2,2] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] * self.yl[2,2] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yu[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yu[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yu[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yu[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yu[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yu[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yu[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yu[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif2,2] * self.yl[2,2] * self.yu[0,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yu[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yu[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yu[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yu[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yu[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yu[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yu[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yu[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif2,2] * self.yl[2,2] * self.yu[1,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yu[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yu[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yu[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yu[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yu[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yu[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yu[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yu[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif2,2] * self.yl[2,2] * self.yu[2,mif1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif1,0] * self.ylbar[0,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif1,0] * self.ylbar[0,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif1,0] * self.ylbar[0,2] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif1,1] * self.ylbar[1,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif1,1] * self.ylbar[1,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif1,1] * self.ylbar[1,2] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif1,2] * self.ylbar[2,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif1,2] * self.ylbar[2,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif1,2] * self.ylbar[2,2] * self.yubar[0,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yu[0,mif1] * self.yubar[0,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yu[0,mif1] * self.yubar[0,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yu[0,mif1] * self.yubar[0,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yu[1,mif1] * self.yubar[0,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yu[1,mif1] * self.yubar[0,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yu[1,mif1] * self.yubar[0,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yu[2,mif1] * self.yubar[0,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yu[2,mif1] * self.yubar[0,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yu[2,mif1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif1,0] * self.ylbar[0,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif1,0] * self.ylbar[0,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif1,0] * self.ylbar[0,2] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif1,1] * self.ylbar[1,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif1,1] * self.ylbar[1,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif1,1] * self.ylbar[1,2] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif1,2] * self.ylbar[2,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif1,2] * self.ylbar[2,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif1,2] * self.ylbar[2,2] * self.yubar[1,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yu[0,mif1] * self.yubar[1,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yu[0,mif1] * self.yubar[1,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yu[0,mif1] * self.yubar[1,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yu[1,mif1] * self.yubar[1,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yu[1,mif1] * self.yubar[1,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yu[1,mif1] * self.yubar[1,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yu[2,mif1] * self.yubar[1,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yu[2,mif1] * self.yubar[1,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yu[2,mif1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif1,0] * self.ylbar[0,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif1,0] * self.ylbar[0,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif1,0] * self.ylbar[0,2] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif1,1] * self.ylbar[1,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif1,1] * self.ylbar[1,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif1,1] * self.ylbar[1,2] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif1,2] * self.ylbar[2,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif1,2] * self.ylbar[2,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif1,2] * self.ylbar[2,2] * self.yubar[2,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yu[0,mif1] * self.yubar[2,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yu[0,mif1] * self.yubar[2,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yu[0,mif1] * self.yubar[2,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yu[1,mif1] * self.yubar[2,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yu[1,mif1] * self.yubar[2,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yu[1,mif1] * self.yubar[2,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yu[2,mif1] * self.yubar[2,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yu[2,mif1] * self.yubar[2,mif2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yu[2,mif1] * self.yubar[2,mif2])

    def alphaOHdbar(self, mif1,mif2):
        return (49/17280 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yd[0,mif1] * self.ydbar[0,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yd[0,mif1] * self.ydbar[0,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yd[0,mif1] * self.ydbar[0,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yd[1,mif1] * self.ydbar[0,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yd[1,mif1] * self.ydbar[0,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yd[1,mif1] * self.ydbar[0,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yd[2,mif1] * self.ydbar[0,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yd[2,mif1] * self.ydbar[0,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yd[2,mif1] * self.ydbar[0,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yd[0,mif1] * self.ydbar[1,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yd[0,mif1] * self.ydbar[1,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yd[0,mif1] * self.ydbar[1,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yd[1,mif1] * self.ydbar[1,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yd[1,mif1] * self.ydbar[1,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yd[1,mif1] * self.ydbar[1,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yd[2,mif1] * self.ydbar[1,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yd[2,mif1] * self.ydbar[1,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yd[2,mif1] * self.ydbar[1,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yd[0,mif1] * self.ydbar[2,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yd[0,mif1] * self.ydbar[2,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yd[0,mif1] * self.ydbar[2,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yd[1,mif1] * self.ydbar[2,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yd[1,mif1] * self.ydbar[2,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yd[1,mif1] * self.ydbar[2,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yd[2,mif1] * self.ydbar[2,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yd[2,mif1] * self.ydbar[2,mif2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yd[2,mif1] * self.ydbar[2,mif2])

    def alphaOHudbar(self, mif1,mif2):
        return (1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif1,0] * self.ydbar[0,mif2] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif1,0] * self.ydbar[1,mif2] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif1,0] * self.ydbar[2,mif2] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif1,0] * self.ydbar[0,mif2] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif1,0] * self.ydbar[1,mif2] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif1,0] * self.ydbar[2,mif2] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif1,0] * self.ydbar[0,mif2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif1,0] * self.ydbar[1,mif2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif1,0] * self.ydbar[2,mif2] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif1,1] * self.ydbar[0,mif2] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif1,1] * self.ydbar[1,mif2] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif1,1] * self.ydbar[2,mif2] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif1,1] * self.ydbar[0,mif2] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif1,1] * self.ydbar[1,mif2] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif1,1] * self.ydbar[2,mif2] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif1,1] * self.ydbar[0,mif2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif1,1] * self.ydbar[1,mif2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif1,1] * self.ydbar[2,mif2] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[mif1,2] * self.ydbar[0,mif2] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[mif1,2] * self.ydbar[1,mif2] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[mif1,2] * self.ydbar[2,mif2] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[mif1,2] * self.ydbar[0,mif2] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[mif1,2] * self.ydbar[1,mif2] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[mif1,2] * self.ydbar[2,mif2] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[mif1,2] * self.ydbar[0,mif2] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[mif1,2] * self.ydbar[1,mif2] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[mif1,2] * self.ydbar[2,mif2] * self.ylbar[2,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.ydbar[0,mif2] * self.yu[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.ydbar[0,mif2] * self.yu[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.ydbar[0,mif2] * self.yu[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.ydbar[1,mif2] * self.yu[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.ydbar[1,mif2] * self.yu[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.ydbar[1,mif2] * self.yu[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.ydbar[2,mif2] * self.yu[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.ydbar[2,mif2] * self.yu[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.ydbar[2,mif2] * self.yu[0,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.ydbar[0,mif2] * self.yu[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.ydbar[0,mif2] * self.yu[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.ydbar[0,mif2] * self.yu[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.ydbar[1,mif2] * self.yu[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.ydbar[1,mif2] * self.yu[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.ydbar[1,mif2] * self.yu[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.ydbar[2,mif2] * self.yu[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.ydbar[2,mif2] * self.yu[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.ydbar[2,mif2] * self.yu[1,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.ydbar[0,mif2] * self.yu[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.ydbar[0,mif2] * self.yu[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.ydbar[0,mif2] * self.yu[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.ydbar[1,mif2] * self.yu[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.ydbar[1,mif2] * self.yu[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.ydbar[1,mif2] * self.yu[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.ydbar[2,mif2] * self.yu[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.ydbar[2,mif2] * self.yu[2,mif1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.ydbar[2,mif2] * self.yu[2,mif1])

    def alphaOHl1bar(self, mif1,mif2):
        return (49/11520 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[0,0] * self.yubar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[0,0] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[0,0] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[0,1] * self.yubar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[0,1] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[0,1] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[0,2] * self.yubar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[0,2] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[0,2] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[0,0] * self.yubar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[0,0] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[0,0] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[0,1] * self.yubar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[0,1] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[0,1] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[0,2] * self.yubar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[0,2] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[0,2] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[0,0] * self.yubar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[0,0] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[0,0] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[0,1] * self.yubar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[0,1] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[0,1] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[0,2] * self.yubar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[0,2] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[0,2] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[1,0] * self.yubar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[1,0] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[1,0] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[1,1] * self.yubar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[1,1] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[1,1] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[1,2] * self.yubar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[1,2] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[1,2] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[1,0] * self.yubar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[1,0] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[1,0] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[1,1] * self.yubar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[1,1] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[1,1] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[1,2] * self.yubar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[1,2] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[1,2] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[1,0] * self.yubar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[1,0] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[1,0] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[1,1] * self.yubar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[1,1] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[1,1] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[1,2] * self.yubar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[1,2] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[1,2] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[2,0] * self.yubar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[2,0] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[2,0] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[2,1] * self.yubar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[2,1] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[2,1] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[2,2] * self.yubar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[2,2] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[2,2] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[2,0] * self.yubar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[2,0] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[2,0] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[2,1] * self.yubar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[2,1] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[2,1] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[2,2] * self.yubar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[2,2] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[2,2] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[2,0] * self.yubar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[2,0] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[2,0] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[2,1] * self.yubar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[2,1] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[2,1] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[2,2] * self.yubar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[2,2] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[2,2] * self.yubar[2,2])

    def alphaOHl3bar(self, mif1,mif2):
        return (-1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[0,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[0,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[0,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[1,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[1,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[2,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[2,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[2,2])

    def alphaOHebar(self, mif1,mif2):
        return (49/5760 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + -7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yl[0,mif1] * self.ylbar[0,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yl[0,mif1] * self.ylbar[0,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yl[0,mif1] * self.ylbar[0,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,0] * self.yl[1,mif1] * self.ylbar[0,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,0] * self.yl[1,mif1] * self.ylbar[0,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,0] * self.yl[1,mif1] * self.ylbar[0,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,0] * self.yl[2,mif1] * self.ylbar[0,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,0] * self.yl[2,mif1] * self.ylbar[0,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,0] * self.yl[2,mif1] * self.ylbar[0,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,1] * self.yl[0,mif1] * self.ylbar[1,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,1] * self.yl[0,mif1] * self.ylbar[1,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,1] * self.yl[0,mif1] * self.ylbar[1,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yl[1,mif1] * self.ylbar[1,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yl[1,mif1] * self.ylbar[1,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yl[1,mif1] * self.ylbar[1,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,1] * self.yl[2,mif1] * self.ylbar[1,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,1] * self.yl[2,mif1] * self.ylbar[1,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,1] * self.yl[2,mif1] * self.ylbar[1,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,2] * self.yl[0,mif1] * self.ylbar[2,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,2] * self.yl[0,mif1] * self.ylbar[2,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,2] * self.yl[0,mif1] * self.ylbar[2,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,2] * self.yl[1,mif1] * self.ylbar[2,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,2] * self.yl[1,mif1] * self.ylbar[2,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,2] * self.yl[1,mif1] * self.ylbar[2,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yl[2,mif1] * self.ylbar[2,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yl[2,mif1] * self.ylbar[2,mif2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yl[2,mif1] * self.ylbar[2,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,0] * self.yl[0,mif1] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,1] * self.yl[1,mif1] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,2] * self.yl[2,mif1] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,0] * self.yl[0,mif1] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,1] * self.yl[1,mif1] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,2] * self.yl[2,mif1] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,0] * self.yl[0,mif1] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,1] * self.yl[1,mif1] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,2] * self.yl[2,mif1] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,0] * self.yl[0,mif1] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,1] * self.yl[1,mif1] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,2] * self.yl[2,mif1] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,0] * self.yl[0,mif1] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,1] * self.yl[1,mif1] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,2] * self.yl[2,mif1] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,0] * self.yl[0,mif1] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,1] * self.yl[1,mif1] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,2] * self.yl[2,mif1] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,0] * self.yl[0,mif1] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,1] * self.yl[1,mif1] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,2] * self.yl[2,mif1] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,0] * self.yl[0,mif1] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,1] * self.yl[1,mif1] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,2] * self.yl[2,mif1] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,0] * self.yl[0,mif1] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,1] * self.yl[1,mif1] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,2] * self.yl[2,mif1] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,0] * self.yubar[0,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,0] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,0] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,0] * self.yubar[0,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,0] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,0] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,0] * self.yubar[0,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,0] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,0] * self.yubar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,1] * self.yubar[0,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,1] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,1] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,1] * self.yubar[0,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,1] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,1] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,1] * self.yubar[0,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,1] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,1] * self.yubar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,2] * self.yubar[0,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,2] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,2] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,2] * self.yubar[0,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,2] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,2] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,2] * self.yubar[0,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,2] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,2] * self.yubar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,0] * self.yubar[1,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,0] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,0] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,0] * self.yubar[1,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,0] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,0] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,0] * self.yubar[1,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,0] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,0] * self.yubar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,1] * self.yubar[1,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,1] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,1] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,1] * self.yubar[1,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,1] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,1] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,1] * self.yubar[1,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,1] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,1] * self.yubar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,2] * self.yubar[1,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,2] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,2] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,2] * self.yubar[1,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,2] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,2] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,2] * self.yubar[1,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,2] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,2] * self.yubar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,0] * self.yubar[2,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,0] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,0] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,0] * self.yubar[2,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,0] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,0] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,0] * self.yubar[2,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,0] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,0] * self.yubar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,1] * self.yubar[2,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,1] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,1] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,1] * self.yubar[2,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,1] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,1] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,1] * self.yubar[2,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,1] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,1] * self.yubar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,2] * self.yubar[2,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,2] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,2] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,2] * self.yubar[2,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,2] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,2] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,2] * self.yubar[2,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,2] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,2] * self.yubar[2,2])

    def alphaOuHbar(self, mif1,mif2):
        return (-3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] + -3/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + -1/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + 1/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * (self.yl[0,0])**(2) * self.ylbar[0,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * (self.yl[0,0])**(2) * self.ylbar[0,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * (self.yl[0,0])**(2) * self.ylbar[0,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[0,0] * self.yl[1,0] * self.ylbar[0,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[0,1] * self.yl[1,0] * self.ylbar[0,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[0,2] * self.yl[1,0] * self.ylbar[0,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[0,0] * self.yl[2,0] * self.ylbar[0,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[0,1] * self.yl[2,0] * self.ylbar[0,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[0,2] * self.yl[2,0] * self.ylbar[0,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,1] * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * (self.yl[0,1])**(2) * self.ylbar[0,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * (self.yl[0,1])**(2) * self.ylbar[0,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * (self.yl[0,1])**(2) * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[0,0] * self.yl[1,1] * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[0,1] * self.yl[1,1] * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[0,2] * self.yl[1,1] * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[0,0] * self.yl[2,1] * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[0,1] * self.yl[2,1] * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[0,2] * self.yl[2,1] * self.ylbar[0,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[0,2] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[0,2] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * (self.yl[0,2])**(2) * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * (self.yl[0,2])**(2) * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * (self.yl[0,2])**(2) * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[0,0] * self.yl[1,2] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[0,1] * self.yl[1,2] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[0,2] * self.yl[1,2] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[0,0] * self.yl[2,2] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[0,1] * self.yl[2,2] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[0,2] * self.yl[2,2] * self.ylbar[0,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[1,0] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[1,0] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[1,0] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * (self.yl[1,0])**(2) * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * (self.yl[1,0])**(2) * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * (self.yl[1,0])**(2) * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[1,1] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[1,1] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[1,1] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[1,2] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[1,2] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[1,2] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[1,0] * self.yl[2,0] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[1,0] * self.yl[2,0] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[1,0] * self.yl[2,0] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[1,1] * self.yl[2,0] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[1,2] * self.yl[2,0] * self.ylbar[1,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[1,0] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[1,0] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[1,0] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[1,1] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[1,1] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[1,1] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,1] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * (self.yl[1,1])**(2) * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * (self.yl[1,1])**(2) * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * (self.yl[1,1])**(2) * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[1,2] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[1,2] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[1,2] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[1,0] * self.yl[2,1] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[1,1] * self.yl[2,1] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[1,1] * self.yl[2,1] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[1,1] * self.yl[2,1] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[1,2] * self.yl[2,1] * self.ylbar[1,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[1,0] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[1,0] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[1,0] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[1,1] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[1,1] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[1,1] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[1,2] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[1,2] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[1,2] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[1,2] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[1,2] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * (self.yl[1,2])**(2) * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * (self.yl[1,2])**(2) * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * (self.yl[1,2])**(2) * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[1,0] * self.yl[2,2] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[1,1] * self.yl[2,2] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[1,2] * self.yl[2,2] * self.ylbar[1,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[1,2] * self.yl[2,2] * self.ylbar[1,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[1,2] * self.yl[2,2] * self.ylbar[1,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[2,0] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[2,0] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[2,0] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[2,0] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[2,0] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[2,0] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * (self.yl[2,0])**(2) * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * (self.yl[2,0])**(2) * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * (self.yl[2,0])**(2) * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[2,1] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[2,1] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[2,1] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[2,1] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[2,1] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[2,1] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,1] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,1] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,1] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[2,2] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[2,2] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yl[2,2] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[2,2] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[2,2] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yl[2,2] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,2] * self.ylbar[2,0] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,2] * self.ylbar[2,0] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,2] * self.ylbar[2,0] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[2,0] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[2,0] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[2,0] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[2,0] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[2,0] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[2,0] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[2,1] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[2,1] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[2,1] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[2,1] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[2,1] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[2,1] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,1] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,1] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,1] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * (self.yl[2,1])**(2) * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * (self.yl[2,1])**(2) * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * (self.yl[2,1])**(2) * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[2,2] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[2,2] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yl[2,2] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[2,2] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[2,2] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yl[2,2] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yl[2,2] * self.ylbar[2,1] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yl[2,2] * self.ylbar[2,1] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yl[2,2] * self.ylbar[2,1] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[2,0] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[2,0] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[2,0] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yl[2,0] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yl[2,0] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yl[2,0] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[2,1] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[2,1] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[2,1] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yl[2,1] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yl[2,1] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yl[2,1] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[2,2] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[2,2] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yl[2,2] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yl[2,2] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yl[2,2] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yl[2,2] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,2] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,2] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yl[2,2] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yl[2,2] * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yl[2,2] * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yl[2,2] * self.ylbar[2,2] + 1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * (self.yl[2,2])**(2) * self.ylbar[2,2] + 1/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * (self.yl[2,2])**(2) * self.ylbar[2,2] + -1/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * (self.yl[2,2])**(2) * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,2] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,2] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,2] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,2] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,2] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,2] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,0] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,1] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,2] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,2] * self.yubar[0,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,2] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,0] * self.yl[0,0] * self.yu[0,0] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,0] * self.yl[0,1] * self.yu[0,0] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,0] * self.yl[0,2] * self.yu[0,0] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,1] * self.yl[1,0] * self.yu[0,0] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,1] * self.yl[1,1] * self.yu[0,0] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,1] * self.yl[1,2] * self.yu[0,0] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,2] * self.yl[2,0] * self.yu[0,0] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,2] * self.yl[2,1] * self.yu[0,0] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,2] * self.yl[2,2] * self.yu[0,0] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,0] * self.yl[0,0] * self.yu[0,1] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,0] * self.yl[0,1] * self.yu[0,1] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,0] * self.yl[0,2] * self.yu[0,1] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,1] * self.yl[1,0] * self.yu[0,1] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,1] * self.yl[1,1] * self.yu[0,1] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,1] * self.yl[1,2] * self.yu[0,1] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,2] * self.yl[2,0] * self.yu[0,1] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,2] * self.yl[2,1] * self.yu[0,1] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,2] * self.yl[2,2] * self.yu[0,1] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,0] * self.yl[0,0] * self.yu[0,2] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,0] * self.yl[0,1] * self.yu[0,2] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,0] * self.yl[0,2] * self.yu[0,2] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,1] * self.yl[1,0] * self.yu[0,2] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,1] * self.yl[1,1] * self.yu[0,2] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,1] * self.yl[1,2] * self.yu[0,2] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,2] * self.yl[2,0] * self.yu[0,2] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,2] * self.yl[2,1] * self.yu[0,2] * self.yubar[0,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,2] * self.yl[2,2] * self.yu[0,2] * self.yubar[0,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[0,0] * self.yubar[0,0] * self.yubar[0,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[0,0] * self.yubar[0,0] * self.yubar[0,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[0,0] * self.yubar[0,0] * self.yubar[0,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[0,1] * self.yubar[0,1] * self.yubar[0,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[0,1] * self.yubar[0,1] * self.yubar[0,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[0,1] * self.yubar[0,1] * self.yubar[0,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[0,2] * self.yubar[0,2] * self.yubar[0,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[0,2] * self.yubar[0,2] * self.yubar[0,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[0,2] * self.yubar[0,2] * self.yubar[0,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,2] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,2] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,2] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,2] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,2] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,2] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,0] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,1] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,2] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,2] * self.yubar[1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,2] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,0] * self.yl[0,0] * self.yu[1,0] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,0] * self.yl[0,1] * self.yu[1,0] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,0] * self.yl[0,2] * self.yu[1,0] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,1] * self.yl[1,0] * self.yu[1,0] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,1] * self.yl[1,1] * self.yu[1,0] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,1] * self.yl[1,2] * self.yu[1,0] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,2] * self.yl[2,0] * self.yu[1,0] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,2] * self.yl[2,1] * self.yu[1,0] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,2] * self.yl[2,2] * self.yu[1,0] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,0] * self.yl[0,0] * self.yu[1,1] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,0] * self.yl[0,1] * self.yu[1,1] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,0] * self.yl[0,2] * self.yu[1,1] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,1] * self.yl[1,0] * self.yu[1,1] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,1] * self.yl[1,1] * self.yu[1,1] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,1] * self.yl[1,2] * self.yu[1,1] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,2] * self.yl[2,0] * self.yu[1,1] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,2] * self.yl[2,1] * self.yu[1,1] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,2] * self.yl[2,2] * self.yu[1,1] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,0] * self.yl[0,0] * self.yu[1,2] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,0] * self.yl[0,1] * self.yu[1,2] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,0] * self.yl[0,2] * self.yu[1,2] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,1] * self.yl[1,0] * self.yu[1,2] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,1] * self.yl[1,1] * self.yu[1,2] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,1] * self.yl[1,2] * self.yu[1,2] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,2] * self.yl[2,0] * self.yu[1,2] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,2] * self.yl[2,1] * self.yu[1,2] * self.yubar[1,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,2] * self.yl[2,2] * self.yu[1,2] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[1,0] * self.yubar[0,0] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[1,1] * self.yubar[0,1] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[1,2] * self.yubar[0,2] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[1,0] * self.yubar[1,0] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[1,0] * self.yubar[1,0] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[1,0] * self.yubar[1,0] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[1,1] * self.yubar[1,1] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[1,1] * self.yubar[1,1] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[1,1] * self.yubar[1,1] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[1,2] * self.yubar[1,2] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[1,2] * self.yubar[1,2] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[1,2] * self.yubar[1,2] * self.yubar[1,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[2,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[2,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[2,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[2,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[2,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[2,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[2,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[2,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[2,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[2,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[2,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[2,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[2,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[2,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[2,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[2,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[2,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,0] * self.yl[0,0] * self.ylbar[0,2] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,1] * self.yl[0,1] * self.ylbar[0,2] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yl[0,2] * self.ylbar[0,2] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,0] * self.yl[1,0] * self.ylbar[1,2] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,1] * self.yl[1,1] * self.ylbar[1,2] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yl[1,2] * self.ylbar[1,2] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,0] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,1] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,0] * self.yl[2,0] * self.ylbar[2,2] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,1] * self.yl[2,1] * self.ylbar[2,2] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yl[2,2] * self.ylbar[2,2] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,0] * self.yl[0,0] * self.yu[2,0] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,0] * self.yl[0,1] * self.yu[2,0] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,0] * self.yl[0,2] * self.yu[2,0] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,1] * self.yl[1,0] * self.yu[2,0] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,1] * self.yl[1,1] * self.yu[2,0] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,1] * self.yl[1,2] * self.yu[2,0] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,2] * self.yl[2,0] * self.yu[2,0] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,2] * self.yl[2,1] * self.yu[2,0] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,2] * self.yl[2,2] * self.yu[2,0] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,0] * self.yl[0,0] * self.yu[2,1] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,0] * self.yl[0,1] * self.yu[2,1] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,0] * self.yl[0,2] * self.yu[2,1] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,1] * self.yl[1,0] * self.yu[2,1] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,1] * self.yl[1,1] * self.yu[2,1] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,1] * self.yl[1,2] * self.yu[2,1] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,2] * self.yl[2,0] * self.yu[2,1] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,2] * self.yl[2,1] * self.yu[2,1] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,2] * self.yl[2,2] * self.yu[2,1] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,0] * self.yl[0,0] * self.yu[2,2] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,0] * self.yl[0,1] * self.yu[2,2] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,0] * self.yl[0,2] * self.yu[2,2] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,1] * self.yl[1,0] * self.yu[2,2] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,1] * self.yl[1,1] * self.yu[2,2] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,1] * self.yl[1,2] * self.yu[2,2] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,2] * self.yl[2,0] * self.yu[2,2] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,2] * self.yl[2,1] * self.yu[2,2] * self.yubar[2,mif2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,2] * self.yl[2,2] * self.yu[2,2] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[2,0] * self.yubar[0,0] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[2,1] * self.yubar[0,1] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[2,2] * self.yubar[0,2] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[2,0] * self.yubar[1,0] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[2,1] * self.yubar[1,1] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[2,2] * self.yubar[1,2] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[2,0] * self.yubar[2,0] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[2,0] * self.yubar[2,0] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[2,0] * self.yubar[2,0] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[2,1] * self.yubar[2,1] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[2,1] * self.yubar[2,1] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[2,1] * self.yubar[2,1] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[2,2] * self.yubar[2,2] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[2,2] * self.yubar[2,2] * self.yubar[2,mif2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[2,2] * self.yubar[2,2] * self.yubar[2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,0] * self.yl[0,0] * self.ylbar[0,0] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,0] * self.yl[1,0] * self.ylbar[0,0] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,0] * self.yl[2,0] * self.ylbar[0,0] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,0] * self.yl[0,1] * self.ylbar[0,1] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,0] * self.yl[1,1] * self.ylbar[0,1] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,0] * self.yl[2,1] * self.ylbar[0,1] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,0] * self.yl[0,2] * self.ylbar[0,2] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,0] * self.yl[1,2] * self.ylbar[0,2] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,0] * self.yl[2,2] * self.ylbar[0,2] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,1] * self.yl[0,0] * self.ylbar[1,0] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,1] * self.yl[1,0] * self.ylbar[1,0] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,1] * self.yl[2,0] * self.ylbar[1,0] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,1] * self.yl[0,1] * self.ylbar[1,1] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,1] * self.yl[1,1] * self.ylbar[1,1] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,1] * self.yl[2,1] * self.ylbar[1,1] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,1] * self.yl[0,2] * self.ylbar[1,2] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,1] * self.yl[1,2] * self.ylbar[1,2] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,1] * self.yl[2,2] * self.ylbar[1,2] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,2] * self.yl[0,0] * self.ylbar[2,0] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,2] * self.yl[1,0] * self.ylbar[2,0] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,2] * self.yl[2,0] * self.ylbar[2,0] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,2] * self.yl[0,1] * self.ylbar[2,1] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,2] * self.yl[1,1] * self.ylbar[2,1] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,2] * self.yl[2,1] * self.ylbar[2,1] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[0,2] * self.yl[0,2] * self.ylbar[2,2] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[0,2] * self.yl[1,2] * self.ylbar[2,2] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[0,2] * self.yl[2,2] * self.ylbar[2,2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,0] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,1] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,2] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,0] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,1] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,2] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yu[1,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yu[1,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yu[1,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yu[2,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yu[2,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yu[2,0] * self.yubar[0,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yu[0,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yu[0,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yu[0,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,0] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,1] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,2] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,0] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,1] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,2] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yu[2,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yu[2,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yu[2,0] * self.yubar[1,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yu[0,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yu[0,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yu[0,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yu[1,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yu[1,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yu[1,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[0,0] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[0,1] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[0,2] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[0,0] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[0,1] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,0] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[0,2] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,0] * self.yl[0,0] * self.ylbar[0,0] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,0] * self.yl[1,0] * self.ylbar[0,0] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,0] * self.yl[2,0] * self.ylbar[0,0] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,0] * self.yl[0,1] * self.ylbar[0,1] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,0] * self.yl[1,1] * self.ylbar[0,1] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,0] * self.yl[2,1] * self.ylbar[0,1] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,0] * self.yl[0,2] * self.ylbar[0,2] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,0] * self.yl[1,2] * self.ylbar[0,2] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,0] * self.yl[2,2] * self.ylbar[0,2] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,1] * self.yl[0,0] * self.ylbar[1,0] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,1] * self.yl[1,0] * self.ylbar[1,0] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,1] * self.yl[2,0] * self.ylbar[1,0] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,1] * self.yl[0,1] * self.ylbar[1,1] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,1] * self.yl[1,1] * self.ylbar[1,1] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,1] * self.yl[2,1] * self.ylbar[1,1] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,1] * self.yl[0,2] * self.ylbar[1,2] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,1] * self.yl[1,2] * self.ylbar[1,2] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,1] * self.yl[2,2] * self.ylbar[1,2] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,2] * self.yl[0,0] * self.ylbar[2,0] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,2] * self.yl[1,0] * self.ylbar[2,0] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,2] * self.yl[2,0] * self.ylbar[2,0] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,2] * self.yl[0,1] * self.ylbar[2,1] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,2] * self.yl[1,1] * self.ylbar[2,1] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,2] * self.yl[2,1] * self.ylbar[2,1] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[1,2] * self.yl[0,2] * self.ylbar[2,2] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[1,2] * self.yl[1,2] * self.ylbar[2,2] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[1,2] * self.yl[2,2] * self.ylbar[2,2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,0] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,1] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,2] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,0] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,1] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,2] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yu[1,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yu[1,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yu[1,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yu[2,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yu[2,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yu[2,1] * self.yubar[0,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yu[0,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yu[0,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yu[0,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,0] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,1] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,2] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,0] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,1] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,2] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yu[2,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yu[2,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yu[2,1] * self.yubar[1,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yu[0,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yu[0,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yu[0,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yu[1,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yu[1,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yu[1,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[1,0] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[1,1] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[1,2] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[1,0] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[1,1] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,1] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[1,2] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,0] * self.yl[0,0] * self.ylbar[0,0] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,0] * self.yl[1,0] * self.ylbar[0,0] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,0] * self.yl[2,0] * self.ylbar[0,0] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,0] * self.yl[0,1] * self.ylbar[0,1] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,0] * self.yl[1,1] * self.ylbar[0,1] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,0] * self.yl[2,1] * self.ylbar[0,1] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,0] * self.yl[0,2] * self.ylbar[0,2] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,0] * self.yl[1,2] * self.ylbar[0,2] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,0] * self.yl[2,2] * self.ylbar[0,2] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,1] * self.yl[0,0] * self.ylbar[1,0] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,1] * self.yl[1,0] * self.ylbar[1,0] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,1] * self.yl[2,0] * self.ylbar[1,0] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,1] * self.yl[0,1] * self.ylbar[1,1] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,1] * self.yl[1,1] * self.ylbar[1,1] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,1] * self.yl[2,1] * self.ylbar[1,1] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,1] * self.yl[0,2] * self.ylbar[1,2] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,1] * self.yl[1,2] * self.ylbar[1,2] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,1] * self.yl[2,2] * self.ylbar[1,2] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,2] * self.yl[0,0] * self.ylbar[2,0] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,2] * self.yl[1,0] * self.ylbar[2,0] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,2] * self.yl[2,0] * self.ylbar[2,0] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,2] * self.yl[0,1] * self.ylbar[2,1] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,2] * self.yl[1,1] * self.ylbar[2,1] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,2] * self.yl[2,1] * self.ylbar[2,1] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RLbar[2,2] * self.yl[0,2] * self.ylbar[2,2] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RLbar[2,2] * self.yl[1,2] * self.ylbar[2,2] * self.yubar[mif1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RLbar[2,2] * self.yl[2,2] * self.ylbar[2,2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,0] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,1] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,2] * self.yu[0,0] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,0] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,1] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,2] * self.yu[0,1] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yu[0,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yu[1,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yu[1,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yu[1,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yu[2,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yu[2,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yu[2,2] * self.yubar[0,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yu[0,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yu[0,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yu[0,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,0] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,1] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,2] * self.yu[1,0] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,0] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,1] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,2] * self.yu[1,1] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yu[1,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yu[2,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yu[2,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yu[2,2] * self.yubar[1,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yu[0,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yu[0,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yu[0,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yu[1,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yu[1,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yu[1,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[2,0] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[2,1] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[2,2] * self.yu[2,0] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[2,0] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[2,1] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[2,2] * self.yu[2,1] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/96 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yu[2,2] * self.yubar[2,mif2] * self.yubar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yu[0,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yu[0,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yu[0,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yu[0,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yu[0,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yu[0,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yu[0,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yu[0,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[mif2,2] * self.yl[2,2] * self.yu[0,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yu[1,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yu[1,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yu[1,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yu[1,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yu[1,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yu[1,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yu[1,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yu[1,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[mif2,2] * self.yl[2,2] * self.yu[1,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif2,0] * self.yl[0,0] * self.yu[2,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif2,0] * self.yl[0,1] * self.yu[2,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif2,0] * self.yl[0,2] * self.yu[2,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif2,1] * self.yl[1,0] * self.yu[2,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif2,1] * self.yl[1,1] * self.yu[2,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif2,1] * self.yl[1,2] * self.yu[2,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[mif2,2] * self.yl[2,0] * self.yu[2,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[mif2,2] * self.yl[2,1] * self.yu[2,mif1] * self.yubar[mif1,mif1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[mif2,2] * self.yl[2,2] * self.yu[2,mif1] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yu[0,mif1] * self.yubar[0,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yu[0,mif1] * self.yubar[0,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yu[0,mif1] * self.yubar[0,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yu[1,mif1] * self.yubar[0,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yu[1,mif1] * self.yubar[0,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yu[1,mif1] * self.yubar[0,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yu[2,mif1] * self.yubar[0,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yu[2,mif1] * self.yubar[0,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yu[2,mif1] * self.yubar[0,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yu[0,mif1] * self.yubar[1,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yu[0,mif1] * self.yubar[1,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yu[0,mif1] * self.yubar[1,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yu[1,mif1] * self.yubar[1,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yu[1,mif1] * self.yubar[1,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yu[1,mif1] * self.yubar[1,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yu[2,mif1] * self.yubar[1,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yu[2,mif1] * self.yubar[1,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yu[2,mif1] * self.yubar[1,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yu[0,mif1] * self.yubar[2,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yu[0,mif1] * self.yubar[2,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yu[0,mif1] * self.yubar[2,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yu[1,mif1] * self.yubar[2,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yu[1,mif1] * self.yubar[2,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yu[1,mif1] * self.yubar[2,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yu[2,mif1] * self.yubar[2,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yu[2,mif1] * self.yubar[2,mif2] * self.yubar[mif1,mif1] + 1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yu[2,mif1] * self.yubar[2,mif2] * self.yubar[mif1,mif1] + -1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yubar[mif1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,0] * self.yl[0,0] * self.yu[mif2,0] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,0] * self.yl[0,1] * self.yu[mif2,0] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,0] * self.yl[0,2] * self.yu[mif2,0] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,1] * self.yl[1,0] * self.yu[mif2,0] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,1] * self.yl[1,1] * self.yu[mif2,0] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,1] * self.yl[1,2] * self.yu[mif2,0] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[0,2] * self.yl[2,0] * self.yu[mif2,0] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[0,2] * self.yl[2,1] * self.yu[mif2,0] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[0,2] * self.yl[2,2] * self.yu[mif2,0] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,0] * self.yl[0,0] * self.yu[mif2,1] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,0] * self.yl[0,1] * self.yu[mif2,1] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,0] * self.yl[0,2] * self.yu[mif2,1] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,1] * self.yl[1,0] * self.yu[mif2,1] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,1] * self.yl[1,1] * self.yu[mif2,1] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,1] * self.yl[1,2] * self.yu[mif2,1] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[1,2] * self.yl[2,0] * self.yu[mif2,1] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[1,2] * self.yl[2,1] * self.yu[mif2,1] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[1,2] * self.yl[2,2] * self.yu[mif2,1] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,0] * self.yl[0,0] * self.yu[mif2,2] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,0] * self.yl[0,1] * self.yu[mif2,2] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,0] * self.yl[0,2] * self.yu[mif2,2] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,1] * self.yl[1,0] * self.yu[mif2,2] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,1] * self.yl[1,1] * self.yu[mif2,2] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,1] * self.yl[1,2] * self.yu[mif2,2] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[2,2] * self.yl[2,0] * self.yu[mif2,2] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[2,2] * self.yl[2,1] * self.yu[mif2,2] * self.yubar[mif2,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[2,2] * self.yl[2,2] * self.yu[mif2,2] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[mif2,0] * self.yubar[0,0] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[mif2,0] * self.yubar[0,0] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[mif2,0] * self.yubar[0,0] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[mif2,1] * self.yubar[0,1] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[mif2,1] * self.yubar[0,1] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[mif2,1] * self.yubar[0,1] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.yu[mif2,2] * self.yubar[0,2] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.yu[mif2,2] * self.yubar[0,2] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.yu[mif2,2] * self.yubar[0,2] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[mif2,0] * self.yubar[1,0] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[mif2,0] * self.yubar[1,0] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[mif2,0] * self.yubar[1,0] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[mif2,1] * self.yubar[1,1] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[mif2,1] * self.yubar[1,1] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[mif2,1] * self.yubar[1,1] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.yu[mif2,2] * self.yubar[1,2] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.yu[mif2,2] * self.yubar[1,2] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.yu[mif2,2] * self.yubar[1,2] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[mif2,0] * self.yubar[2,0] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[mif2,0] * self.yubar[2,0] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[mif2,0] * self.yubar[2,0] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[mif2,1] * self.yubar[2,1] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[mif2,1] * self.yubar[2,1] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[mif2,1] * self.yubar[2,1] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.yu[mif2,2] * self.yubar[2,2] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.yu[mif2,2] * self.yubar[2,2] * self.yubar[mif2,mif2] + -1/384 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.yu[mif2,2] * self.yubar[2,2] * self.yubar[mif2,mif2])

    def alphaOdHbar(self, mif1,mif2):
        return (1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yd[0,0] * self.ydbar[0,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yd[0,0] * self.ydbar[0,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yd[0,0] * self.ydbar[0,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yd[1,0] * self.ydbar[0,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yd[1,0] * self.ydbar[0,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yd[1,0] * self.ydbar[0,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yd[2,0] * self.ydbar[0,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yd[2,0] * self.ydbar[0,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yd[2,0] * self.ydbar[0,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yd[0,0] * self.ydbar[1,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yd[0,0] * self.ydbar[1,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yd[0,0] * self.ydbar[1,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yd[1,0] * self.ydbar[1,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yd[1,0] * self.ydbar[1,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yd[1,0] * self.ydbar[1,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yd[2,0] * self.ydbar[1,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yd[2,0] * self.ydbar[1,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yd[2,0] * self.ydbar[1,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yd[0,0] * self.ydbar[2,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yd[0,0] * self.ydbar[2,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yd[0,0] * self.ydbar[2,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yd[1,0] * self.ydbar[2,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yd[1,0] * self.ydbar[2,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yd[1,0] * self.ydbar[2,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yd[2,0] * self.ydbar[2,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yd[2,0] * self.ydbar[2,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yd[2,0] * self.ydbar[2,mif2] * self.ydbar[mif1,0] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yd[0,1] * self.ydbar[0,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yd[0,1] * self.ydbar[0,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yd[0,1] * self.ydbar[0,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yd[1,1] * self.ydbar[0,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yd[1,1] * self.ydbar[0,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yd[1,1] * self.ydbar[0,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yd[2,1] * self.ydbar[0,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yd[2,1] * self.ydbar[0,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yd[2,1] * self.ydbar[0,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yd[0,1] * self.ydbar[1,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yd[0,1] * self.ydbar[1,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yd[0,1] * self.ydbar[1,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yd[1,1] * self.ydbar[1,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yd[1,1] * self.ydbar[1,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yd[1,1] * self.ydbar[1,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yd[2,1] * self.ydbar[1,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yd[2,1] * self.ydbar[1,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yd[2,1] * self.ydbar[1,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yd[0,1] * self.ydbar[2,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yd[0,1] * self.ydbar[2,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yd[0,1] * self.ydbar[2,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yd[1,1] * self.ydbar[2,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yd[1,1] * self.ydbar[2,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yd[1,1] * self.ydbar[2,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yd[2,1] * self.ydbar[2,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yd[2,1] * self.ydbar[2,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yd[2,1] * self.ydbar[2,mif2] * self.ydbar[mif1,1] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yd[0,2] * self.ydbar[0,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yd[0,2] * self.ydbar[0,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yd[0,2] * self.ydbar[0,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,0] * self.yd[1,2] * self.ydbar[0,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,1] * self.yd[1,2] * self.ydbar[0,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,2] * self.yd[1,2] * self.ydbar[0,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,0] * self.yd[2,2] * self.ydbar[0,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,1] * self.yd[2,2] * self.ydbar[0,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,2] * self.yd[2,2] * self.ydbar[0,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,0] * self.yd[0,2] * self.ydbar[1,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,1] * self.yd[0,2] * self.ydbar[1,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,2] * self.yd[0,2] * self.ydbar[1,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yd[1,2] * self.ydbar[1,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yd[1,2] * self.ydbar[1,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yd[1,2] * self.ydbar[1,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,0] * self.yd[2,2] * self.ydbar[1,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,1] * self.yd[2,2] * self.ydbar[1,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,2] * self.yd[2,2] * self.ydbar[1,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,0] * self.yd[0,2] * self.ydbar[2,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,1] * self.yd[0,2] * self.ydbar[2,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,2] * self.yd[0,2] * self.ydbar[2,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,0] * self.yd[1,2] * self.ydbar[2,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,1] * self.yd[1,2] * self.ydbar[2,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,2] * self.yd[1,2] * self.ydbar[2,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yd[2,2] * self.ydbar[2,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yd[2,2] * self.ydbar[2,mif2] * self.ydbar[mif1,2] + 1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yd[2,2] * self.ydbar[2,mif2] * self.ydbar[mif1,2] + -1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.ydbar[mif1,mif2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] * self.yl[0,0] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] * self.yl[0,0] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] * self.yl[0,0] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] * self.yl[0,1] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] * self.yl[0,1] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] * self.yl[0,1] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] * self.yl[0,2] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] * self.yl[0,2] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] * self.yl[0,2] * self.ylbar[0,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] * self.yl[0,0] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] * self.yl[0,0] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] * self.yl[0,0] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] * self.yl[0,1] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] * self.yl[0,1] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] * self.yl[0,1] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] * self.yl[0,2] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] * self.yl[0,2] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] * self.yl[0,2] * self.ylbar[0,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] * self.yl[0,0] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] * self.yl[0,0] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] * self.yl[0,0] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] * self.yl[0,1] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] * self.yl[0,1] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] * self.yl[0,1] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] * self.yl[0,2] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] * self.yl[0,2] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] * self.yl[0,2] * self.ylbar[0,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] * self.yl[1,0] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] * self.yl[1,0] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] * self.yl[1,0] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] * self.yl[1,1] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] * self.yl[1,1] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] * self.yl[1,1] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] * self.yl[1,2] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] * self.yl[1,2] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] * self.yl[1,2] * self.ylbar[1,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] * self.yl[1,0] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] * self.yl[1,0] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] * self.yl[1,0] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] * self.yl[1,1] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] * self.yl[1,1] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] * self.yl[1,1] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] * self.yl[1,2] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] * self.yl[1,2] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] * self.yl[1,2] * self.ylbar[1,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] * self.yl[1,0] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] * self.yl[1,0] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] * self.yl[1,0] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] * self.yl[1,1] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] * self.yl[1,1] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] * self.yl[1,1] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] * self.yl[1,2] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] * self.yl[1,2] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] * self.yl[1,2] * self.ylbar[1,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] * self.yl[2,0] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] * self.yl[2,0] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] * self.yl[2,0] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] * self.yl[2,1] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] * self.yl[2,1] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] * self.yl[2,1] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] * self.yl[2,2] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] * self.yl[2,2] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] * self.yl[2,2] * self.ylbar[2,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] * self.yl[2,0] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] * self.yl[2,0] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] * self.yl[2,0] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] * self.yl[2,1] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] * self.yl[2,1] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] * self.yl[2,1] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] * self.yl[2,2] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] * self.yl[2,2] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] * self.yl[2,2] * self.ylbar[2,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,0] * self.ydbar[0,mif2] * self.yl[2,0] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,0] * self.ydbar[1,mif2] * self.yl[2,0] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,0] * self.ydbar[2,mif2] * self.yl[2,0] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,1] * self.ydbar[0,mif2] * self.yl[2,1] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,1] * self.ydbar[1,mif2] * self.yl[2,1] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,1] * self.ydbar[2,mif2] * self.yl[2,1] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[mif1,2] * self.ydbar[0,mif2] * self.yl[2,2] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[mif1,2] * self.ydbar[1,mif2] * self.yl[2,2] * self.ylbar[2,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[mif1,2] * self.ydbar[2,mif2] * self.yl[2,2] * self.ylbar[2,2])

    def alphaOeHbar(self, mif1,mif2):
        return (-3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[0,0] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[0,0] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[0,0] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[0,1] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[0,1] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[0,1] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[0,2] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[0,2] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[0,2] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[1,0] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[1,0] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[1,0] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[1,1] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[1,1] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[1,1] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[1,2] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[1,2] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[1,2] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[2,0] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[2,0] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[2,0] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[2,1] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[2,1] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[2,1] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[2,2] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[2,2] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[2,2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,1] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,1] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,1] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,2] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,2] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,2] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,0] * self.yl[1,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,0] * self.yl[1,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,0] * self.yl[1,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,0] * self.yl[2,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,0] * self.yl[2,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,0] * self.yl[2,0] * self.ylbar[0,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,1] * self.yl[0,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,1] * self.yl[0,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,1] * self.yl[0,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,2] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,2] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,2] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,1] * self.yl[2,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,1] * self.yl[2,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,1] * self.yl[2,0] * self.ylbar[1,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,2] * self.yl[0,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,2] * self.yl[0,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,2] * self.yl[0,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,2] * self.yl[1,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,2] * self.yl[1,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,2] * self.yl[1,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,0] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,0] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,0] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,1] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,1] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,1] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[0,0] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[0,0] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[0,0] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[0,1] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[0,1] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[0,1] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[0,2] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[0,2] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[0,2] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[1,0] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[1,0] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[1,0] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[1,1] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[1,1] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[1,1] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[1,2] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[1,2] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[1,2] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[2,0] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[2,0] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[2,0] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[2,1] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[2,1] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[2,1] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[2,2] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[2,2] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[2,2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,2] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,2] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,2] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,0] * self.yl[1,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,0] * self.yl[1,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,0] * self.yl[1,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,0] * self.yl[2,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,0] * self.yl[2,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,0] * self.yl[2,1] * self.ylbar[0,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,1] * self.yl[0,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,1] * self.yl[0,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,1] * self.yl[0,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,0] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,0] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,0] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,2] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,2] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,2] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,1] * self.yl[2,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,1] * self.yl[2,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,1] * self.yl[2,1] * self.ylbar[1,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,2] * self.yl[0,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,2] * self.yl[0,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,2] * self.yl[0,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,2] * self.yl[1,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,2] * self.yl[1,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,2] * self.yl[1,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,0] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,0] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,0] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,1] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,1] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,1] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[0,0] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[0,0] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[0,0] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[0,1] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[0,1] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[0,1] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[0,2] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[0,2] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[0,2] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[1,0] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[1,0] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[1,0] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[1,1] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[1,1] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[1,1] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[1,2] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[1,2] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[1,2] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,mif2] * self.yd[0,0] * self.ydbar[2,0] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,mif2] * self.yd[1,0] * self.ydbar[2,0] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.yd[2,0] * self.ydbar[2,0] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,mif2] * self.yd[0,1] * self.ydbar[2,1] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,mif2] * self.yd[1,1] * self.ydbar[2,1] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.yd[2,1] * self.ydbar[2,1] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,mif2] * self.yd[0,2] * self.ydbar[2,2] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,mif2] * self.yd[1,2] * self.ydbar[2,2] * self.ylbar[mif1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.yd[2,2] * self.ydbar[2,2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,0] * self.yl[0,0] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,1] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,1] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,1] * self.yl[0,1] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,0] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,0] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,0] * self.yl[0,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,0] * self.yl[1,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,0] * self.yl[1,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,0] * self.yl[1,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,0] * self.yl[2,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,0] * self.yl[2,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,0] * self.yl[2,2] * self.ylbar[0,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,1] * self.yl[0,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,1] * self.yl[0,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,1] * self.yl[0,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,0] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,0] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,0] * self.yl[1,0] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,1] * self.yl[1,1] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,1] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,1] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,1] * self.yl[1,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,1] * self.yl[2,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,1] * self.yl[2,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,1] * self.yl[2,2] * self.ylbar[1,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RLbar[0,2] * self.yl[0,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RLbar[1,2] * self.yl[0,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RLbar[2,2] * self.yl[0,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RLbar[0,2] * self.yl[1,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RLbar[1,2] * self.yl[1,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RLbar[2,2] * self.yl[1,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,0] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,0] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,0] * self.yl[2,0] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,1] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,1] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,1] * self.yl[2,1] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RLbar[0,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RLbar[1,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RLbar[2,2] * self.yl[2,2] * self.ylbar[2,mif2] * self.ylbar[mif1,2] + -1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.ylbar[mif1,mif2] + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[0,mif1] * self.yl[0,0] * self.ylbar[0,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[0,mif1] * self.yl[0,1] * self.ylbar[0,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[0,mif1] * self.yl[0,2] * self.ylbar[0,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[0,mif1] * self.yl[1,0] * self.ylbar[1,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[0,mif1] * self.yl[1,1] * self.ylbar[1,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[0,mif1] * self.yl[1,2] * self.ylbar[1,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[0,mif1] * self.yl[2,0] * self.ylbar[2,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[0,mif1] * self.yl[2,1] * self.ylbar[2,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[0,mif1] * self.yl[2,2] * self.ylbar[2,mif2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,0] * self.yl[0,0] * self.ylbar[mif1,0] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,1] * self.yl[1,0] * self.ylbar[mif1,0] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,2] * self.yl[2,0] * self.ylbar[mif1,0] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,0] * self.yl[0,1] * self.ylbar[mif1,1] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,1] * self.yl[1,1] * self.ylbar[mif1,1] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,2] * self.yl[2,1] * self.ylbar[mif1,1] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,0] * self.yl[0,2] * self.ylbar[mif1,2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,1] * self.yl[1,2] * self.ylbar[mif1,2] * self.yu[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,2] * self.yl[2,2] * self.ylbar[mif1,2] * self.yu[0,0] + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[1,mif1] * self.yl[0,0] * self.ylbar[0,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[1,mif1] * self.yl[0,1] * self.ylbar[0,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[1,mif1] * self.yl[0,2] * self.ylbar[0,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[1,mif1] * self.yl[1,0] * self.ylbar[1,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[1,mif1] * self.yl[1,1] * self.ylbar[1,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[1,mif1] * self.yl[1,2] * self.ylbar[1,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[1,mif1] * self.yl[2,0] * self.ylbar[2,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[1,mif1] * self.yl[2,1] * self.ylbar[2,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[1,mif1] * self.yl[2,2] * self.ylbar[2,mif2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,0] * self.yl[0,0] * self.ylbar[mif1,0] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,1] * self.yl[1,0] * self.ylbar[mif1,0] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,2] * self.yl[2,0] * self.ylbar[mif1,0] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,0] * self.yl[0,1] * self.ylbar[mif1,1] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,1] * self.yl[1,1] * self.ylbar[mif1,1] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,2] * self.yl[2,1] * self.ylbar[mif1,1] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,0] * self.yl[0,2] * self.ylbar[mif1,2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,1] * self.yl[1,2] * self.ylbar[mif1,2] * self.yu[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,2] * self.yl[2,2] * self.ylbar[mif1,2] * self.yu[0,1] + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[2,mif1] * self.yl[0,0] * self.ylbar[0,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[2,mif1] * self.yl[0,1] * self.ylbar[0,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[2,mif1] * self.yl[0,2] * self.ylbar[0,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[2,mif1] * self.yl[1,0] * self.ylbar[1,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[2,mif1] * self.yl[1,1] * self.ylbar[1,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[2,mif1] * self.yl[1,2] * self.ylbar[1,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,0] * self.Y2RL[2,mif1] * self.yl[2,0] * self.ylbar[2,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,1] * self.Y2RL[2,mif1] * self.yl[2,1] * self.ylbar[2,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,2] * self.Y2RL[2,mif1] * self.yl[2,2] * self.ylbar[2,mif2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,0] * self.yl[0,0] * self.ylbar[mif1,0] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,1] * self.yl[1,0] * self.ylbar[mif1,0] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,2] * self.yl[2,0] * self.ylbar[mif1,0] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,0] * self.yl[0,1] * self.ylbar[mif1,1] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,1] * self.yl[1,1] * self.ylbar[mif1,1] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,2] * self.yl[2,1] * self.ylbar[mif1,1] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,0] * self.yl[0,2] * self.ylbar[mif1,2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,1] * self.yl[1,2] * self.ylbar[mif1,2] * self.yu[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,2] * self.yl[2,2] * self.ylbar[mif1,2] * self.yu[0,2] + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[0,mif1] * self.yl[0,0] * self.ylbar[0,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[0,mif1] * self.yl[0,1] * self.ylbar[0,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[0,mif1] * self.yl[0,2] * self.ylbar[0,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[0,mif1] * self.yl[1,0] * self.ylbar[1,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[0,mif1] * self.yl[1,1] * self.ylbar[1,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[0,mif1] * self.yl[1,2] * self.ylbar[1,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[0,mif1] * self.yl[2,0] * self.ylbar[2,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[0,mif1] * self.yl[2,1] * self.ylbar[2,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[0,mif1] * self.yl[2,2] * self.ylbar[2,mif2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,0] * self.yl[0,0] * self.ylbar[mif1,0] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,1] * self.yl[1,0] * self.ylbar[mif1,0] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,2] * self.yl[2,0] * self.ylbar[mif1,0] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,0] * self.yl[0,1] * self.ylbar[mif1,1] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,1] * self.yl[1,1] * self.ylbar[mif1,1] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,2] * self.yl[2,1] * self.ylbar[mif1,1] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,0] * self.yl[0,2] * self.ylbar[mif1,2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,1] * self.yl[1,2] * self.ylbar[mif1,2] * self.yu[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,2] * self.yl[2,2] * self.ylbar[mif1,2] * self.yu[1,0] + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[1,mif1] * self.yl[0,0] * self.ylbar[0,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[1,mif1] * self.yl[0,1] * self.ylbar[0,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[1,mif1] * self.yl[0,2] * self.ylbar[0,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[1,mif1] * self.yl[1,0] * self.ylbar[1,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[1,mif1] * self.yl[1,1] * self.ylbar[1,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[1,mif1] * self.yl[1,2] * self.ylbar[1,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[1,mif1] * self.yl[2,0] * self.ylbar[2,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[1,mif1] * self.yl[2,1] * self.ylbar[2,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[1,mif1] * self.yl[2,2] * self.ylbar[2,mif2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,0] * self.yl[0,0] * self.ylbar[mif1,0] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,1] * self.yl[1,0] * self.ylbar[mif1,0] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,2] * self.yl[2,0] * self.ylbar[mif1,0] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,0] * self.yl[0,1] * self.ylbar[mif1,1] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,1] * self.yl[1,1] * self.ylbar[mif1,1] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,2] * self.yl[2,1] * self.ylbar[mif1,1] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,0] * self.yl[0,2] * self.ylbar[mif1,2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,1] * self.yl[1,2] * self.ylbar[mif1,2] * self.yu[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,2] * self.yl[2,2] * self.ylbar[mif1,2] * self.yu[1,1] + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[2,mif1] * self.yl[0,0] * self.ylbar[0,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[2,mif1] * self.yl[0,1] * self.ylbar[0,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[2,mif1] * self.yl[0,2] * self.ylbar[0,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[2,mif1] * self.yl[1,0] * self.ylbar[1,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[2,mif1] * self.yl[1,1] * self.ylbar[1,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[2,mif1] * self.yl[1,2] * self.ylbar[1,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,0] * self.Y2RL[2,mif1] * self.yl[2,0] * self.ylbar[2,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,1] * self.Y2RL[2,mif1] * self.yl[2,1] * self.ylbar[2,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,2] * self.Y2RL[2,mif1] * self.yl[2,2] * self.ylbar[2,mif2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,0] * self.yl[0,0] * self.ylbar[mif1,0] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,1] * self.yl[1,0] * self.ylbar[mif1,0] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,2] * self.yl[2,0] * self.ylbar[mif1,0] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,0] * self.yl[0,1] * self.ylbar[mif1,1] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,1] * self.yl[1,1] * self.ylbar[mif1,1] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,2] * self.yl[2,1] * self.ylbar[mif1,1] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,0] * self.yl[0,2] * self.ylbar[mif1,2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,1] * self.yl[1,2] * self.ylbar[mif1,2] * self.yu[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,2] * self.yl[2,2] * self.ylbar[mif1,2] * self.yu[1,2] + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[0,mif1] * self.yl[0,0] * self.ylbar[0,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[0,mif1] * self.yl[0,1] * self.ylbar[0,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[0,mif1] * self.yl[0,2] * self.ylbar[0,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[0,mif1] * self.yl[1,0] * self.ylbar[1,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[0,mif1] * self.yl[1,1] * self.ylbar[1,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[0,mif1] * self.yl[1,2] * self.ylbar[1,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[0,mif1] * self.yl[2,0] * self.ylbar[2,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[0,mif1] * self.yl[2,1] * self.ylbar[2,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[0,mif1] * self.yl[2,2] * self.ylbar[2,mif2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,0] * self.yl[0,0] * self.ylbar[mif1,0] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,1] * self.yl[1,0] * self.ylbar[mif1,0] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,2] * self.yl[2,0] * self.ylbar[mif1,0] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,0] * self.yl[0,1] * self.ylbar[mif1,1] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,1] * self.yl[1,1] * self.ylbar[mif1,1] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,2] * self.yl[2,1] * self.ylbar[mif1,1] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,0] * self.yl[0,2] * self.ylbar[mif1,2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,1] * self.yl[1,2] * self.ylbar[mif1,2] * self.yu[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,2] * self.yl[2,2] * self.ylbar[mif1,2] * self.yu[2,0] + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[1,mif1] * self.yl[0,0] * self.ylbar[0,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[1,mif1] * self.yl[0,1] * self.ylbar[0,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[1,mif1] * self.yl[0,2] * self.ylbar[0,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[1,mif1] * self.yl[1,0] * self.ylbar[1,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[1,mif1] * self.yl[1,1] * self.ylbar[1,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[1,mif1] * self.yl[1,2] * self.ylbar[1,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[1,mif1] * self.yl[2,0] * self.ylbar[2,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[1,mif1] * self.yl[2,1] * self.ylbar[2,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[1,mif1] * self.yl[2,2] * self.ylbar[2,mif2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,0] * self.yl[0,0] * self.ylbar[mif1,0] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,1] * self.yl[1,0] * self.ylbar[mif1,0] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,2] * self.yl[2,0] * self.ylbar[mif1,0] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,0] * self.yl[0,1] * self.ylbar[mif1,1] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,1] * self.yl[1,1] * self.ylbar[mif1,1] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,2] * self.yl[2,1] * self.ylbar[mif1,1] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,0] * self.yl[0,2] * self.ylbar[mif1,2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,1] * self.yl[1,2] * self.ylbar[mif1,2] * self.yu[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,2] * self.yl[2,2] * self.ylbar[mif1,2] * self.yu[2,1] + -9/32 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + -3/16 * self.invepsilonbar * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + 3/16 * self.lam * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[2,mif1] * self.yl[0,0] * self.ylbar[0,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[2,mif1] * self.yl[0,1] * self.ylbar[0,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[2,mif1] * self.yl[0,2] * self.ylbar[0,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[2,mif1] * self.yl[1,0] * self.ylbar[1,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[2,mif1] * self.yl[1,1] * self.ylbar[1,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[2,mif1] * self.yl[1,2] * self.ylbar[1,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,0] * self.Y2RL[2,mif1] * self.yl[2,0] * self.ylbar[2,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,1] * self.Y2RL[2,mif1] * self.yl[2,1] * self.ylbar[2,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,2] * self.Y2RL[2,mif1] * self.yl[2,2] * self.ylbar[2,mif2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,0] * self.yl[0,0] * self.ylbar[mif1,0] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,1] * self.yl[1,0] * self.ylbar[mif1,0] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,2] * self.yl[2,0] * self.ylbar[mif1,0] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,0] * self.yl[0,1] * self.ylbar[mif1,1] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,1] * self.yl[1,1] * self.ylbar[mif1,1] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,2] * self.yl[2,1] * self.ylbar[mif1,1] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,0] * self.yl[0,2] * self.ylbar[mif1,2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,1] * self.yl[1,2] * self.ylbar[mif1,2] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,2] * self.yl[2,2] * self.ylbar[mif1,2] * self.yu[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yu[0,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yu[0,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yu[0,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] * self.yu[0,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] * self.yu[0,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] * self.yu[0,0] * self.yubar[0,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * (self.yu[0,0])**(2) * self.yubar[0,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * (self.yu[0,0])**(2) * self.yubar[0,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * (self.yu[0,0])**(2) * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yu[0,1] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yu[0,1] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yu[0,1] * self.yubar[0,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,0] * self.yu[0,1] * self.yubar[0,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,0] * self.yu[0,1] * self.yubar[0,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,0] * self.yu[0,1] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yu[0,2] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yu[0,2] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yu[0,2] * self.yubar[0,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,0] * self.yu[0,2] * self.yubar[0,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,0] * self.yu[0,2] * self.yubar[0,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,0] * self.yu[0,2] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] * self.yu[1,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] * self.yu[1,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] * self.yu[1,0] * self.yubar[0,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,0] * self.yubar[0,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,0] * self.yubar[0,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,0] * self.yubar[0,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,0] * self.yubar[0,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,0] * self.yubar[0,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,0] * self.yubar[0,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,0] * self.yubar[0,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,0] * self.yubar[0,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] * self.yu[2,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] * self.yu[2,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] * self.yu[2,0] * self.yubar[0,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,0] * self.yubar[0,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,0] * self.yubar[0,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,0] * self.yubar[0,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,0] * self.yubar[0,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,0] * self.yubar[0,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,0] * self.yubar[0,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,0] * self.yubar[0,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,0] * self.yubar[0,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,0] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yu[0,0] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yu[0,0] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yu[0,0] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yu[0,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yu[0,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yu[0,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] * self.yu[0,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] * self.yu[0,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] * self.yu[0,1] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[0,1] * self.yubar[0,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[0,1] * self.yubar[0,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[0,1] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * (self.yu[0,1])**(2) * self.yubar[0,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * (self.yu[0,1])**(2) * self.yubar[0,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * (self.yu[0,1])**(2) * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yu[0,2] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yu[0,2] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yu[0,2] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,1] * self.yu[0,2] * self.yubar[0,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,1] * self.yu[0,2] * self.yubar[0,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,1] * self.yu[0,2] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] * self.yu[1,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] * self.yu[1,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] * self.yu[1,1] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,1] * self.yubar[0,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,1] * self.yubar[0,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,1] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,1] * self.yubar[0,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,1] * self.yubar[0,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,1] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,1] * self.yubar[0,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,1] * self.yubar[0,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] * self.yu[2,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] * self.yu[2,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] * self.yu[2,1] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,1] * self.yubar[0,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,1] * self.yubar[0,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,1] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,1] * self.yubar[0,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,1] * self.yubar[0,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,1] * self.yubar[0,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,1] * self.yubar[0,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,1] * self.yubar[0,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,1] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yu[0,0] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yu[0,0] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yu[0,0] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yu[0,1] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yu[0,1] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yu[0,1] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yu[0,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yu[0,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yu[0,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] * self.yu[0,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] * self.yu[0,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] * self.yu[0,2] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[0,2] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[0,2] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[0,2] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[0,2] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[0,2] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[0,2] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * (self.yu[0,2])**(2) * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * (self.yu[0,2])**(2) * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * (self.yu[0,2])**(2) * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] * self.yu[1,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] * self.yu[1,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] * self.yu[1,2] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,2] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,2] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,2] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,2] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,2] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,2] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,2] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,2] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] * self.yu[2,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] * self.yu[2,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] * self.yu[2,2] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,2] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,2] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,2] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,2] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,2] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,2] * self.yubar[0,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,2] * self.yubar[0,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,2] * self.yubar[0,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,2] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] * self.yu[0,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] * self.yu[0,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] * self.yu[0,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yu[1,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yu[1,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yu[1,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] * self.yu[1,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] * self.yu[1,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] * self.yu[1,0] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,0] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,0] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[1,0] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * (self.yu[1,0])**(2) * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * (self.yu[1,0])**(2) * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * (self.yu[1,0])**(2) * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yu[1,1] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yu[1,1] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yu[1,1] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,0] * self.yu[1,1] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,0] * self.yu[1,1] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,0] * self.yu[1,1] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,0] * self.yu[1,1] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,0] * self.yu[1,1] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,0] * self.yu[1,1] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yu[1,2] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yu[1,2] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yu[1,2] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,0] * self.yu[1,2] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,0] * self.yu[1,2] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,0] * self.yu[1,2] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,0] * self.yu[1,2] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,0] * self.yu[1,2] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,0] * self.yu[1,2] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] * self.yu[2,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] * self.yu[2,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] * self.yu[2,0] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,0] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,0] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,0] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,0] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,0] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,0] * self.yubar[1,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,0] * self.yubar[1,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,0] * self.yubar[1,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,0] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] * self.yu[0,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] * self.yu[0,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] * self.yu[0,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yu[1,0] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yu[1,0] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yu[1,0] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,1] * self.yu[1,0] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,1] * self.yu[1,0] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,1] * self.yu[1,0] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yu[1,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yu[1,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yu[1,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] * self.yu[1,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] * self.yu[1,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] * self.yu[1,1] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,1] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,1] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[1,1] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[1,1] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[1,1] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[1,1] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * (self.yu[1,1])**(2) * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * (self.yu[1,1])**(2) * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * (self.yu[1,1])**(2) * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yu[1,2] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yu[1,2] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yu[1,2] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,1] * self.yu[1,2] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,1] * self.yu[1,2] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,1] * self.yu[1,2] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,1] * self.yu[1,2] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,1] * self.yu[1,2] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,1] * self.yu[1,2] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] * self.yu[2,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] * self.yu[2,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] * self.yu[2,1] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,1] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,1] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,1] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,1] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,1] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,1] * self.yubar[1,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,1] * self.yubar[1,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,1] * self.yubar[1,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,1] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] * self.yu[0,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] * self.yu[0,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] * self.yu[0,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yu[1,0] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yu[1,0] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yu[1,0] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,2] * self.yu[1,0] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,2] * self.yu[1,0] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,2] * self.yu[1,0] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yu[1,1] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yu[1,1] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yu[1,1] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,2] * self.yu[1,1] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,2] * self.yu[1,1] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,2] * self.yu[1,1] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yu[1,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yu[1,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yu[1,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] * self.yu[1,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] * self.yu[1,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] * self.yu[1,2] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,2] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,2] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[1,2] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[1,2] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[1,2] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[1,2] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[1,2] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[1,2] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[1,2] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * (self.yu[1,2])**(2) * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * (self.yu[1,2])**(2) * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * (self.yu[1,2])**(2) * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] * self.yu[2,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] * self.yu[2,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] * self.yu[2,2] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,2] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,2] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,2] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,2] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,2] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,2] * self.yubar[1,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,2] * self.yubar[1,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,2] * self.yubar[1,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,2] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] * self.yu[0,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] * self.yu[0,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] * self.yu[0,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] * self.yu[1,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] * self.yu[1,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] * self.yu[1,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yu[2,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yu[2,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yu[2,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] * self.yu[2,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] * self.yu[2,0] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] * self.yu[2,0] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,0] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,0] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yu[2,0] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,0] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,0] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yu[2,0] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * (self.yu[2,0])**(2) * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * (self.yu[2,0])**(2) * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * (self.yu[2,0])**(2) * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yu[2,1] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yu[2,1] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yu[2,1] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,0] * self.yu[2,1] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,0] * self.yu[2,1] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,0] * self.yu[2,1] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,0] * self.yu[2,1] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,0] * self.yu[2,1] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,0] * self.yu[2,1] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,0] * self.yu[2,1] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,0] * self.yu[2,1] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,0] * self.yu[2,1] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,0] * self.ylbar[0,mif2] * self.yu[2,2] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,1] * self.ylbar[1,mif2] * self.yu[2,2] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,2] * self.ylbar[2,mif2] * self.yu[2,2] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,0] * self.yu[2,2] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,0] * self.yu[2,2] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,0] * self.yu[2,2] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,0] * self.yu[2,2] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,0] * self.yu[2,2] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,0] * self.yu[2,2] * self.yubar[2,0] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,0] * self.yu[2,2] * self.yubar[2,0] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,0] * self.yu[2,2] * self.yubar[2,0] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,0] * self.yu[2,2] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] * self.yu[0,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] * self.yu[0,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] * self.yu[0,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] * self.yu[1,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] * self.yu[1,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] * self.yu[1,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yu[2,0] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yu[2,0] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yu[2,0] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,1] * self.yu[2,0] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,1] * self.yu[2,0] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,1] * self.yu[2,0] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,1] * self.yu[2,0] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,1] * self.yu[2,0] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,1] * self.yu[2,0] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yu[2,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yu[2,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yu[2,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] * self.yu[2,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] * self.yu[2,1] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] * self.yu[2,1] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,1] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,1] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yu[2,1] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,1] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,1] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yu[2,1] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] * self.yu[2,1] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] * self.yu[2,1] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] * self.yu[2,1] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * (self.yu[2,1])**(2) * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * (self.yu[2,1])**(2) * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * (self.yu[2,1])**(2) * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,0] * self.ylbar[0,mif2] * self.yu[2,2] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,1] * self.ylbar[1,mif2] * self.yu[2,2] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,2] * self.ylbar[2,mif2] * self.yu[2,2] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,1] * self.yu[2,2] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,1] * self.yu[2,2] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,1] * self.yu[2,2] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,1] * self.yu[2,2] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,1] * self.yu[2,2] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,1] * self.yu[2,2] * self.yubar[2,1] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,1] * self.yu[2,2] * self.yubar[2,1] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,1] * self.yu[2,2] * self.yubar[2,1] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,1] * self.yu[2,2] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,0] * self.yu[0,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,1] * self.yu[0,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[0,mif2] * self.ylbar[mif1,2] * self.yu[0,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,0] * self.yu[1,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,1] * self.yu[1,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[1,mif2] * self.ylbar[mif1,2] * self.yu[1,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yu[2,0] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yu[2,0] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yu[2,0] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,2] * self.yu[2,0] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,2] * self.yu[2,0] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,2] * self.yu[2,0] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,2] * self.yu[2,0] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,2] * self.yu[2,0] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,2] * self.yu[2,0] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yu[2,1] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yu[2,1] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yu[2,1] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,2] * self.yu[2,1] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,2] * self.yu[2,1] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,2] * self.yu[2,1] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,2] * self.yu[2,1] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,2] * self.yu[2,1] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,2] * self.yu[2,1] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,0] * self.ylbar[0,mif2] * self.yu[2,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,1] * self.ylbar[1,mif2] * self.yu[2,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,2] * self.ylbar[2,mif2] * self.yu[2,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,0] * self.yu[2,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,1] * self.yu[2,2] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.ylbar[mif1,2] * self.yu[2,2] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,2] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,2] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yu[2,2] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,2] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,2] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yu[2,2] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] * self.yu[2,2] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] * self.yu[2,2] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] * self.yu[2,2] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] * self.yu[2,2] * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] * self.yu[2,2] * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] * self.yu[2,2] * self.yubar[2,2] + 3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * (self.yu[2,2])**(2) * self.yubar[2,2] + 3/16 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * (self.yu[2,2])**(2) * self.yubar[2,2] + -3/16 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * (self.yu[2,2])**(2) * self.yubar[2,2])

    def alphaOqq1(self, mif1,mif2,mif3,mif4):
        return (-1/3840 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -49/207360 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/5760 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif3,0] * self.Y2LRbar[mif2,0] + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif3,1] * self.Y2LRbar[mif2,1] + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif3,2] * self.Y2LRbar[mif2,2] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif1,0] * self.Y2LRbar[mif4,0] + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LR[mif3,0] * self.Y2LRbar[mif2,0] * self.Y2LRbar[mif4,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LR[mif3,1] * self.Y2LRbar[mif2,1] * self.Y2LRbar[mif4,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LR[mif3,2] * self.Y2LRbar[mif2,2] * self.Y2LRbar[mif4,0] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif1,1] * self.Y2LRbar[mif4,1] + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LR[mif3,0] * self.Y2LRbar[mif2,0] * self.Y2LRbar[mif4,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LR[mif3,1] * self.Y2LRbar[mif2,1] * self.Y2LRbar[mif4,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LR[mif3,2] * self.Y2LRbar[mif2,2] * self.Y2LRbar[mif4,1] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif1,2] * self.Y2LRbar[mif4,2] + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LR[mif3,0] * self.Y2LRbar[mif2,0] * self.Y2LRbar[mif4,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LR[mif3,1] * self.Y2LRbar[mif2,1] * self.Y2LRbar[mif4,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LR[mif3,2] * self.Y2LRbar[mif2,2] * self.Y2LRbar[mif4,2])

    def alphaOqq3(self, mif1,mif2,mif3,mif4):
        return (-1/3840 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -1/2560 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif3,0] * self.Y2LRbar[mif2,0] + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif3,1] * self.Y2LRbar[mif2,1] + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif3,2] * self.Y2LRbar[mif2,2] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif1,0] * self.Y2LRbar[mif4,0] + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif1,1] * self.Y2LRbar[mif4,1] + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif1,2] * self.Y2LRbar[mif4,2] + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2])

    def alphaOuu(self, mif1,mif2,mif3,mif4):
        return (-1/1920 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -49/12960 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/5760 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[mif3,0] * self.Y2RLbar[mif2,0] + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[mif3,1] * self.Y2RLbar[mif2,1] + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[mif3,2] * self.Y2RLbar[mif2,2] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[mif1,0] * self.Y2RLbar[mif4,0] + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RL[mif3,0] * self.Y2RLbar[mif2,0] * self.Y2RLbar[mif4,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RL[mif3,1] * self.Y2RLbar[mif2,1] * self.Y2RLbar[mif4,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,0] * self.Y2RL[mif3,2] * self.Y2RLbar[mif2,2] * self.Y2RLbar[mif4,0] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[mif1,1] * self.Y2RLbar[mif4,1] + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RL[mif3,0] * self.Y2RLbar[mif2,0] * self.Y2RLbar[mif4,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RL[mif3,1] * self.Y2RLbar[mif2,1] * self.Y2RLbar[mif4,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,1] * self.Y2RL[mif3,2] * self.Y2RLbar[mif2,2] * self.Y2RLbar[mif4,1] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[mif1,2] * self.Y2RLbar[mif4,2] + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RL[mif3,0] * self.Y2RLbar[mif2,0] * self.Y2RLbar[mif4,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RL[mif3,1] * self.Y2RLbar[mif2,1] * self.Y2RLbar[mif4,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif1,2] * self.Y2RL[mif3,2] * self.Y2RLbar[mif2,2] * self.Y2RLbar[mif4,2])

    def alphaOdd(self, mif1,mif2,mif3,mif4):
        return (-1/1920 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -49/51840 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/5760 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4))

    def alphaOud1(self, mif1,mif2,mif3,mif4):
        return (49/12960 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + -35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + -35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2])

    def alphaOud8(self, mif1,mif2,mif3,mif4):
        return (-1/480 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,0] * self.Y2RLbar[mif2,0] + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,1] * self.Y2RLbar[mif2,1] + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif1,2] * self.Y2RLbar[mif2,2])

    def alphaOqu1(self, mif1,mif2,mif3,mif4):
        return (-49/25920 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/648 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 7/648 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 7/648 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 35/10368 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 35/10368 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 35/10368 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,0] * self.yl[0,0] * self.yu[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,0] * self.yl[0,0] * self.yu[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,0] * self.yl[0,0] * self.yu[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,0] * self.yl[0,1] * self.yu[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,0] * self.yl[0,1] * self.yu[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,0] * self.yl[0,1] * self.yu[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,0] * self.yl[0,2] * self.yu[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,0] * self.yl[0,2] * self.yu[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,0] * self.yl[0,2] * self.yu[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,1] * self.yl[1,0] * self.yu[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,1] * self.yl[1,0] * self.yu[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,1] * self.yl[1,0] * self.yu[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,1] * self.yl[1,1] * self.yu[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,1] * self.yl[1,1] * self.yu[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,1] * self.yl[1,1] * self.yu[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,1] * self.yl[1,2] * self.yu[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,1] * self.yl[1,2] * self.yu[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,1] * self.yl[1,2] * self.yu[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,2] * self.yl[2,0] * self.yu[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,2] * self.yl[2,0] * self.yu[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,2] * self.yl[2,0] * self.yu[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,2] * self.yl[2,1] * self.yu[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,2] * self.yl[2,1] * self.yu[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,2] * self.yl[2,1] * self.yu[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,2] * self.yl[2,2] * self.yu[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,2] * self.yl[2,2] * self.yu[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,2] * self.yl[2,2] * self.yu[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,0] * self.ylbar[0,0] * self.yubar[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,0] * self.ylbar[0,0] * self.yubar[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,0] * self.ylbar[0,0] * self.yubar[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,0] * self.ylbar[0,1] * self.yubar[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,0] * self.ylbar[0,1] * self.yubar[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,0] * self.ylbar[0,1] * self.yubar[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,0] * self.ylbar[0,2] * self.yubar[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,0] * self.ylbar[0,2] * self.yubar[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,0] * self.ylbar[0,2] * self.yubar[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,1] * self.ylbar[1,0] * self.yubar[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,1] * self.ylbar[1,0] * self.yubar[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,1] * self.ylbar[1,0] * self.yubar[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,1] * self.ylbar[1,1] * self.yubar[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,1] * self.ylbar[1,1] * self.yubar[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,1] * self.ylbar[1,1] * self.yubar[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,1] * self.ylbar[1,2] * self.yubar[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,1] * self.ylbar[1,2] * self.yubar[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,1] * self.ylbar[1,2] * self.yubar[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,2] * self.ylbar[2,0] * self.yubar[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,2] * self.ylbar[2,0] * self.yubar[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,2] * self.ylbar[2,0] * self.yubar[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,2] * self.ylbar[2,1] * self.yubar[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,2] * self.ylbar[2,1] * self.yubar[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,2] * self.ylbar[2,1] * self.yubar[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,2] * self.ylbar[2,2] * self.yubar[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,2] * self.ylbar[2,2] * self.yubar[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,2] * self.ylbar[2,2] * self.yubar[mif2,mif3])

    def alphaOqu8(self, mif1,mif2,mif3,mif4):
        return (-1/480 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,0] * self.yl[0,0] * self.yu[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,0] * self.yl[0,0] * self.yu[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,0] * self.yl[0,0] * self.yu[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,0] * self.yl[0,1] * self.yu[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,0] * self.yl[0,1] * self.yu[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,0] * self.yl[0,1] * self.yu[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,0] * self.yl[0,2] * self.yu[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,0] * self.yl[0,2] * self.yu[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,0] * self.yl[0,2] * self.yu[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,1] * self.yl[1,0] * self.yu[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,1] * self.yl[1,0] * self.yu[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,1] * self.yl[1,0] * self.yu[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,1] * self.yl[1,1] * self.yu[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,1] * self.yl[1,1] * self.yu[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,1] * self.yl[1,1] * self.yu[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,1] * self.yl[1,2] * self.yu[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,1] * self.yl[1,2] * self.yu[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,1] * self.yl[1,2] * self.yu[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,2] * self.yl[2,0] * self.yu[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,2] * self.yl[2,0] * self.yu[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,0] * self.Y2RL[mif3,2] * self.yl[2,0] * self.yu[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,2] * self.yl[2,1] * self.yu[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,2] * self.yl[2,1] * self.yu[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,1] * self.Y2RL[mif3,2] * self.yl[2,1] * self.yu[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,2] * self.yl[2,2] * self.yu[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,2] * self.yl[2,2] * self.yu[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif2,2] * self.Y2RL[mif3,2] * self.yl[2,2] * self.yu[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,0] * self.ylbar[0,0] * self.yubar[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,0] * self.ylbar[0,0] * self.yubar[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,0] * self.ylbar[0,0] * self.yubar[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,0] * self.ylbar[0,1] * self.yubar[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,0] * self.ylbar[0,1] * self.yubar[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,0] * self.ylbar[0,1] * self.yubar[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,0] * self.ylbar[0,2] * self.yubar[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,0] * self.ylbar[0,2] * self.yubar[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,0] * self.ylbar[0,2] * self.yubar[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,1] * self.ylbar[1,0] * self.yubar[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,1] * self.ylbar[1,0] * self.yubar[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,1] * self.ylbar[1,0] * self.yubar[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,1] * self.ylbar[1,1] * self.yubar[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,1] * self.ylbar[1,1] * self.yubar[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,1] * self.ylbar[1,1] * self.yubar[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,1] * self.ylbar[1,2] * self.yubar[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,1] * self.ylbar[1,2] * self.yubar[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,1] * self.ylbar[1,2] * self.yubar[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,2] * self.ylbar[2,0] * self.yubar[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,2] * self.ylbar[2,0] * self.yubar[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif4,2] * self.ylbar[2,0] * self.yubar[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,2] * self.ylbar[2,1] * self.yubar[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,2] * self.ylbar[2,1] * self.yubar[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif4,2] * self.ylbar[2,1] * self.yubar[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,2] * self.ylbar[2,2] * self.yubar[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,2] * self.ylbar[2,2] * self.yubar[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif4,2] * self.ylbar[2,2] * self.yubar[mif2,mif3])

    def alphaOqd1(self, mif1,mif2,mif3,mif4):
        return (49/51840 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -7/1296 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + -7/1296 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + -7/1296 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2])

    def alphaOqd8(self, mif1,mif2,mif3,mif4):
        return (-1/480 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2])

    def alphaOquqd1(self, mif1,mif2,mif3,mif4):
        return (-3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yd[mif3,mif4] * self.ylbar[0,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yd[mif3,mif4] * self.ylbar[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,0] * self.yd[mif3,mif4] * self.ylbar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yd[mif3,mif4] * self.ylbar[0,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yd[mif3,mif4] * self.ylbar[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,0] * self.yd[mif3,mif4] * self.ylbar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yd[mif3,mif4] * self.ylbar[0,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yd[mif3,mif4] * self.ylbar[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,0] * self.yd[mif3,mif4] * self.ylbar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yd[mif3,mif4] * self.ylbar[1,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yd[mif3,mif4] * self.ylbar[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,1] * self.yd[mif3,mif4] * self.ylbar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yd[mif3,mif4] * self.ylbar[1,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yd[mif3,mif4] * self.ylbar[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,1] * self.yd[mif3,mif4] * self.ylbar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yd[mif3,mif4] * self.ylbar[1,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yd[mif3,mif4] * self.ylbar[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,1] * self.yd[mif3,mif4] * self.ylbar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yd[mif3,mif4] * self.ylbar[2,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yd[mif3,mif4] * self.ylbar[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2RLbar[mif2,2] * self.yd[mif3,mif4] * self.ylbar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yd[mif3,mif4] * self.ylbar[2,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yd[mif3,mif4] * self.ylbar[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2RLbar[mif2,2] * self.yd[mif3,mif4] * self.ylbar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yd[mif3,mif4] * self.ylbar[2,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yd[mif3,mif4] * self.ylbar[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2RLbar[mif2,2] * self.yd[mif3,mif4] * self.ylbar[2,2])

    def alphaOquqd8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOll(self, mif1,mif2,mif3,mif4):
        return (-1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -49/23040 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/2560 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[0,mif4] * self.Y2RLbar[0,mif1] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif3] + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[0,mif4] * self.Y2RLbar[0,mif3] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[0,mif4] * self.Y2RLbar[0,mif3] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[0,mif4] * self.Y2RLbar[0,mif3] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[0,mif4] * self.Y2RLbar[0,mif3] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif4] * self.Y2RLbar[0,mif3] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[0,mif4] * self.Y2RLbar[0,mif1] * self.Y2RLbar[0,mif3] + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[1,mif4] * self.Y2RLbar[1,mif1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[1,mif4] * self.Y2RLbar[0,mif3] * self.Y2RLbar[1,mif1] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif3] + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[1,mif4] * self.Y2RLbar[1,mif3] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[1,mif4] * self.Y2RLbar[1,mif3] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[1,mif4] * self.Y2RLbar[1,mif3] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[1,mif4] * self.Y2RLbar[1,mif3] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif4] * self.Y2RLbar[1,mif3] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif4] * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[1,mif3] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RL[1,mif4] * self.Y2RLbar[1,mif1] * self.Y2RLbar[1,mif3] + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[2,mif4] * self.Y2RLbar[2,mif1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[2,mif4] * self.Y2RLbar[0,mif3] * self.Y2RLbar[2,mif1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RL[2,mif4] * self.Y2RLbar[1,mif3] * self.Y2RLbar[2,mif1] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif3] + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[2,mif4] * self.Y2RLbar[2,mif3] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[2,mif4] * self.Y2RLbar[2,mif3] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[2,mif4] * self.Y2RLbar[2,mif3] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[2,mif4] * self.Y2RLbar[2,mif3] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif4] * self.Y2RLbar[2,mif3] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif4] * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[2,mif3] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif4] * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[2,mif3] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RL[2,mif4] * self.Y2RLbar[2,mif1] * self.Y2RLbar[2,mif3])

    def alphaOee(self, mif1,mif2,mif3,mif4):
        return (-49/5760 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif1] * self.Y2LRbar[0,mif3] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif3] * self.Y2LRbar[1,mif1] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[1,mif4] * self.Y2LRbar[0,mif1] * self.Y2LRbar[1,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif1] * self.Y2LRbar[1,mif3] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif3] * self.Y2LRbar[2,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif3] * self.Y2LRbar[2,mif1] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[2,mif4] * self.Y2LRbar[0,mif1] * self.Y2LRbar[2,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[2,mif4] * self.Y2LRbar[1,mif1] * self.Y2LRbar[2,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif1] * self.Y2LRbar[2,mif3])

    def alphaOle(self, mif1,mif2,mif3,mif4):
        return (-49/5760 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + 7/192 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/32 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/24 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 7/192 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/32 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/24 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 7/192 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/32 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/24 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif3] * self.Y2RL[0,mif2] * self.yl[mif1,mif4] * self.yu[0,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif3] * self.Y2RL[0,mif2] * self.yl[mif1,mif4] * self.yu[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif3] * self.Y2RL[0,mif2] * self.yl[mif1,mif4] * self.yu[0,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif3] * self.Y2RL[1,mif2] * self.yl[mif1,mif4] * self.yu[0,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif3] * self.Y2RL[1,mif2] * self.yl[mif1,mif4] * self.yu[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif3] * self.Y2RL[1,mif2] * self.yl[mif1,mif4] * self.yu[0,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif3] * self.Y2RL[2,mif2] * self.yl[mif1,mif4] * self.yu[0,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif3] * self.Y2RL[2,mif2] * self.yl[mif1,mif4] * self.yu[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif3] * self.Y2RL[2,mif2] * self.yl[mif1,mif4] * self.yu[0,2] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif3] * self.Y2RL[0,mif2] * self.yl[mif1,mif4] * self.yu[1,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif3] * self.Y2RL[0,mif2] * self.yl[mif1,mif4] * self.yu[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif3] * self.Y2RL[0,mif2] * self.yl[mif1,mif4] * self.yu[1,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif3] * self.Y2RL[1,mif2] * self.yl[mif1,mif4] * self.yu[1,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif3] * self.Y2RL[1,mif2] * self.yl[mif1,mif4] * self.yu[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif3] * self.Y2RL[1,mif2] * self.yl[mif1,mif4] * self.yu[1,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif3] * self.Y2RL[2,mif2] * self.yl[mif1,mif4] * self.yu[1,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif3] * self.Y2RL[2,mif2] * self.yl[mif1,mif4] * self.yu[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif3] * self.Y2RL[2,mif2] * self.yl[mif1,mif4] * self.yu[1,2] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif3] * self.Y2RL[0,mif2] * self.yl[mif1,mif4] * self.yu[2,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif3] * self.Y2RL[0,mif2] * self.yl[mif1,mif4] * self.yu[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif3] * self.Y2RL[0,mif2] * self.yl[mif1,mif4] * self.yu[2,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif3] * self.Y2RL[1,mif2] * self.yl[mif1,mif4] * self.yu[2,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif3] * self.Y2RL[1,mif2] * self.yl[mif1,mif4] * self.yu[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif3] * self.Y2RL[1,mif2] * self.yl[mif1,mif4] * self.yu[2,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif3] * self.Y2RL[2,mif2] * self.yl[mif1,mif4] * self.yu[2,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif3] * self.Y2RL[2,mif2] * self.yl[mif1,mif4] * self.yu[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif3] * self.Y2RL[2,mif2] * self.yl[mif1,mif4] * self.yu[2,2] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,mif3] * self.yubar[0,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,mif3] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif4] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,mif3] * self.yubar[0,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,mif3] * self.yubar[0,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,mif3] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif4] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,mif3] * self.yubar[0,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,mif3] * self.yubar[0,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,mif3] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif4] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,mif3] * self.yubar[0,2] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,mif3] * self.yubar[1,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,mif3] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif4] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,mif3] * self.yubar[1,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,mif3] * self.yubar[1,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,mif3] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif4] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,mif3] * self.yubar[1,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,mif3] * self.yubar[1,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,mif3] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif4] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,mif3] * self.yubar[1,2] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,mif3] * self.yubar[2,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,mif3] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif4] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,mif3] * self.yubar[2,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,mif3] * self.yubar[2,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,mif3] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif4] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,mif3] * self.yubar[2,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,mif3] * self.yubar[2,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,mif3] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif4] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,mif3] * self.yubar[2,2])

    def alphaOlq1(self, mif1,mif2,mif3,mif4):
        return (49/34560 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] + -7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] + -7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[mif3,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[mif3,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[mif3,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[mif3,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[mif3,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[mif3,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[mif3,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[mif3,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[mif3,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[mif3,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[mif3,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[mif3,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[mif3,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[mif3,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[mif3,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[mif3,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[mif3,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[mif3,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[mif3,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[mif3,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[mif3,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[mif3,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[mif3,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[mif3,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[mif3,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[mif3,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[mif3,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,0] * self.yubar[mif4,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,0] * self.yubar[mif4,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,0] * self.yubar[mif4,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,1] * self.yubar[mif4,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,1] * self.yubar[mif4,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,1] * self.yubar[mif4,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,2] * self.yubar[mif4,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,2] * self.yubar[mif4,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,2] * self.yubar[mif4,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,0] * self.yubar[mif4,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,0] * self.yubar[mif4,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,0] * self.yubar[mif4,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,1] * self.yubar[mif4,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,1] * self.yubar[mif4,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,1] * self.yubar[mif4,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,2] * self.yubar[mif4,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,2] * self.yubar[mif4,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,2] * self.yubar[mif4,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,0] * self.yubar[mif4,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,0] * self.yubar[mif4,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,0] * self.yubar[mif4,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,1] * self.yubar[mif4,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,1] * self.yubar[mif4,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,1] * self.yubar[mif4,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,2] * self.yubar[mif4,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,2] * self.yubar[mif4,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,2] * self.yubar[mif4,2])

    def alphaOlq3(self, mif1,mif2,mif3,mif4):
        return (-1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,0] * self.yl[mif1,0] * self.ylbar[mif2,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,1] * self.yl[mif1,1] * self.ylbar[mif2,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2LRbar[mif4,2] * self.yl[mif1,2] * self.ylbar[mif2,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[mif3,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[mif3,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,0] * self.Y2RL[0,mif2] * self.yl[mif1,0] * self.yu[mif3,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[mif3,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[mif3,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,1] * self.Y2RL[0,mif2] * self.yl[mif1,1] * self.yu[mif3,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[mif3,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[mif3,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,2] * self.Y2RL[0,mif2] * self.yl[mif1,2] * self.yu[mif3,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[mif3,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[mif3,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,0] * self.Y2RL[1,mif2] * self.yl[mif1,0] * self.yu[mif3,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[mif3,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[mif3,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,1] * self.Y2RL[1,mif2] * self.yl[mif1,1] * self.yu[mif3,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[mif3,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[mif3,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,2] * self.Y2RL[1,mif2] * self.yl[mif1,2] * self.yu[mif3,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[mif3,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[mif3,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,0] * self.Y2RL[2,mif2] * self.yl[mif1,0] * self.yu[mif3,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[mif3,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[mif3,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,1] * self.Y2RL[2,mif2] * self.yl[mif1,1] * self.yu[mif3,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[mif3,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif4,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[mif3,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif4,2] * self.Y2RL[2,mif2] * self.yl[mif1,2] * self.yu[mif3,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2RLbar[0,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,0] * self.yubar[mif4,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,0] * self.yubar[mif4,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,0] * self.yubar[mif4,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,1] * self.yubar[mif4,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,1] * self.yubar[mif4,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,1] * self.yubar[mif4,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,2] * self.yubar[mif4,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,2] * self.yubar[mif4,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,2] * self.yubar[mif4,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2RLbar[1,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,0] * self.yubar[mif4,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,0] * self.yubar[mif4,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,0] * self.yubar[mif4,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,1] * self.yubar[mif4,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,1] * self.yubar[mif4,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,1] * self.yubar[mif4,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,2] * self.yubar[mif4,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,2] * self.yubar[mif4,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,2] * self.yubar[mif4,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,0] * self.yubar[mif4,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,1] * self.yubar[mif4,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2RLbar[2,mif1] * self.ylbar[mif2,2] * self.yubar[mif4,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,0] * self.yubar[mif4,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,0] * self.yubar[mif4,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,0] * self.yubar[mif4,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,1] * self.yubar[mif4,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,1] * self.yubar[mif4,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,1] * self.yubar[mif4,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,2] * self.yubar[mif4,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,2] * self.yubar[mif4,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,2] * self.yubar[mif4,2])

    def alphaOeu(self, mif1,mif2,mif3,mif4):
        return (49/4320 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + -1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + -1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + 1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + -1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + -1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + 1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + -1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + -1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + 1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + -35/1728 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -35/1728 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -35/1728 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] * self.yl[0,mif2] * self.ylbar[0,mif1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] * self.yl[0,mif2] * self.ylbar[0,mif1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] * self.yl[0,mif2] * self.ylbar[0,mif1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,0] * self.yl[1,mif2] * self.ylbar[0,mif1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,0] * self.yl[1,mif2] * self.ylbar[0,mif1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,0] * self.yl[1,mif2] * self.ylbar[0,mif1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,0] * self.yl[2,mif2] * self.ylbar[0,mif1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,0] * self.yl[2,mif2] * self.ylbar[0,mif1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,0] * self.yl[2,mif2] * self.ylbar[0,mif1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,1] * self.yl[0,mif2] * self.ylbar[1,mif1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,1] * self.yl[0,mif2] * self.ylbar[1,mif1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,1] * self.yl[0,mif2] * self.ylbar[1,mif1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] * self.yl[1,mif2] * self.ylbar[1,mif1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] * self.yl[1,mif2] * self.ylbar[1,mif1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] * self.yl[1,mif2] * self.ylbar[1,mif1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,1] * self.yl[2,mif2] * self.ylbar[1,mif1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,1] * self.yl[2,mif2] * self.ylbar[1,mif1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,1] * self.yl[2,mif2] * self.ylbar[1,mif1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,2] * self.yl[0,mif2] * self.ylbar[2,mif1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,2] * self.yl[0,mif2] * self.ylbar[2,mif1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,2] * self.yl[0,mif2] * self.ylbar[2,mif1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,2] * self.yl[1,mif2] * self.ylbar[2,mif1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,2] * self.yl[1,mif2] * self.ylbar[2,mif1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,2] * self.yl[1,mif2] * self.ylbar[2,mif1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] * self.yl[2,mif2] * self.ylbar[2,mif1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] * self.yl[2,mif2] * self.ylbar[2,mif1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] * self.yl[2,mif2] * self.ylbar[2,mif1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,0] * self.yl[0,mif2] * self.yu[0,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,0] * self.yl[0,mif2] * self.yu[0,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,0] * self.yl[0,mif2] * self.yu[0,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,1] * self.yl[1,mif2] * self.yu[0,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,1] * self.yl[1,mif2] * self.yu[0,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,1] * self.yl[1,mif2] * self.yu[0,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,2] * self.yl[2,mif2] * self.yu[0,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,2] * self.yl[2,mif2] * self.yu[0,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif1] * self.Y2RL[mif3,2] * self.yl[2,mif2] * self.yu[0,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,0] * self.yl[0,mif2] * self.yu[1,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,0] * self.yl[0,mif2] * self.yu[1,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,0] * self.yl[0,mif2] * self.yu[1,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,1] * self.yl[1,mif2] * self.yu[1,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,1] * self.yl[1,mif2] * self.yu[1,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,1] * self.yl[1,mif2] * self.yu[1,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,2] * self.yl[2,mif2] * self.yu[1,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,2] * self.yl[2,mif2] * self.yu[1,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif1] * self.Y2RL[mif3,2] * self.yl[2,mif2] * self.yu[1,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,0] * self.yl[0,mif2] * self.yu[2,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,0] * self.yl[0,mif2] * self.yu[2,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,0] * self.yl[0,mif2] * self.yu[2,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,1] * self.yl[1,mif2] * self.yu[2,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,1] * self.yl[1,mif2] * self.yu[2,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,1] * self.yl[1,mif2] * self.yu[2,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,2] * self.yl[2,mif2] * self.yu[2,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,2] * self.yl[2,mif2] * self.yu[2,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif1] * self.Y2RL[mif3,2] * self.yl[2,mif2] * self.yu[2,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[mif4,0] * self.ylbar[0,mif1] * self.yubar[0,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[mif4,0] * self.ylbar[0,mif1] * self.yubar[0,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[mif4,0] * self.ylbar[0,mif1] * self.yubar[0,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[mif4,1] * self.ylbar[1,mif1] * self.yubar[0,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[mif4,1] * self.ylbar[1,mif1] * self.yubar[0,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[mif4,1] * self.ylbar[1,mif1] * self.yubar[0,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[mif4,2] * self.ylbar[2,mif1] * self.yubar[0,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[mif4,2] * self.ylbar[2,mif1] * self.yubar[0,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[mif4,2] * self.ylbar[2,mif1] * self.yubar[0,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,mif4] * self.yubar[0,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,mif4] * self.yubar[0,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,mif4] * self.yubar[0,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,mif4] * self.yubar[0,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,mif4] * self.yubar[0,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,mif4] * self.yubar[0,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,mif4] * self.yubar[0,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,mif4] * self.yubar[0,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,mif4] * self.yubar[0,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[mif4,0] * self.ylbar[0,mif1] * self.yubar[1,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[mif4,0] * self.ylbar[0,mif1] * self.yubar[1,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[mif4,0] * self.ylbar[0,mif1] * self.yubar[1,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[mif4,1] * self.ylbar[1,mif1] * self.yubar[1,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[mif4,1] * self.ylbar[1,mif1] * self.yubar[1,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[mif4,1] * self.ylbar[1,mif1] * self.yubar[1,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[mif4,2] * self.ylbar[2,mif1] * self.yubar[1,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[mif4,2] * self.ylbar[2,mif1] * self.yubar[1,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[mif4,2] * self.ylbar[2,mif1] * self.yubar[1,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,mif4] * self.yubar[1,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,mif4] * self.yubar[1,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,mif4] * self.yubar[1,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,mif4] * self.yubar[1,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,mif4] * self.yubar[1,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,mif4] * self.yubar[1,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,mif4] * self.yubar[1,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,mif4] * self.yubar[1,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,mif4] * self.yubar[1,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[mif4,0] * self.ylbar[0,mif1] * self.yubar[2,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[mif4,0] * self.ylbar[0,mif1] * self.yubar[2,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[mif4,0] * self.ylbar[0,mif1] * self.yubar[2,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[mif4,1] * self.ylbar[1,mif1] * self.yubar[2,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[mif4,1] * self.ylbar[1,mif1] * self.yubar[2,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[mif4,1] * self.ylbar[1,mif1] * self.yubar[2,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[mif4,2] * self.ylbar[2,mif1] * self.yubar[2,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[mif4,2] * self.ylbar[2,mif1] * self.yubar[2,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[mif4,2] * self.ylbar[2,mif1] * self.yubar[2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,mif4] * self.yubar[2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,mif4] * self.yubar[2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yu[0,mif4] * self.yubar[2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,mif4] * self.yubar[2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,mif4] * self.yubar[2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yu[1,mif4] * self.yubar[2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,mif4] * self.yubar[2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,mif4] * self.yubar[2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yu[2,mif4] * self.yubar[2,mif3])

    def alphaOed(self, mif1,mif2,mif3,mif4):
        return (-49/8640 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,mif4] * self.ydbar[0,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,mif4] * self.ydbar[0,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,mif4] * self.ydbar[0,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,mif4] * self.ydbar[0,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,mif4] * self.ydbar[0,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,mif4] * self.ydbar[0,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,mif4] * self.ydbar[0,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,mif4] * self.ydbar[0,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,mif4] * self.ydbar[0,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,mif4] * self.ydbar[1,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,mif4] * self.ydbar[1,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,mif4] * self.ydbar[1,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,mif4] * self.ydbar[1,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,mif4] * self.ydbar[1,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,mif4] * self.ydbar[1,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,mif4] * self.ydbar[1,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,mif4] * self.ydbar[1,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,mif4] * self.ydbar[1,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,mif4] * self.ydbar[2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,mif4] * self.ydbar[2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[0,mif1] * self.yd[0,mif4] * self.ydbar[2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,mif4] * self.ydbar[2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,mif4] * self.ydbar[2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[1,mif1] * self.yd[1,mif4] * self.ydbar[2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,mif4] * self.ydbar[2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,mif4] * self.ydbar[2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[2,mif1] * self.yd[2,mif4] * self.ydbar[2,mif3])

    def alphaOqe(self, mif1,mif2,mif3,mif4):
        return (49/17280 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + -1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + -1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + 1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif4] * self.Y2LRbar[0,mif3] + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + -1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + -1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + 1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif4] * self.Y2LRbar[1,mif3] + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + -1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + -1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + 1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif4] * self.Y2LRbar[2,mif3] + -7/432 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,0] * self.Y2LRbar[mif2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,0] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LR[mif1,mif4] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,0] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LR[mif1,mif4] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,0] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,0] * self.Y2LR[mif1,mif4] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,0] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LR[mif1,mif4] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,0] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LR[mif1,mif4] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,0] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,0] * self.Y2LR[mif1,mif4] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,0] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LR[mif1,mif4] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,0] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LR[mif1,mif4] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,0] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,0] * self.Y2LR[mif1,mif4] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,0] + -7/432 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,1] * self.Y2LRbar[mif2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,1] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LR[mif1,mif4] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,1] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LR[mif1,mif4] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,1] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,1] * self.Y2LR[mif1,mif4] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,1] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LR[mif1,mif4] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,1] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LR[mif1,mif4] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,1] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,1] * self.Y2LR[mif1,mif4] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,1] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LR[mif1,mif4] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,1] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LR[mif1,mif4] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,1] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,1] * self.Y2LR[mif1,mif4] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,1] + -7/432 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,2] * self.Y2LRbar[mif2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,2] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LR[mif1,mif4] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,2] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LR[mif1,mif4] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,2] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,2] * self.Y2LR[mif1,mif4] * self.Y2LRbar[0,mif3] * self.Y2LRbar[mif2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,2] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LR[mif1,mif4] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,2] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LR[mif1,mif4] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,2] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,2] * self.Y2LR[mif1,mif4] * self.Y2LRbar[1,mif3] * self.Y2LRbar[mif2,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,2] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LR[mif1,mif4] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,2] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LR[mif1,mif4] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,2] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,2] * self.Y2LR[mif1,mif4] * self.Y2LRbar[2,mif3] * self.Y2LRbar[mif2,2] + -1/2 * (self.MR2)**(-2) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + -25/2304 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + -25/768 * self.aEV * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + -3/256 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + -9/256 * self.aEV * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + -1/48 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + -1/16 * self.aEV * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + -25/1152 * self.aEV * self.epsilonbar * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + -3/128 * self.aEV * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + -1/24 * self.aEV * self.epsilonbar * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + 25/1152 * self.aEV * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + 3/128 * self.aEV * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + 1/24 * self.aEV * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif1,mif4] * self.Y2LRbar[mif2,mif3] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.Y2LRbar[mif2,mif3] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.Y2LRbar[mif2,mif3] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[0,0] * self.Y2LRbar[mif2,mif3] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.Y2LRbar[mif2,mif3] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.Y2LRbar[mif2,mif3] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[0,1] * self.Y2LRbar[mif2,mif3] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.Y2LRbar[mif2,mif3] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.Y2LRbar[mif2,mif3] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[0,2] * self.Y2LRbar[mif2,mif3] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.Y2LRbar[mif2,mif3] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.Y2LRbar[mif2,mif3] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[1,0] * self.Y2LRbar[mif2,mif3] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.Y2LRbar[mif2,mif3] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.Y2LRbar[mif2,mif3] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[1,1] * self.Y2LRbar[mif2,mif3] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.Y2LRbar[mif2,mif3] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.Y2LRbar[mif2,mif3] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[1,2] * self.Y2LRbar[mif2,mif3] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.Y2LRbar[mif2,mif3] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.Y2LRbar[mif2,mif3] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif4] * self.Y2LR[mif1,0] * self.Y2LRbar[2,0] * self.Y2LRbar[mif2,mif3] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.Y2LRbar[mif2,mif3] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.Y2LRbar[mif2,mif3] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif4] * self.Y2LR[mif1,1] * self.Y2LRbar[2,1] * self.Y2LRbar[mif2,mif3] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.Y2LRbar[mif2,mif3] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.Y2LRbar[mif2,mif3] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif4] * self.Y2LR[mif1,2] * self.Y2LRbar[2,2] * self.Y2LRbar[mif2,mif3])

    def alphaOlu(self, mif1,mif2,mif3,mif4):
        return (49/8640 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/36 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/36 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/36 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,0] * self.Y2RLbar[mif4,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,0] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RL[mif3,mif2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,0] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RL[mif3,mif2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,0] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,0] * self.Y2RL[mif3,mif2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,0] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RL[mif3,mif2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,0] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RL[mif3,mif2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,0] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,0] * self.Y2RL[mif3,mif2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,0] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RL[mif3,mif2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,0] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RL[mif3,mif2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,0] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,0] * self.Y2RL[mif3,mif2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,0] + -35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,1] * self.Y2RLbar[mif4,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RL[mif3,mif2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RL[mif3,mif2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,1] * self.Y2RL[mif3,mif2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RL[mif3,mif2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RL[mif3,mif2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,1] * self.Y2RL[mif3,mif2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RL[mif3,mif2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RL[mif3,mif2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,1] * self.Y2RL[mif3,mif2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,1] + -35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,2] * self.Y2RLbar[mif4,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RL[mif3,mif2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RL[mif3,mif2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,2] * self.Y2RL[mif3,mif2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RL[mif3,mif2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RL[mif3,mif2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,2] * self.Y2RL[mif3,mif2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RL[mif3,mif2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RL[mif3,mif2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,2] * self.Y2RL[mif3,mif2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,2] + -1/2 * (self.MR2)**(-2) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/2304 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/768 * self.aEV * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -3/256 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -9/256 * self.aEV * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/48 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/16 * self.aEV * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/1152 * self.aEV * self.epsilonbar * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -3/128 * self.aEV * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/24 * self.aEV * self.epsilonbar * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 1/1152 * self.aEV * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 3/128 * self.aEV * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 1/24 * self.aEV * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[0,0] * self.Y2RLbar[mif4,mif1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[0,0] * self.Y2RLbar[mif4,mif1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[0,0] * self.Y2RLbar[mif4,mif1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[0,1] * self.Y2RLbar[mif4,mif1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[0,1] * self.Y2RLbar[mif4,mif1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[0,1] * self.Y2RLbar[mif4,mif1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[0,2] * self.Y2RLbar[mif4,mif1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[0,2] * self.Y2RLbar[mif4,mif1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[0,2] * self.Y2RLbar[mif4,mif1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[1,0] * self.Y2RLbar[mif4,mif1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[1,0] * self.Y2RLbar[mif4,mif1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[1,0] * self.Y2RLbar[mif4,mif1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[1,1] * self.Y2RLbar[mif4,mif1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[1,1] * self.Y2RLbar[mif4,mif1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[1,1] * self.Y2RLbar[mif4,mif1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[1,2] * self.Y2RLbar[mif4,mif1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[1,2] * self.Y2RLbar[mif4,mif1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[1,2] * self.Y2RLbar[mif4,mif1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[2,0] * self.Y2RLbar[mif4,mif1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[2,0] * self.Y2RLbar[mif4,mif1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RL[mif3,0] * self.Y2RLbar[2,0] * self.Y2RLbar[mif4,mif1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[2,1] * self.Y2RLbar[mif4,mif1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[2,1] * self.Y2RLbar[mif4,mif1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RL[mif3,1] * self.Y2RLbar[2,1] * self.Y2RLbar[mif4,mif1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[2,2] * self.Y2RLbar[mif4,mif1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[2,2] * self.Y2RLbar[mif4,mif1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RL[mif3,2] * self.Y2RLbar[2,2] * self.Y2RLbar[mif4,mif1])

    def alphaOld(self, mif1,mif2,mif3,mif4):
        return (-49/17280 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif2] * self.Y2RLbar[0,mif1] + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif2] * self.Y2RLbar[1,mif1] + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif2] * self.Y2RLbar[2,mif1])

    def alphaOledq(self, mif1,mif2,mif3,mif4):
        return (3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[mif4,0] * self.ydbar[0,mif3] * self.yl[mif1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[mif4,0] * self.ydbar[0,mif3] * self.yl[mif1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[mif4,0] * self.ydbar[0,mif3] * self.yl[mif1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[mif4,0] * self.ydbar[1,mif3] * self.yl[mif1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[mif4,0] * self.ydbar[1,mif3] * self.yl[mif1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[mif4,0] * self.ydbar[1,mif3] * self.yl[mif1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[mif4,0] * self.ydbar[2,mif3] * self.yl[mif1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[mif4,0] * self.ydbar[2,mif3] * self.yl[mif1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[mif4,0] * self.ydbar[2,mif3] * self.yl[mif1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[mif4,1] * self.ydbar[0,mif3] * self.yl[mif1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[mif4,1] * self.ydbar[0,mif3] * self.yl[mif1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[mif4,1] * self.ydbar[0,mif3] * self.yl[mif1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[mif4,1] * self.ydbar[1,mif3] * self.yl[mif1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[mif4,1] * self.ydbar[1,mif3] * self.yl[mif1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[mif4,1] * self.ydbar[1,mif3] * self.yl[mif1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[mif4,1] * self.ydbar[2,mif3] * self.yl[mif1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[mif4,1] * self.ydbar[2,mif3] * self.yl[mif1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[mif4,1] * self.ydbar[2,mif3] * self.yl[mif1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[mif4,2] * self.ydbar[0,mif3] * self.yl[mif1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LRbar[mif4,2] * self.ydbar[0,mif3] * self.yl[mif1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LRbar[mif4,2] * self.ydbar[0,mif3] * self.yl[mif1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[mif4,2] * self.ydbar[1,mif3] * self.yl[mif1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LRbar[mif4,2] * self.ydbar[1,mif3] * self.yl[mif1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LRbar[mif4,2] * self.ydbar[1,mif3] * self.yl[mif1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[mif4,2] * self.ydbar[2,mif3] * self.yl[mif1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LRbar[mif4,2] * self.ydbar[2,mif3] * self.yl[mif1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LRbar[mif4,2] * self.ydbar[2,mif3] * self.yl[mif1,2] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[mif4,mif3] * self.yubar[0,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[mif4,mif3] * self.yubar[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[mif4,mif3] * self.yubar[0,0] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[mif4,mif3] * self.yubar[0,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[mif4,mif3] * self.yubar[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[mif4,mif3] * self.yubar[0,1] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[mif4,mif3] * self.yubar[0,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[mif4,mif3] * self.yubar[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[mif4,mif3] * self.yubar[0,2] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[mif4,mif3] * self.yubar[1,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[mif4,mif3] * self.yubar[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[mif4,mif3] * self.yubar[1,0] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[mif4,mif3] * self.yubar[1,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[mif4,mif3] * self.yubar[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[mif4,mif3] * self.yubar[1,1] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[mif4,mif3] * self.yubar[1,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[mif4,mif3] * self.yubar[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[mif4,mif3] * self.yubar[1,2] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[mif4,mif3] * self.yubar[2,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[mif4,mif3] * self.yubar[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[mif4,mif3] * self.yubar[2,0] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[mif4,mif3] * self.yubar[2,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[mif4,mif3] * self.yubar[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[mif4,mif3] * self.yubar[2,1] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[mif4,mif3] * self.yubar[2,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[mif4,mif3] * self.yubar[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[mif4,mif3] * self.yubar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[0,mif3] * self.yubar[mif4,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[0,mif3] * self.yubar[mif4,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[0,mif3] * self.yubar[mif4,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[1,mif3] * self.yubar[mif4,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[1,mif3] * self.yubar[mif4,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[1,mif3] * self.yubar[mif4,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[2,mif3] * self.yubar[mif4,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[2,mif3] * self.yubar[mif4,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.ydbar[2,mif3] * self.yubar[mif4,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[0,mif3] * self.yubar[mif4,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[0,mif3] * self.yubar[mif4,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[0,mif3] * self.yubar[mif4,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[1,mif3] * self.yubar[mif4,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[1,mif3] * self.yubar[mif4,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[1,mif3] * self.yubar[mif4,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[2,mif3] * self.yubar[mif4,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[2,mif3] * self.yubar[mif4,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.ydbar[2,mif3] * self.yubar[mif4,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[0,mif3] * self.yubar[mif4,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[0,mif3] * self.yubar[mif4,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[0,mif3] * self.yubar[mif4,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[1,mif3] * self.yubar[mif4,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[1,mif3] * self.yubar[mif4,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[1,mif3] * self.yubar[mif4,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[2,mif3] * self.yubar[mif4,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[2,mif3] * self.yubar[mif4,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.ydbar[2,mif3] * self.yubar[mif4,2])

    def alphaOlequ1(self, mif1,mif2,mif3,mif4):
        return (-5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,0] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,0] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,0] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,0] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,0] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,0] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,0] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,0] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,0] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,1] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,1] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,1] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,1] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,1] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,1] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,1] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,1] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,1] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,2] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,2] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,2] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,2] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,2] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,2] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,2] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,2] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,2] + 1/2 * (self.MR2)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 5/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -5/768 * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 3/32 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -9/256 * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/6 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 1/16 * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 5/384 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -5/1152 * self.epsilonbar * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 9/128 * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -3/128 * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/8 * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 1/24 * self.epsilonbar * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -5/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 5/1152 * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -9/128 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 3/128 * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 1/8 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/24 * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[0,0] * self.Y2RLbar[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[0,0] * self.Y2RLbar[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[0,0] * self.Y2RLbar[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[0,1] * self.Y2RLbar[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[0,1] * self.Y2RLbar[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[0,1] * self.Y2RLbar[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[0,2] * self.Y2RLbar[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[0,2] * self.Y2RLbar[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[0,2] * self.Y2RLbar[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[1,0] * self.Y2RLbar[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[1,0] * self.Y2RLbar[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[1,0] * self.Y2RLbar[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[1,1] * self.Y2RLbar[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[1,1] * self.Y2RLbar[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[1,1] * self.Y2RLbar[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[1,2] * self.Y2RLbar[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[1,2] * self.Y2RLbar[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[1,2] * self.Y2RLbar[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[2,0] * self.Y2RLbar[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[2,0] * self.Y2RLbar[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[2,0] * self.Y2RLbar[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[2,1] * self.Y2RLbar[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[2,1] * self.Y2RLbar[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[2,1] * self.Y2RLbar[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[2,2] * self.Y2RLbar[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[2,2] * self.Y2RLbar[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[2,2] * self.Y2RLbar[mif4,mif1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[mif4,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[mif4,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2RLbar[mif4,0] * self.yl[mif1,mif2] * self.ylbar[0,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[mif4,0] * self.yl[mif1,mif2] * self.ylbar[0,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[mif4,0] * self.yl[mif1,mif2] * self.ylbar[0,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2RLbar[mif4,0] * self.yl[mif1,mif2] * self.ylbar[0,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[mif4,0] * self.yl[mif1,mif2] * self.ylbar[0,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[mif4,0] * self.yl[mif1,mif2] * self.ylbar[0,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2RLbar[mif4,0] * self.yl[mif1,mif2] * self.ylbar[0,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[mif4,1] * self.yl[mif1,mif2] * self.ylbar[1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[mif4,1] * self.yl[mif1,mif2] * self.ylbar[1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2RLbar[mif4,1] * self.yl[mif1,mif2] * self.ylbar[1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[mif4,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[mif4,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2RLbar[mif4,1] * self.yl[mif1,mif2] * self.ylbar[1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[mif4,1] * self.yl[mif1,mif2] * self.ylbar[1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[mif4,1] * self.yl[mif1,mif2] * self.ylbar[1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2RLbar[mif4,1] * self.yl[mif1,mif2] * self.ylbar[1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[mif4,2] * self.yl[mif1,mif2] * self.ylbar[2,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,0] * self.Y2RLbar[mif4,2] * self.yl[mif1,mif2] * self.ylbar[2,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,0] * self.Y2RLbar[mif4,2] * self.yl[mif1,mif2] * self.ylbar[2,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[mif4,2] * self.yl[mif1,mif2] * self.ylbar[2,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,1] * self.Y2RLbar[mif4,2] * self.yl[mif1,mif2] * self.ylbar[2,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,1] * self.Y2RLbar[mif4,2] * self.yl[mif1,mif2] * self.ylbar[2,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[mif4,2] * self.yl[mif1,mif2] * self.ylbar[2,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,2] * self.Y2RLbar[mif4,2] * self.yl[mif1,mif2] * self.ylbar[2,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,2] * self.Y2RLbar[mif4,2] * self.yl[mif1,mif2] * self.ylbar[2,2] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,mif4] * self.yubar[0,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,mif4] * self.yubar[0,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,mif4] * self.yubar[0,0] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,mif4] * self.yubar[0,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,mif4] * self.yubar[0,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,mif4] * self.yubar[0,1] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,mif4] * self.yubar[0,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,mif4] * self.yubar[0,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,mif4] * self.yubar[0,2] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,mif4] * self.yubar[1,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,mif4] * self.yubar[1,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,mif4] * self.yubar[1,0] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,mif4] * self.yubar[1,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,mif4] * self.yubar[1,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,mif4] * self.yubar[1,1] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,mif4] * self.yubar[1,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,mif4] * self.yubar[1,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,mif4] * self.yubar[1,2] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,mif4] * self.yubar[2,0] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,mif4] * self.yubar[2,0] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[0,mif1] * self.yu[mif3,mif4] * self.yubar[2,0] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,mif4] * self.yubar[2,1] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,mif4] * self.yubar[2,1] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[1,mif1] * self.yu[mif3,mif4] * self.yubar[2,1] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,mif4] * self.yubar[2,2] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,mif4] * self.yubar[2,2] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2RLbar[2,mif1] * self.yu[mif3,mif4] * self.yubar[2,2])

    def alphaOlequ3(self, mif1,mif2,mif3,mif4):
        return (-5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,0] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,0] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[0,0] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,0] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,0] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,0] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[1,0] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,0] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,0] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,0] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[2,0] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,0] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,1] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,1] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[0,1] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,1] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,1] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,1] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[1,1] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,1] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,1] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,1] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[2,1] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,1] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,2] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,2] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[0,2] * self.Y2RLbar[0,mif1] * self.Y2RLbar[mif4,2] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,2] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,2] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[1,2] * self.Y2RLbar[1,mif1] * self.Y2RLbar[mif4,2] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,2] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,2] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RL[2,2] * self.Y2RLbar[2,mif1] * self.Y2RLbar[mif4,2] + 1/8 * (self.MR2)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -5/2304 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 5/6144 * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -3/256 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 9/2048 * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 1/48 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/128 * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -5/4608 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 5/9216 * self.epsilonbar * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -3/512 * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 3/1024 * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 1/96 * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/192 * self.epsilonbar * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 5/4608 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -5/9216 * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 3/512 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -3/1024 * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -1/96 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + 1/192 * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif3,mif2] * self.Y2RLbar[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[0,0] * self.Y2RLbar[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[0,0] * self.Y2RLbar[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[0,0] * self.Y2RLbar[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[0,1] * self.Y2RLbar[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[0,1] * self.Y2RLbar[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[0,1] * self.Y2RLbar[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[0,2] * self.Y2RLbar[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[0,2] * self.Y2RLbar[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[0,2] * self.Y2RLbar[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[1,0] * self.Y2RLbar[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[1,0] * self.Y2RLbar[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[1,0] * self.Y2RLbar[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[1,1] * self.Y2RLbar[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[1,1] * self.Y2RLbar[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[1,1] * self.Y2RLbar[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[1,2] * self.Y2RLbar[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[1,2] * self.Y2RLbar[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[1,2] * self.Y2RLbar[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[2,0] * self.Y2RLbar[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[2,0] * self.Y2RLbar[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LR[mif3,0] * self.Y2LRbar[2,0] * self.Y2RLbar[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[2,1] * self.Y2RLbar[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[2,1] * self.Y2RLbar[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LR[mif3,1] * self.Y2LRbar[2,1] * self.Y2RLbar[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[2,2] * self.Y2RLbar[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[2,2] * self.Y2RLbar[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif2] * self.Y2LR[mif3,2] * self.Y2LRbar[2,2] * self.Y2RLbar[mif4,mif1])

    def alphaOqq1bar(self, mif1,mif2,mif3,mif4):
        return (-1/3840 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -49/207360 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/5760 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif4,0] * self.Y2LRbar[mif1,0] + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif4,1] * self.Y2LRbar[mif1,1] + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif4,2] * self.Y2LRbar[mif1,2] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif3,0] + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LR[mif4,0] * self.Y2LRbar[mif1,0] * self.Y2LRbar[mif3,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LR[mif4,1] * self.Y2LRbar[mif1,1] * self.Y2LRbar[mif3,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LR[mif4,2] * self.Y2LRbar[mif1,2] * self.Y2LRbar[mif3,0] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif3,1] + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LR[mif4,0] * self.Y2LRbar[mif1,0] * self.Y2LRbar[mif3,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LR[mif4,1] * self.Y2LRbar[mif1,1] * self.Y2LRbar[mif3,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LR[mif4,2] * self.Y2LRbar[mif1,2] * self.Y2LRbar[mif3,1] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif3,2] + 7/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] + -1/3456 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] + 1/768 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] + 1/576 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] + -1/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LR[mif4,0] * self.Y2LRbar[mif1,0] * self.Y2LRbar[mif3,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LR[mif4,1] * self.Y2LRbar[mif1,1] * self.Y2LRbar[mif3,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LR[mif4,2] * self.Y2LRbar[mif1,2] * self.Y2LRbar[mif3,2])

    def alphaOqq3bar(self, mif1,mif2,mif3,mif4):
        return (-1/3840 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -1/2560 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif4,0] * self.Y2LRbar[mif1,0] + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif4,1] * self.Y2LRbar[mif1,1] + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2LR[mif4,2] * self.Y2LRbar[mif1,2] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif3,0] + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif3,1] + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] + 1/2304 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif3,2] + 1/2304 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2])

    def alphaOuubar(self, mif1,mif2,mif3,mif4):
        return (-1/1920 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -49/12960 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/5760 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[mif4,0] * self.Y2RLbar[mif1,0] + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[mif4,1] * self.Y2RLbar[mif1,1] + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[mif4,2] * self.Y2RLbar[mif1,2] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[mif2,0] * self.Y2RLbar[mif3,0] + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RL[mif4,0] * self.Y2RLbar[mif1,0] * self.Y2RLbar[mif3,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RL[mif4,1] * self.Y2RLbar[mif1,1] * self.Y2RLbar[mif3,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,0] * self.Y2RL[mif4,2] * self.Y2RLbar[mif1,2] * self.Y2RLbar[mif3,0] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[mif2,1] * self.Y2RLbar[mif3,1] + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RL[mif4,0] * self.Y2RLbar[mif1,0] * self.Y2RLbar[mif3,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RL[mif4,1] * self.Y2RLbar[mif1,1] * self.Y2RLbar[mif3,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,1] * self.Y2RL[mif4,2] * self.Y2RLbar[mif1,2] * self.Y2RLbar[mif3,1] + 1/576 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[mif2,2] * self.Y2RLbar[mif3,2] + 35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/1728 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RL[mif4,0] * self.Y2RLbar[mif1,0] * self.Y2RLbar[mif3,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RL[mif4,1] * self.Y2RLbar[mif1,1] * self.Y2RLbar[mif3,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif2,2] * self.Y2RL[mif4,2] * self.Y2RLbar[mif1,2] * self.Y2RLbar[mif3,2])

    def alphaOddbar(self, mif1,mif2,mif3,mif4):
        return (-1/1920 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -49/51840 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/5760 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4))

    def alphaOud1bar(self, mif1,mif2,mif3,mif4):
        return (49/12960 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + -35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + -35/5184 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2])

    def alphaOud8bar(self, mif1,mif2,mif3,mif4):
        return (-1/480 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,0] * self.Y2RLbar[mif1,0] + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,1] * self.Y2RLbar[mif1,1] + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[mif2,2] * self.Y2RLbar[mif1,2])

    def alphaOqu1bar(self, mif1,mif2,mif3,mif4):
        return (-49/25920 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/648 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 7/648 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 7/648 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 35/10368 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 35/10368 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 35/10368 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,0] * self.yl[0,0] * self.yu[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,0] * self.yl[0,0] * self.yu[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,0] * self.yl[0,0] * self.yu[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,0] * self.yl[0,1] * self.yu[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,0] * self.yl[0,1] * self.yu[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,0] * self.yl[0,1] * self.yu[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,0] * self.yl[0,2] * self.yu[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,0] * self.yl[0,2] * self.yu[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,0] * self.yl[0,2] * self.yu[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,1] * self.yl[1,0] * self.yu[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,1] * self.yl[1,0] * self.yu[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,1] * self.yl[1,0] * self.yu[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,1] * self.yl[1,1] * self.yu[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,1] * self.yl[1,1] * self.yu[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,1] * self.yl[1,1] * self.yu[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,1] * self.yl[1,2] * self.yu[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,1] * self.yl[1,2] * self.yu[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,1] * self.yl[1,2] * self.yu[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,2] * self.yl[2,0] * self.yu[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,2] * self.yl[2,0] * self.yu[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,2] * self.yl[2,0] * self.yu[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,2] * self.yl[2,1] * self.yu[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,2] * self.yl[2,1] * self.yu[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,2] * self.yl[2,1] * self.yu[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,2] * self.yl[2,2] * self.yu[mif2,mif3] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,2] * self.yl[2,2] * self.yu[mif2,mif3] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,2] * self.yl[2,2] * self.yu[mif2,mif3] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,0] * self.ylbar[0,0] * self.yubar[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,0] * self.ylbar[0,0] * self.yubar[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,0] * self.ylbar[0,0] * self.yubar[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,0] * self.ylbar[0,1] * self.yubar[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,0] * self.ylbar[0,1] * self.yubar[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,0] * self.ylbar[0,1] * self.yubar[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,0] * self.ylbar[0,2] * self.yubar[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,0] * self.ylbar[0,2] * self.yubar[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,0] * self.ylbar[0,2] * self.yubar[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,1] * self.ylbar[1,0] * self.yubar[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,1] * self.ylbar[1,0] * self.yubar[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,1] * self.ylbar[1,0] * self.yubar[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,1] * self.ylbar[1,1] * self.yubar[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,1] * self.ylbar[1,1] * self.yubar[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,1] * self.ylbar[1,1] * self.yubar[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,1] * self.ylbar[1,2] * self.yubar[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,1] * self.ylbar[1,2] * self.yubar[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,1] * self.ylbar[1,2] * self.yubar[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,2] * self.ylbar[2,0] * self.yubar[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,2] * self.ylbar[2,0] * self.yubar[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,2] * self.ylbar[2,0] * self.yubar[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,2] * self.ylbar[2,1] * self.yubar[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,2] * self.ylbar[2,1] * self.yubar[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,2] * self.ylbar[2,1] * self.yubar[mif1,mif4] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,2] * self.ylbar[2,2] * self.yubar[mif1,mif4] + 1/192 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,2] * self.ylbar[2,2] * self.yubar[mif1,mif4] + -1/192 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,2] * self.ylbar[2,2] * self.yubar[mif1,mif4])

    def alphaOqu8bar(self, mif1,mif2,mif3,mif4):
        return (-1/480 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 1/144 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,0] * self.yl[0,0] * self.yu[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,0] * self.yl[0,0] * self.yu[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,0] * self.yl[0,0] * self.yu[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,0] * self.yl[0,1] * self.yu[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,0] * self.yl[0,1] * self.yu[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,0] * self.yl[0,1] * self.yu[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,0] * self.yl[0,2] * self.yu[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,0] * self.yl[0,2] * self.yu[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,0] * self.yl[0,2] * self.yu[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,1] * self.yl[1,0] * self.yu[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,1] * self.yl[1,0] * self.yu[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,1] * self.yl[1,0] * self.yu[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,1] * self.yl[1,1] * self.yu[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,1] * self.yl[1,1] * self.yu[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,1] * self.yl[1,1] * self.yu[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,1] * self.yl[1,2] * self.yu[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,1] * self.yl[1,2] * self.yu[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,1] * self.yl[1,2] * self.yu[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,2] * self.yl[2,0] * self.yu[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,2] * self.yl[2,0] * self.yu[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif4,2] * self.yl[2,0] * self.yu[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,2] * self.yl[2,1] * self.yu[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,2] * self.yl[2,1] * self.yu[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif4,2] * self.yl[2,1] * self.yu[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,2] * self.yl[2,2] * self.yu[mif2,mif3] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,2] * self.yl[2,2] * self.yu[mif2,mif3] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif4,2] * self.yl[2,2] * self.yu[mif2,mif3] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,0] * self.ylbar[0,0] * self.yubar[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,0] * self.ylbar[0,0] * self.yubar[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,0] * self.ylbar[0,0] * self.yubar[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,0] * self.ylbar[0,1] * self.yubar[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,0] * self.ylbar[0,1] * self.yubar[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,0] * self.ylbar[0,1] * self.yubar[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,0] * self.ylbar[0,2] * self.yubar[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,0] * self.ylbar[0,2] * self.yubar[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,0] * self.ylbar[0,2] * self.yubar[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,1] * self.ylbar[1,0] * self.yubar[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,1] * self.ylbar[1,0] * self.yubar[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,1] * self.ylbar[1,0] * self.yubar[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,1] * self.ylbar[1,1] * self.yubar[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,1] * self.ylbar[1,1] * self.yubar[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,1] * self.ylbar[1,1] * self.yubar[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,1] * self.ylbar[1,2] * self.yubar[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,1] * self.ylbar[1,2] * self.yubar[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,1] * self.ylbar[1,2] * self.yubar[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,2] * self.ylbar[2,0] * self.yubar[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,2] * self.ylbar[2,0] * self.yubar[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2RLbar[mif3,2] * self.ylbar[2,0] * self.yubar[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,2] * self.ylbar[2,1] * self.yubar[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,2] * self.ylbar[2,1] * self.yubar[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2RLbar[mif3,2] * self.ylbar[2,1] * self.yubar[mif1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,2] * self.ylbar[2,2] * self.yubar[mif1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,2] * self.ylbar[2,2] * self.yubar[mif1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2RLbar[mif3,2] * self.ylbar[2,2] * self.yubar[mif1,mif4])

    def alphaOqd1bar(self, mif1,mif2,mif3,mif4):
        return (49/51840 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -7/1296 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + -7/1296 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + -7/1296 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2])

    def alphaOqd8bar(self, mif1,mif2,mif3,mif4):
        return (-1/480 * (self.g3)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/288 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2])

    def alphaOquqd1bar(self, mif1,mif2,mif3,mif4):
        return (-3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.ydbar[mif3,mif4] * self.yl[0,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.ydbar[mif3,mif4] * self.yl[0,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,0] * self.ydbar[mif3,mif4] * self.yl[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.ydbar[mif3,mif4] * self.yl[0,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.ydbar[mif3,mif4] * self.yl[0,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,0] * self.ydbar[mif3,mif4] * self.yl[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.ydbar[mif3,mif4] * self.yl[0,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.ydbar[mif3,mif4] * self.yl[0,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,0] * self.ydbar[mif3,mif4] * self.yl[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.ydbar[mif3,mif4] * self.yl[1,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.ydbar[mif3,mif4] * self.yl[1,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,1] * self.ydbar[mif3,mif4] * self.yl[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.ydbar[mif3,mif4] * self.yl[1,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.ydbar[mif3,mif4] * self.yl[1,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,1] * self.ydbar[mif3,mif4] * self.yl[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.ydbar[mif3,mif4] * self.yl[1,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.ydbar[mif3,mif4] * self.yl[1,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,1] * self.ydbar[mif3,mif4] * self.yl[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.ydbar[mif3,mif4] * self.yl[2,0] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.ydbar[mif3,mif4] * self.yl[2,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,0] * self.Y2RL[mif2,2] * self.ydbar[mif3,mif4] * self.yl[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.ydbar[mif3,mif4] * self.yl[2,1] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.ydbar[mif3,mif4] * self.yl[2,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,1] * self.Y2RL[mif2,2] * self.ydbar[mif3,mif4] * self.yl[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.ydbar[mif3,mif4] * self.yl[2,2] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.ydbar[mif3,mif4] * self.yl[2,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif1,2] * self.Y2RL[mif2,2] * self.ydbar[mif3,mif4] * self.yl[2,2])

    def alphaOquqd8bar(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOllbar(self, mif1,mif2,mif3,mif4):
        return (-1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -49/23040 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/2560 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[0,mif3] * self.Y2RLbar[0,mif2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif4] + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[0,mif3] * self.Y2RLbar[0,mif4] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[0,mif3] * self.Y2RLbar[0,mif4] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[0,mif3] * self.Y2RLbar[0,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[0,mif3] * self.Y2RLbar[0,mif4] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif3] * self.Y2RLbar[0,mif4] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[0,mif3] * self.Y2RLbar[0,mif2] * self.Y2RLbar[0,mif4] + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[1,mif3] * self.Y2RLbar[1,mif2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[1,mif3] * self.Y2RLbar[0,mif4] * self.Y2RLbar[1,mif2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif4] + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[1,mif3] * self.Y2RLbar[1,mif4] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[1,mif3] * self.Y2RLbar[1,mif4] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[1,mif3] * self.Y2RLbar[1,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[1,mif3] * self.Y2RLbar[1,mif4] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif3] * self.Y2RLbar[1,mif4] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif3] * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[1,mif4] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RL[1,mif3] * self.Y2RLbar[1,mif2] * self.Y2RLbar[1,mif4] + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.Y2RL[2,mif3] * self.Y2RLbar[2,mif2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[2,mif3] * self.Y2RLbar[0,mif4] * self.Y2RLbar[2,mif2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RL[2,mif3] * self.Y2RLbar[1,mif4] * self.Y2RLbar[2,mif2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif4] + 7/768 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[2,mif3] * self.Y2RLbar[2,mif4] + -1/768 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[2,mif3] * self.Y2RLbar[2,mif4] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[2,mif3] * self.Y2RLbar[2,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[2,mif3] * self.Y2RLbar[2,mif4] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif3] * self.Y2RLbar[2,mif4] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif3] * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[2,mif4] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif3] * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.Y2RLbar[2,mif4] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RL[2,mif3] * self.Y2RLbar[2,mif2] * self.Y2RLbar[2,mif4])

    def alphaOeebar(self, mif1,mif2,mif3,mif4):
        return (-49/5760 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif2] * self.Y2LRbar[0,mif4] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif4] * self.Y2LRbar[1,mif2] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LR[1,mif3] * self.Y2LRbar[0,mif2] * self.Y2LRbar[1,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif2] * self.Y2LRbar[1,mif4] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif4] * self.Y2LRbar[2,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif4] * self.Y2LRbar[2,mif2] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LR[2,mif3] * self.Y2LRbar[0,mif2] * self.Y2LRbar[2,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LR[2,mif3] * self.Y2LRbar[1,mif2] * self.Y2LRbar[2,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif2] * self.Y2LRbar[2,mif4])

    def alphaOlebar(self, mif1,mif2,mif3,mif4):
        return (-49/5760 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + 7/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + 1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + 1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + -1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + 7/192 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/32 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/24 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 7/192 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/32 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/24 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 7/192 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/32 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/24 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/24 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif4] * self.Y2RL[0,mif1] * self.yl[mif2,mif3] * self.yu[0,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif4] * self.Y2RL[0,mif1] * self.yl[mif2,mif3] * self.yu[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif4] * self.Y2RL[0,mif1] * self.yl[mif2,mif3] * self.yu[0,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif4] * self.Y2RL[1,mif1] * self.yl[mif2,mif3] * self.yu[0,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif4] * self.Y2RL[1,mif1] * self.yl[mif2,mif3] * self.yu[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif4] * self.Y2RL[1,mif1] * self.yl[mif2,mif3] * self.yu[0,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif4] * self.Y2RL[2,mif1] * self.yl[mif2,mif3] * self.yu[0,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif4] * self.Y2RL[2,mif1] * self.yl[mif2,mif3] * self.yu[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif4] * self.Y2RL[2,mif1] * self.yl[mif2,mif3] * self.yu[0,2] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif4] * self.Y2RL[0,mif1] * self.yl[mif2,mif3] * self.yu[1,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif4] * self.Y2RL[0,mif1] * self.yl[mif2,mif3] * self.yu[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif4] * self.Y2RL[0,mif1] * self.yl[mif2,mif3] * self.yu[1,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif4] * self.Y2RL[1,mif1] * self.yl[mif2,mif3] * self.yu[1,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif4] * self.Y2RL[1,mif1] * self.yl[mif2,mif3] * self.yu[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif4] * self.Y2RL[1,mif1] * self.yl[mif2,mif3] * self.yu[1,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif4] * self.Y2RL[2,mif1] * self.yl[mif2,mif3] * self.yu[1,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif4] * self.Y2RL[2,mif1] * self.yl[mif2,mif3] * self.yu[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif4] * self.Y2RL[2,mif1] * self.yl[mif2,mif3] * self.yu[1,2] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif4] * self.Y2RL[0,mif1] * self.yl[mif2,mif3] * self.yu[2,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif4] * self.Y2RL[0,mif1] * self.yl[mif2,mif3] * self.yu[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif4] * self.Y2RL[0,mif1] * self.yl[mif2,mif3] * self.yu[2,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif4] * self.Y2RL[1,mif1] * self.yl[mif2,mif3] * self.yu[2,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif4] * self.Y2RL[1,mif1] * self.yl[mif2,mif3] * self.yu[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif4] * self.Y2RL[1,mif1] * self.yl[mif2,mif3] * self.yu[2,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif4] * self.Y2RL[2,mif1] * self.yl[mif2,mif3] * self.yu[2,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif4] * self.Y2RL[2,mif1] * self.yl[mif2,mif3] * self.yu[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif4] * self.Y2RL[2,mif1] * self.yl[mif2,mif3] * self.yu[2,2] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,mif4] * self.yubar[0,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,mif4] * self.yubar[0,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif3] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,mif4] * self.yubar[0,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,mif4] * self.yubar[0,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,mif4] * self.yubar[0,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif3] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,mif4] * self.yubar[0,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,mif4] * self.yubar[0,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,mif4] * self.yubar[0,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif3] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,mif4] * self.yubar[0,2] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,mif4] * self.yubar[1,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,mif4] * self.yubar[1,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif3] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,mif4] * self.yubar[1,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,mif4] * self.yubar[1,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,mif4] * self.yubar[1,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif3] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,mif4] * self.yubar[1,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,mif4] * self.yubar[1,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,mif4] * self.yubar[1,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif3] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,mif4] * self.yubar[1,2] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,mif4] * self.yubar[2,0] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,mif4] * self.yubar[2,0] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif3] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,mif4] * self.yubar[2,0] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,mif4] * self.yubar[2,1] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,mif4] * self.yubar[2,1] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif3] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,mif4] * self.yubar[2,1] + 9/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,mif4] * self.yubar[2,2] + 3/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,mif4] * self.yubar[2,2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif3] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,mif4] * self.yubar[2,2])

    def alphaOlq1bar(self, mif1,mif2,mif3,mif4):
        return (49/34560 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] + -7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] + -7/864 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[mif4,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[mif4,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[mif4,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[mif4,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[mif4,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[mif4,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[mif4,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[mif4,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[mif4,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[mif4,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[mif4,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[mif4,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[mif4,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[mif4,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[mif4,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[mif4,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[mif4,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[mif4,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[mif4,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[mif4,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[mif4,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[mif4,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[mif4,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[mif4,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[mif4,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[mif4,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[mif4,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,0] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,0] * self.yubar[mif3,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,0] * self.yubar[mif3,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,0] * self.yubar[mif3,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,1] * self.yubar[mif3,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,1] * self.yubar[mif3,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,1] * self.yubar[mif3,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,2] * self.yubar[mif3,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,2] * self.yubar[mif3,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,2] * self.yubar[mif3,0] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,1] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,0] * self.yubar[mif3,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,0] * self.yubar[mif3,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,0] * self.yubar[mif3,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,1] * self.yubar[mif3,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,1] * self.yubar[mif3,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,1] * self.yubar[mif3,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,2] * self.yubar[mif3,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,2] * self.yubar[mif3,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,2] * self.yubar[mif3,1] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,2] + -3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,2] + -1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,0] * self.yubar[mif3,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,0] * self.yubar[mif3,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,0] * self.yubar[mif3,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,1] * self.yubar[mif3,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,1] * self.yubar[mif3,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,1] * self.yubar[mif3,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,2] * self.yubar[mif3,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,2] * self.yubar[mif3,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,2] * self.yubar[mif3,2])

    def alphaOlq3bar(self, mif1,mif2,mif3,mif4):
        return (-1/1280 * (self.g2)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] + 1/1152 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/384 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,0] * self.yl[mif2,0] * self.ylbar[mif1,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,1] * self.yl[mif2,1] * self.ylbar[mif1,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2LRbar[mif3,2] * self.yl[mif2,2] * self.ylbar[mif1,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[mif4,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[mif4,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,0] * self.Y2RL[0,mif1] * self.yl[mif2,0] * self.yu[mif4,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[mif4,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[mif4,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,1] * self.Y2RL[0,mif1] * self.yl[mif2,1] * self.yu[mif4,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[mif4,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[mif4,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,2] * self.Y2RL[0,mif1] * self.yl[mif2,2] * self.yu[mif4,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[mif4,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[mif4,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,0] * self.Y2RL[1,mif1] * self.yl[mif2,0] * self.yu[mif4,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[mif4,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[mif4,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,1] * self.Y2RL[1,mif1] * self.yl[mif2,1] * self.yu[mif4,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[mif4,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[mif4,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,2] * self.Y2RL[1,mif1] * self.yl[mif2,2] * self.yu[mif4,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[mif4,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[mif4,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,0] * self.Y2RL[2,mif1] * self.yl[mif2,0] * self.yu[mif4,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[mif4,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[mif4,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,1] * self.Y2RL[2,mif1] * self.yl[mif2,1] * self.yu[mif4,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[mif4,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[mif4,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,2] * self.Y2RL[2,mif1] * self.yl[mif2,2] * self.yu[mif4,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,0] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,0] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2RLbar[0,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,0] * self.yubar[mif3,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,0] * self.yubar[mif3,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,0] * self.yubar[mif3,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,1] * self.yubar[mif3,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,1] * self.yubar[mif3,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,1] * self.yubar[mif3,0] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,2] * self.yubar[mif3,0] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,2] * self.yubar[mif3,0] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[0,mif2] * self.yu[mif4,2] * self.yubar[mif3,0] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,1] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,1] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2RLbar[1,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,0] * self.yubar[mif3,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,0] * self.yubar[mif3,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,0] * self.yubar[mif3,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,1] * self.yubar[mif3,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,1] * self.yubar[mif3,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,1] * self.yubar[mif3,1] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,2] * self.yubar[mif3,1] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,2] * self.yubar[mif3,1] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[1,mif2] * self.yu[mif4,2] * self.yubar[mif3,1] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,0] * self.yubar[mif3,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,1] * self.yubar[mif3,2] + 3/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,2] + 1/64 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,2] + -1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2RLbar[2,mif2] * self.ylbar[mif1,2] * self.yubar[mif3,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,0] * self.yubar[mif3,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,0] * self.yubar[mif3,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,0] * self.yubar[mif3,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,1] * self.yubar[mif3,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,1] * self.yubar[mif3,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,1] * self.yubar[mif3,2] + 3/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,2] * self.yubar[mif3,2] + 1/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,2] * self.yubar[mif3,2] + -1/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] * self.yu[mif4,2] * self.yubar[mif3,2])

    def alphaOeubar(self, mif1,mif2,mif3,mif4):
        return (49/4320 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + -1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + -1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + 1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + -1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + -1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + 1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + -1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + -1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + 1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + -35/1728 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -35/1728 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -35/1728 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] * self.yl[0,mif1] * self.ylbar[0,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] * self.yl[0,mif1] * self.ylbar[0,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] * self.yl[0,mif1] * self.ylbar[0,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,0] * self.yl[1,mif1] * self.ylbar[0,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,0] * self.yl[1,mif1] * self.ylbar[0,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,0] * self.yl[1,mif1] * self.ylbar[0,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,0] * self.yl[2,mif1] * self.ylbar[0,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,0] * self.yl[2,mif1] * self.ylbar[0,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,0] * self.yl[2,mif1] * self.ylbar[0,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,1] * self.yl[0,mif1] * self.ylbar[1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,1] * self.yl[0,mif1] * self.ylbar[1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,1] * self.yl[0,mif1] * self.ylbar[1,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] * self.yl[1,mif1] * self.ylbar[1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] * self.yl[1,mif1] * self.ylbar[1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] * self.yl[1,mif1] * self.ylbar[1,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,1] * self.yl[2,mif1] * self.ylbar[1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,1] * self.yl[2,mif1] * self.ylbar[1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,1] * self.yl[2,mif1] * self.ylbar[1,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,2] * self.yl[0,mif1] * self.ylbar[2,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,2] * self.yl[0,mif1] * self.ylbar[2,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,2] * self.yl[0,mif1] * self.ylbar[2,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,2] * self.yl[1,mif1] * self.ylbar[2,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,2] * self.yl[1,mif1] * self.ylbar[2,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,2] * self.yl[1,mif1] * self.ylbar[2,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] * self.yl[2,mif1] * self.ylbar[2,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] * self.yl[2,mif1] * self.ylbar[2,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] * self.yl[2,mif1] * self.ylbar[2,mif2] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,0] * self.yl[0,mif1] * self.yu[0,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,0] * self.yl[0,mif1] * self.yu[0,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,0] * self.yl[0,mif1] * self.yu[0,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,1] * self.yl[1,mif1] * self.yu[0,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,1] * self.yl[1,mif1] * self.yu[0,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,1] * self.yl[1,mif1] * self.yu[0,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,2] * self.yl[2,mif1] * self.yu[0,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,2] * self.yl[2,mif1] * self.yu[0,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[mif4,2] * self.yl[2,mif1] * self.yu[0,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,0] * self.yl[0,mif1] * self.yu[1,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,0] * self.yl[0,mif1] * self.yu[1,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,0] * self.yl[0,mif1] * self.yu[1,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,1] * self.yl[1,mif1] * self.yu[1,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,1] * self.yl[1,mif1] * self.yu[1,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,1] * self.yl[1,mif1] * self.yu[1,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,2] * self.yl[2,mif1] * self.yu[1,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,2] * self.yl[2,mif1] * self.yu[1,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[mif4,2] * self.yl[2,mif1] * self.yu[1,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,0] * self.yl[0,mif1] * self.yu[2,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,0] * self.yl[0,mif1] * self.yu[2,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,0] * self.yl[0,mif1] * self.yu[2,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,1] * self.yl[1,mif1] * self.yu[2,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,1] * self.yl[1,mif1] * self.yu[2,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,1] * self.yl[1,mif1] * self.yu[2,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,2] * self.yl[2,mif1] * self.yu[2,mif3] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,2] * self.yl[2,mif1] * self.yu[2,mif3] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[mif4,2] * self.yl[2,mif1] * self.yu[2,mif3] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[mif3,0] * self.ylbar[0,mif2] * self.yubar[0,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[mif3,0] * self.ylbar[0,mif2] * self.yubar[0,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2RLbar[mif3,0] * self.ylbar[0,mif2] * self.yubar[0,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[mif3,1] * self.ylbar[1,mif2] * self.yubar[0,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[mif3,1] * self.ylbar[1,mif2] * self.yubar[0,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2RLbar[mif3,1] * self.ylbar[1,mif2] * self.yubar[0,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[mif3,2] * self.ylbar[2,mif2] * self.yubar[0,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2RLbar[mif3,2] * self.ylbar[2,mif2] * self.yubar[0,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2RLbar[mif3,2] * self.ylbar[2,mif2] * self.yubar[0,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,mif3] * self.yubar[0,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,mif3] * self.yubar[0,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,mif3] * self.yubar[0,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,mif3] * self.yubar[0,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,mif3] * self.yubar[0,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,mif3] * self.yubar[0,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,mif3] * self.yubar[0,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,mif3] * self.yubar[0,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,mif3] * self.yubar[0,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[mif3,0] * self.ylbar[0,mif2] * self.yubar[1,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[mif3,0] * self.ylbar[0,mif2] * self.yubar[1,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2RLbar[mif3,0] * self.ylbar[0,mif2] * self.yubar[1,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[mif3,1] * self.ylbar[1,mif2] * self.yubar[1,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[mif3,1] * self.ylbar[1,mif2] * self.yubar[1,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2RLbar[mif3,1] * self.ylbar[1,mif2] * self.yubar[1,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[mif3,2] * self.ylbar[2,mif2] * self.yubar[1,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2RLbar[mif3,2] * self.ylbar[2,mif2] * self.yubar[1,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2RLbar[mif3,2] * self.ylbar[2,mif2] * self.yubar[1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,mif3] * self.yubar[1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,mif3] * self.yubar[1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,mif3] * self.yubar[1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,mif3] * self.yubar[1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,mif3] * self.yubar[1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,mif3] * self.yubar[1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,mif3] * self.yubar[1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,mif3] * self.yubar[1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,mif3] * self.yubar[1,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[mif3,0] * self.ylbar[0,mif2] * self.yubar[2,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[mif3,0] * self.ylbar[0,mif2] * self.yubar[2,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2RLbar[mif3,0] * self.ylbar[0,mif2] * self.yubar[2,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[mif3,1] * self.ylbar[1,mif2] * self.yubar[2,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[mif3,1] * self.ylbar[1,mif2] * self.yubar[2,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2RLbar[mif3,1] * self.ylbar[1,mif2] * self.yubar[2,mif4] + -3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[mif3,2] * self.ylbar[2,mif2] * self.yubar[2,mif4] + -1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2RLbar[mif3,2] * self.ylbar[2,mif2] * self.yubar[2,mif4] + 1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2RLbar[mif3,2] * self.ylbar[2,mif2] * self.yubar[2,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,mif3] * self.yubar[2,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,mif3] * self.yubar[2,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yu[0,mif3] * self.yubar[2,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,mif3] * self.yubar[2,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,mif3] * self.yubar[2,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yu[1,mif3] * self.yubar[2,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,mif3] * self.yubar[2,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,mif3] * self.yubar[2,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yu[2,mif3] * self.yubar[2,mif4])

    def alphaOedbar(self, mif1,mif2,mif3,mif4):
        return (-49/8640 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + 1/192 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + 1/144 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + -1/144 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ydbar[0,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ydbar[0,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ydbar[0,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ydbar[0,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ydbar[0,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ydbar[0,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ydbar[0,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ydbar[0,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ydbar[0,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ydbar[1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ydbar[1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ydbar[1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ydbar[1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ydbar[1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ydbar[1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ydbar[1,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ydbar[1,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ydbar[1,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ydbar[2,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ydbar[2,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ydbar[2,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ydbar[2,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ydbar[2,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ydbar[2,mif4] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ydbar[2,mif4] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ydbar[2,mif4] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ydbar[2,mif4])

    def alphaOqebar(self, mif1,mif2,mif3,mif4):
        return (49/17280 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + -1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + -1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + 1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif3] * self.Y2LRbar[0,mif4] + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + -1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + -1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + 1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif3] * self.Y2LRbar[1,mif4] + -7/1152 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + -1/384 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + -1/288 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + 1/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif3] * self.Y2LRbar[2,mif4] + -7/432 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,0] * self.Y2LRbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,0] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LR[mif2,mif3] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,0] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LR[mif2,mif3] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,0] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,0] * self.Y2LR[mif2,mif3] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,0] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LR[mif2,mif3] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,0] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LR[mif2,mif3] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,0] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,0] * self.Y2LR[mif2,mif3] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,0] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LR[mif2,mif3] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,0] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LR[mif2,mif3] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,0] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,0] * self.Y2LR[mif2,mif3] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,0] + -7/432 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,1] * self.Y2LRbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,1] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LR[mif2,mif3] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,1] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LR[mif2,mif3] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,1] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,1] * self.Y2LR[mif2,mif3] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,1] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LR[mif2,mif3] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,1] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LR[mif2,mif3] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,1] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,1] * self.Y2LR[mif2,mif3] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,1] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LR[mif2,mif3] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,1] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LR[mif2,mif3] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,1] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,1] * self.Y2LR[mif2,mif3] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,1] + -7/432 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + -1/64 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + -1/48 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/48 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,2] * self.Y2LRbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,2] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LR[mif2,mif3] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,2] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LR[mif2,mif3] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,2] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,2] * self.Y2LR[mif2,mif3] * self.Y2LRbar[0,mif4] * self.Y2LRbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,2] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LR[mif2,mif3] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,2] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LR[mif2,mif3] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,2] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,2] * self.Y2LR[mif2,mif3] * self.Y2LRbar[1,mif4] * self.Y2LRbar[mif1,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,2] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LR[mif2,mif3] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,2] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LR[mif2,mif3] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,2] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,2] * self.Y2LR[mif2,mif3] * self.Y2LRbar[2,mif4] * self.Y2LRbar[mif1,2] + -1/2 * (self.MR2)**(-2) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + -25/2304 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + -25/768 * self.aEV * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + -3/256 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + -9/256 * self.aEV * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + -1/48 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + -1/16 * self.aEV * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + -25/1152 * self.aEV * self.epsilonbar * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + -3/128 * self.aEV * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + -1/24 * self.aEV * self.epsilonbar * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + 25/1152 * self.aEV * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + 3/128 * self.aEV * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + 1/24 * self.aEV * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif2,mif3] * self.Y2LRbar[mif1,mif4] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[0,0] * self.Y2LRbar[mif1,mif4] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[0,0] * self.Y2LRbar[mif1,mif4] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[0,0] * self.Y2LRbar[mif1,mif4] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[0,1] * self.Y2LRbar[mif1,mif4] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[0,1] * self.Y2LRbar[mif1,mif4] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[0,1] * self.Y2LRbar[mif1,mif4] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[0,2] * self.Y2LRbar[mif1,mif4] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[0,2] * self.Y2LRbar[mif1,mif4] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[0,2] * self.Y2LRbar[mif1,mif4] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[1,0] * self.Y2LRbar[mif1,mif4] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[1,0] * self.Y2LRbar[mif1,mif4] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[1,0] * self.Y2LRbar[mif1,mif4] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[1,1] * self.Y2LRbar[mif1,mif4] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[1,1] * self.Y2LRbar[mif1,mif4] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[1,1] * self.Y2LRbar[mif1,mif4] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[1,2] * self.Y2LRbar[mif1,mif4] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[1,2] * self.Y2LRbar[mif1,mif4] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[1,2] * self.Y2LRbar[mif1,mif4] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[2,0] * self.Y2LRbar[mif1,mif4] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[2,0] * self.Y2LRbar[mif1,mif4] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif3] * self.Y2LR[mif2,0] * self.Y2LRbar[2,0] * self.Y2LRbar[mif1,mif4] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[2,1] * self.Y2LRbar[mif1,mif4] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[2,1] * self.Y2LRbar[mif1,mif4] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif3] * self.Y2LR[mif2,1] * self.Y2LRbar[2,1] * self.Y2LRbar[mif1,mif4] + 7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[2,2] * self.Y2LRbar[mif1,mif4] + 7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[2,2] * self.Y2LRbar[mif1,mif4] + -7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,mif3] * self.Y2LR[mif2,2] * self.Y2LRbar[2,2] * self.Y2LRbar[mif1,mif4])

    def alphaOlubar(self, mif1,mif2,mif3,mif4):
        return (49/8640 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/36 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/36 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -7/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/36 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,0] * self.Y2RLbar[mif3,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,0] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RL[mif4,mif1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,0] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,0] * self.Y2RL[mif4,mif1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,0] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,0] * self.Y2RL[mif4,mif1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,0] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RL[mif4,mif1] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,0] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,0] * self.Y2RL[mif4,mif1] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,0] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,0] * self.Y2RL[mif4,mif1] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,0] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,0] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RL[mif4,mif1] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,0] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,0] * self.Y2RL[mif4,mif1] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,0] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,0] * self.Y2RL[mif4,mif1] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,0] + -35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,1] * self.Y2RLbar[mif3,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RL[mif4,mif1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,1] * self.Y2RL[mif4,mif1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,1] * self.Y2RL[mif4,mif1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RL[mif4,mif1] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,1] * self.Y2RL[mif4,mif1] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,1] * self.Y2RL[mif4,mif1] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,1] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,1] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RL[mif4,mif1] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,1] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,1] * self.Y2RL[mif4,mif1] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,1] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,1] * self.Y2RL[mif4,mif1] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,1] + -35/3456 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/128 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + -1/96 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 1/96 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,2] * self.Y2RLbar[mif3,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RL[mif4,mif1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,2] * self.Y2RL[mif4,mif1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,2] * self.Y2RL[mif4,mif1] * self.Y2RLbar[0,mif2] * self.Y2RLbar[mif3,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RL[mif4,mif1] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,2] * self.Y2RL[mif4,mif1] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,2] * self.Y2RL[mif4,mif1] * self.Y2RLbar[1,mif2] * self.Y2RLbar[mif3,2] + 1/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RL[mif4,mif1] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,2] * self.Y2RL[mif4,mif1] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,2] * self.Y2RL[mif4,mif1] * self.Y2RLbar[2,mif2] * self.Y2RLbar[mif3,2] + -1/2 * (self.MR2)**(-2) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + -1/2304 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + -1/768 * self.aEV * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + -3/256 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + -9/256 * self.aEV * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + -1/48 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + -1/16 * self.aEV * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + -1/1152 * self.aEV * self.epsilonbar * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + -3/128 * self.aEV * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + -1/24 * self.aEV * self.epsilonbar * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + 1/1152 * self.aEV * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + 3/128 * self.aEV * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + 1/24 * self.aEV * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[mif4,mif1] * self.Y2RLbar[mif3,mif2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[0,0] * self.Y2RLbar[mif3,mif2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[0,0] * self.Y2RLbar[mif3,mif2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[0,0] * self.Y2RLbar[mif3,mif2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[0,1] * self.Y2RLbar[mif3,mif2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[0,1] * self.Y2RLbar[mif3,mif2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[0,1] * self.Y2RLbar[mif3,mif2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[0,2] * self.Y2RLbar[mif3,mif2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[0,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[0,2] * self.Y2RLbar[mif3,mif2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[0,2] * self.Y2RLbar[mif3,mif2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[1,0] * self.Y2RLbar[mif3,mif2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[1,0] * self.Y2RLbar[mif3,mif2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[1,0] * self.Y2RLbar[mif3,mif2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[1,1] * self.Y2RLbar[mif3,mif2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[1,1] * self.Y2RLbar[mif3,mif2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[1,1] * self.Y2RLbar[mif3,mif2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[1,2] * self.Y2RLbar[mif3,mif2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[1,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[1,2] * self.Y2RLbar[mif3,mif2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[1,2] * self.Y2RLbar[mif3,mif2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[2,0] * self.Y2RLbar[mif3,mif2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[2,0] * self.Y2RLbar[mif3,mif2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[2,0] * self.Y2RLbar[mif3,mif2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[2,1] * self.Y2RLbar[mif3,mif2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[2,1] * self.Y2RLbar[mif3,mif2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[2,1] * self.Y2RLbar[mif3,mif2] + 5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[2,2] * self.Y2RLbar[mif3,mif2] + 5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2RL[2,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[2,2] * self.Y2RLbar[mif3,mif2] + -5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[2,2] * self.Y2RLbar[mif3,mif2])

    def alphaOldbar(self, mif1,mif2,mif3,mif4):
        return (-49/17280 * (self.g1)**(4) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[0,mif1] * self.Y2RLbar[0,mif2] + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[1,mif1] * self.Y2RLbar[1,mif2] + 7/576 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/96 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + 1/72 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2] + -1/72 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2RL[2,mif1] * self.Y2RLbar[2,mif2])

    def alphaOledqbar(self, mif1,mif2,mif3,mif4):
        return (3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ylbar[mif1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ylbar[mif1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ylbar[mif1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ylbar[mif1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ylbar[mif1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ylbar[mif1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ylbar[mif1,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,0] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ylbar[mif1,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,0] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ylbar[mif1,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ylbar[mif1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ylbar[mif1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ylbar[mif1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ylbar[mif1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ylbar[mif1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ylbar[mif1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ylbar[mif1,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ylbar[mif1,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,1] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ylbar[mif1,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ylbar[mif1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ylbar[mif1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2LRbar[0,mif2] * self.yd[0,mif3] * self.ylbar[mif1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ylbar[mif1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ylbar[mif1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2LRbar[1,mif2] * self.yd[1,mif3] * self.ylbar[mif1,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ylbar[mif1,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[mif4,2] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ylbar[mif1,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[mif4,2] * self.Y2LRbar[2,mif2] * self.yd[2,mif3] * self.ylbar[mif1,2] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yd[mif4,mif3] * self.yu[0,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yd[mif4,mif3] * self.yu[0,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yd[mif4,mif3] * self.yu[0,0] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yd[mif4,mif3] * self.yu[0,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yd[mif4,mif3] * self.yu[0,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yd[mif4,mif3] * self.yu[0,1] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yd[mif4,mif3] * self.yu[0,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yd[mif4,mif3] * self.yu[0,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yd[mif4,mif3] * self.yu[0,2] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yd[mif4,mif3] * self.yu[1,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yd[mif4,mif3] * self.yu[1,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yd[mif4,mif3] * self.yu[1,0] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yd[mif4,mif3] * self.yu[1,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yd[mif4,mif3] * self.yu[1,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yd[mif4,mif3] * self.yu[1,1] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yd[mif4,mif3] * self.yu[1,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yd[mif4,mif3] * self.yu[1,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yd[mif4,mif3] * self.yu[1,2] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yd[mif4,mif3] * self.yu[2,0] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yd[mif4,mif3] * self.yu[2,0] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yd[mif4,mif3] * self.yu[2,0] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yd[mif4,mif3] * self.yu[2,1] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yd[mif4,mif3] * self.yu[2,1] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yd[mif4,mif3] * self.yu[2,1] + -9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yd[mif4,mif3] * self.yu[2,2] + -3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yd[mif4,mif3] * self.yu[2,2] + 3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yd[mif4,mif3] * self.yu[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yd[0,mif3] * self.yu[mif4,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yd[0,mif3] * self.yu[mif4,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yd[0,mif3] * self.yu[mif4,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yd[1,mif3] * self.yu[mif4,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yd[1,mif3] * self.yu[mif4,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yd[1,mif3] * self.yu[mif4,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yd[2,mif3] * self.yu[mif4,0] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yd[2,mif3] * self.yu[mif4,0] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yd[2,mif3] * self.yu[mif4,0] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yd[0,mif3] * self.yu[mif4,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yd[0,mif3] * self.yu[mif4,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yd[0,mif3] * self.yu[mif4,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yd[1,mif3] * self.yu[mif4,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yd[1,mif3] * self.yu[mif4,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yd[1,mif3] * self.yu[mif4,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yd[2,mif3] * self.yu[mif4,1] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yd[2,mif3] * self.yu[mif4,1] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yd[2,mif3] * self.yu[mif4,1] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yd[0,mif3] * self.yu[mif4,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yd[0,mif3] * self.yu[mif4,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yd[0,mif3] * self.yu[mif4,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yd[1,mif3] * self.yu[mif4,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yd[1,mif3] * self.yu[mif4,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yd[1,mif3] * self.yu[mif4,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yd[2,mif3] * self.yu[mif4,2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yd[2,mif3] * self.yu[mif4,2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yd[2,mif3] * self.yu[mif4,2])

    def alphaOlequ1bar(self, mif1,mif2,mif3,mif4):
        return (-7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + -7/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + -7/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + 7/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + 1/2 * (self.MR2)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 5/288 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -5/768 * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 3/32 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -9/256 * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -1/6 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 1/16 * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 5/384 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -5/1152 * self.epsilonbar * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 9/128 * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -3/128 * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -1/8 * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 1/24 * self.epsilonbar * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -5/384 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 5/1152 * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -9/128 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 3/128 * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 1/8 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -1/24 * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[0,0] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[0,0] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[0,0] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[0,1] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[0,1] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[0,1] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[0,2] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[0,2] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[0,2] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[1,0] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[1,0] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[1,0] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[1,1] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[1,1] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[1,1] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[1,2] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[1,2] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[1,2] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[2,0] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[2,0] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[2,0] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[2,1] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[2,1] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[2,1] + -5/256 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[2,2] + -5/128 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[2,2] + 5/128 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[2,2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,0] * self.yl[0,0] * self.ylbar[mif1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,0] * self.yl[0,0] * self.ylbar[mif1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,0] * self.yl[0,0] * self.ylbar[mif1,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,0] * self.yl[0,1] * self.ylbar[mif1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,0] * self.yl[0,1] * self.ylbar[mif1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,0] * self.yl[0,1] * self.ylbar[mif1,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,0] * self.yl[0,2] * self.ylbar[mif1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,0] * self.yl[0,2] * self.ylbar[mif1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,0] * self.yl[0,2] * self.ylbar[mif1,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,1] * self.yl[1,0] * self.ylbar[mif1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,1] * self.yl[1,0] * self.ylbar[mif1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,1] * self.yl[1,0] * self.ylbar[mif1,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,1] * self.yl[1,1] * self.ylbar[mif1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,1] * self.yl[1,1] * self.ylbar[mif1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,1] * self.yl[1,1] * self.ylbar[mif1,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,1] * self.yl[1,2] * self.ylbar[mif1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,1] * self.yl[1,2] * self.ylbar[mif1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,1] * self.yl[1,2] * self.ylbar[mif1,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,2] * self.yl[2,0] * self.ylbar[mif1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,2] * self.yl[2,0] * self.ylbar[mif1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,2] * self.yl[2,0] * self.ylbar[mif1,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,2] * self.yl[2,1] * self.ylbar[mif1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,2] * self.yl[2,1] * self.ylbar[mif1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,2] * self.yl[2,1] * self.ylbar[mif1,mif2] + 3/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,2] * self.yl[2,2] * self.ylbar[mif1,mif2] + 1/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,2] * self.yl[2,2] * self.ylbar[mif1,mif2] + -1/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,2] * self.yl[2,2] * self.ylbar[mif1,mif2] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yubar[mif3,mif4] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yubar[mif3,mif4] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[0,mif1] * self.yu[0,0] * self.yubar[mif3,mif4] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yubar[mif3,mif4] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yubar[mif3,mif4] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[1,mif1] * self.yu[0,1] * self.yubar[mif3,mif4] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yubar[mif3,mif4] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yubar[mif3,mif4] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[0,mif2] * self.Y2RL[2,mif1] * self.yu[0,2] * self.yubar[mif3,mif4] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yubar[mif3,mif4] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yubar[mif3,mif4] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[0,mif1] * self.yu[1,0] * self.yubar[mif3,mif4] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yubar[mif3,mif4] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yubar[mif3,mif4] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[1,mif1] * self.yu[1,1] * self.yubar[mif3,mif4] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yubar[mif3,mif4] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yubar[mif3,mif4] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[1,mif2] * self.Y2RL[2,mif1] * self.yu[1,2] * self.yubar[mif3,mif4] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] * self.yubar[mif3,mif4] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] * self.yubar[mif3,mif4] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[0,mif1] * self.yu[2,0] * self.yubar[mif3,mif4] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] * self.yubar[mif3,mif4] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] * self.yubar[mif3,mif4] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[1,mif1] * self.yu[2,1] * self.yubar[mif3,mif4] + 9/64 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] * self.yubar[mif3,mif4] + 3/32 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] * self.yubar[mif3,mif4] + -3/32 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[2,mif2] * self.Y2RL[2,mif1] * self.yu[2,2] * self.yubar[mif3,mif4])

    def alphaOlequ3bar(self, mif1,mif2,mif3,mif4):
        return (-7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,0] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,0] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,0] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,0] * self.Y2RL[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,1] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,1] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,1] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,1] * self.Y2RL[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[0,2] * self.Y2LRbar[0,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[1,2] * self.Y2LRbar[1,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + -7/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + -7/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + 7/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LR[2,2] * self.Y2LRbar[2,mif2] * self.Y2LRbar[mif3,2] * self.Y2RL[mif4,mif1] + 1/8 * (self.MR2)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -5/2304 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 5/6144 * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -3/256 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 9/2048 * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 1/48 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -1/128 * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -5/4608 * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 5/9216 * self.epsilonbar * (self.g1)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -3/512 * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 3/1024 * self.epsilonbar * (self.g2)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 1/96 * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -1/192 * self.epsilonbar * (self.g3)**(2) * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 5/4608 * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -5/9216 * self.epsilonbar * (self.g1)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 3/512 * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -3/1024 * self.epsilonbar * (self.g2)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -1/96 * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + 1/192 * self.epsilonbar * (self.g3)**(2) * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[mif4,mif1] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[0,0] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[0,0] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[0,0] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[0,1] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[0,1] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[0,1] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[0,2] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[0,2] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[0,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[0,2] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[1,0] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[1,0] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[1,0] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[1,1] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[1,1] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[1,1] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[1,2] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[1,2] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[1,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[1,2] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[2,0] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[2,0] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,0] * self.Y2RLbar[2,0] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[2,1] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[2,1] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,1] * self.Y2RLbar[2,1] + -5/1024 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[2,2] + -5/512 * self.invepsilonbar * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[2,2] + 5/512 * (self.MR2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MR2)**(2) * (self.mu)**(-2)) * self.Y2LRbar[mif3,mif2] * self.Y2RL[2,mif1] * self.Y2RL[mif4,2] * self.Y2RLbar[2,2])

    def alphaWeinberg(self, mif1,mif2):
        return 0

    def alphaWeinbergbar(self, mif1,mif2):
        return 0
