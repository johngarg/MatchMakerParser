## Symbols used:
# ydbar
# yd
# iCPV
# yl
# lambdaHatOmega2
# ylbar
# g1
# muH
# MOmega2
# invepsilonbar
# yOmega2bar
# yOmega2
# lam
# mu
# g3
# yubar
# onelooporder
# yu

import python.matchingresult
import numpy as np

class GranadaOmega2MatchingResult(python.matchingresult.GenericMatchingResult):
    def __init__(self, name='GranadaOmega2', scale=91.1876):
        super().__init__(name, scale)
        self.MOmega2 = 1
        self.yOmega2 = np.ones((3, 3))
        self.yOmega2bar = np.ones((3, 3))
        self.lambdaHatOmega2 = 1
        self.lambdaHatOmega2bar = 1
        self.nonvanishing = ['alphaO3G', 'alphaOHG', 'alphaOHB', 'alphaOHBox', 'alphaOHD', 'alphaOH', 'alphaOdG', 'alphaOdB', 'alphaOHq1', 'alphaOHq3', 'alphaOHu', 'alphaOHd', 'alphaOHl1', 'alphaOHe', 'alphaOdH', 'alphaOqq1', 'alphaOqq3', 'alphaOuu', 'alphaOdd', 'alphaOud1', 'alphaOud8', 'alphaOqu1', 'alphaOqu8', 'alphaOqd1', 'alphaOqd8', 'alphaOll', 'alphaOee', 'alphaOle', 'alphaOlq1', 'alphaOeu', 'alphaOed', 'alphaOqe', 'alphaOlu', 'alphaOld']

    def alphaO3G(self, ):
        return 1/1152 * (self.g3)**(3) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaO3Gt(self, ):
        return 0

    def alphaO3W(self, ):
        return 0

    def alphaO3Wt(self, ):
        return 0

    def alphaOHG(self, ):
        return -5/384 * (self.g3)**(2) * self.lambdaHatOmega2 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaOHGt(self, ):
        return 0

    def alphaOHW(self, ):
        return 0

    def alphaOHWt(self, ):
        return 0

    def alphaOHB(self, ):
        return -1/72 * (self.g1)**(2) * self.lambdaHatOmega2 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaOHBt(self, ):
        return 0

    def alphaOHWB(self, ):
        return 0

    def alphaOHWBt(self, ):
        return 0

    def alphaOHBox(self, ):
        return (-1/1440 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) + -1/32 * (self.lambdaHatOmega2)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2))

    def alphaOHD(self, ):
        return -1/360 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaOH(self, ):
        return 1/16 * (self.lambdaHatOmega2)**(3) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2)

    def alphaOuG(self, mif1,mif2):
        return 0

    def alphaOuW(self, mif1,mif2):
        return 0

    def alphaOuB(self, mif1,mif2):
        return 0

    def alphaOdG(self, mif1,mif2):
        return (-1/48 * self.g3 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,0] + -1/64 * self.g3 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,0] + -1/48 * self.g3 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[0,mif2] * self.yOmega2bar[0,1] + -1/64 * self.g3 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[0,mif2] * self.yOmega2bar[0,1] + -1/48 * self.g3 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[0,mif2] * self.yOmega2bar[0,2] + -1/64 * self.g3 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[0,mif2] * self.yOmega2bar[0,2] + -1/48 * self.g3 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[1,mif2] * self.yOmega2bar[1,0] + -1/64 * self.g3 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[1,mif2] * self.yOmega2bar[1,0] + -1/48 * self.g3 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,1] + -1/64 * self.g3 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,1] + -1/48 * self.g3 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[1,mif2] * self.yOmega2bar[1,2] + -1/64 * self.g3 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[1,mif2] * self.yOmega2bar[1,2] + -1/48 * self.g3 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[2,mif2] * self.yOmega2bar[2,0] + -1/64 * self.g3 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[2,mif2] * self.yOmega2bar[2,0] + -1/48 * self.g3 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[2,mif2] * self.yOmega2bar[2,1] + -1/64 * self.g3 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[2,mif2] * self.yOmega2bar[2,1] + -1/48 * self.g3 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,2] + -1/64 * self.g3 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,2])

    def alphaOdW(self, mif1,mif2):
        return 0

    def alphaOdB(self, mif1,mif2):
        return (1/144 * self.g1 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,0] + 1/48 * self.g1 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,0] + 1/144 * self.g1 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[0,mif2] * self.yOmega2bar[0,1] + 1/48 * self.g1 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[0,mif2] * self.yOmega2bar[0,1] + 1/144 * self.g1 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[0,mif2] * self.yOmega2bar[0,2] + 1/48 * self.g1 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[0,mif2] * self.yOmega2bar[0,2] + 1/144 * self.g1 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[1,mif2] * self.yOmega2bar[1,0] + 1/48 * self.g1 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[1,mif2] * self.yOmega2bar[1,0] + 1/144 * self.g1 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,1] + 1/48 * self.g1 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,1] + 1/144 * self.g1 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[1,mif2] * self.yOmega2bar[1,2] + 1/48 * self.g1 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[1,mif2] * self.yOmega2bar[1,2] + 1/144 * self.g1 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[2,mif2] * self.yOmega2bar[2,0] + 1/48 * self.g1 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[2,mif2] * self.yOmega2bar[2,0] + 1/144 * self.g1 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[2,mif2] * self.yOmega2bar[2,1] + 1/48 * self.g1 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[2,mif2] * self.yOmega2bar[2,1] + 1/144 * self.g1 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,2] + 1/48 * self.g1 * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,2])

    def alphaOeW(self, mif1,mif2):
        return 0

    def alphaOeB(self, mif1,mif2):
        return 0

    def alphaOHq1(self, mif1,mif2):
        return (-1/2160 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[0,0] * self.yOmega2bar[0,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[0,1] * self.yOmega2bar[0,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[0,2] * self.yOmega2bar[0,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[0,0] * self.yOmega2bar[0,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[0,1] * self.yOmega2bar[0,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[0,2] * self.yOmega2bar[0,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[0,0] * self.yOmega2bar[0,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[0,1] * self.yOmega2bar[0,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[0,2] * self.yOmega2bar[0,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[1,0] * self.yOmega2bar[1,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[1,1] * self.yOmega2bar[1,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[1,2] * self.yOmega2bar[1,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[1,0] * self.yOmega2bar[1,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[1,1] * self.yOmega2bar[1,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[1,2] * self.yOmega2bar[1,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[1,0] * self.yOmega2bar[1,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[1,1] * self.yOmega2bar[1,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[1,2] * self.yOmega2bar[1,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[2,0] * self.yOmega2bar[2,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[2,1] * self.yOmega2bar[2,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[2,2] * self.yOmega2bar[2,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[2,0] * self.yOmega2bar[2,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[2,1] * self.yOmega2bar[2,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[2,2] * self.yOmega2bar[2,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[2,0] * self.yOmega2bar[2,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[2,1] * self.yOmega2bar[2,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[2,2] * self.yOmega2bar[2,2])

    def alphaOHq3(self, mif1,mif2):
        return (-1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[0,0] * self.yOmega2bar[0,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[0,1] * self.yOmega2bar[0,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[0,2] * self.yOmega2bar[0,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[0,0] * self.yOmega2bar[0,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[0,1] * self.yOmega2bar[0,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[0,2] * self.yOmega2bar[0,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[0,0] * self.yOmega2bar[0,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[0,1] * self.yOmega2bar[0,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[0,2] * self.yOmega2bar[0,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[1,0] * self.yOmega2bar[1,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[1,1] * self.yOmega2bar[1,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[1,2] * self.yOmega2bar[1,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[1,0] * self.yOmega2bar[1,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[1,1] * self.yOmega2bar[1,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[1,2] * self.yOmega2bar[1,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[1,0] * self.yOmega2bar[1,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[1,1] * self.yOmega2bar[1,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[1,2] * self.yOmega2bar[1,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[2,0] * self.yOmega2bar[2,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[2,1] * self.yOmega2bar[2,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[2,2] * self.yOmega2bar[2,0] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[2,0] * self.yOmega2bar[2,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[2,1] * self.yOmega2bar[2,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[2,2] * self.yOmega2bar[2,1] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[2,0] * self.yOmega2bar[2,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[2,1] * self.yOmega2bar[2,2] + -1/48 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[2,2] * self.yOmega2bar[2,2])

    def alphaOHu(self, mif1,mif2):
        return -1/540 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2)

    def alphaOHd(self, mif1,mif2):
        return (1/1080 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) + -11/432 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + -1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 1/36 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[0,0] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[1,0] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[2,0] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[0,0] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[1,0] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[2,0] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[0,0] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[1,0] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[2,0] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[0,1] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[1,1] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[2,1] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,mif1] + -11/432 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + -1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 1/36 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[0,1] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[1,1] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[2,1] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[0,1] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[1,1] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[2,1] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[0,2] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[1,2] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[2,2] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[0,2] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[1,2] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[2,2] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,mif1] + -11/432 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + -1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + -1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + 1/36 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[0,2] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[1,2] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + 1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + 1/4 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + -1/4 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[2,2] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1])

    def alphaOHud(self, mif1,mif2):
        return 0

    def alphaOHl1(self, mif1,mif2):
        return 1/720 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2)

    def alphaOHl3(self, mif1,mif2):
        return 0

    def alphaOHe(self, mif1,mif2):
        return 1/360 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2)

    def alphaOuH(self, mif1,mif2):
        return 0

    def alphaOdH(self, mif1,mif2):
        return (1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] * self.yOmega2[0,0] * self.yOmega2bar[0,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] * self.yOmega2[0,0] * self.yOmega2bar[0,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] * self.yOmega2[0,0] * self.yOmega2bar[0,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,1] * self.yOmega2[0,1] * self.yOmega2bar[0,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,1] * self.yOmega2[0,1] * self.yOmega2bar[0,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,1] * self.yOmega2[0,1] * self.yOmega2bar[0,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,2] * self.yOmega2[0,2] * self.yOmega2bar[0,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,2] * self.yOmega2[0,2] * self.yOmega2bar[0,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,2] * self.yOmega2[0,2] * self.yOmega2bar[0,0] + 1/8 * self.lambdaHatOmega2 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.yd[mif1,0] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.yd[mif1,0] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.yd[mif1,0] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.yd[mif1,0] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.yd[mif1,0] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.yd[mif1,0] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.yd[mif1,0] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.yd[mif1,0] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.yd[mif1,0] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,0] * self.yOmega2[0,0] * self.yOmega2bar[0,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,0] * self.yOmega2[0,0] * self.yOmega2bar[0,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,0] * self.yOmega2[0,0] * self.yOmega2bar[0,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] * self.yOmega2[0,1] * self.yOmega2bar[0,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] * self.yOmega2[0,1] * self.yOmega2bar[0,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] * self.yOmega2[0,1] * self.yOmega2bar[0,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,2] * self.yOmega2[0,2] * self.yOmega2bar[0,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,2] * self.yOmega2[0,2] * self.yOmega2bar[0,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,2] * self.yOmega2[0,2] * self.yOmega2bar[0,1] + 1/8 * self.lambdaHatOmega2 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[0,mif2] * self.yOmega2bar[0,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.yd[mif1,1] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.yd[mif1,1] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.yd[mif1,1] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.yd[mif1,1] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.yd[mif1,1] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.yd[mif1,1] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.yd[mif1,1] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.yd[mif1,1] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.yd[mif1,1] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,0] * self.yOmega2[0,0] * self.yOmega2bar[0,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,0] * self.yOmega2[0,0] * self.yOmega2bar[0,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,0] * self.yOmega2[0,0] * self.yOmega2bar[0,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,1] * self.yOmega2[0,1] * self.yOmega2bar[0,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,1] * self.yOmega2[0,1] * self.yOmega2bar[0,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,1] * self.yOmega2[0,1] * self.yOmega2bar[0,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] * self.yOmega2[0,2] * self.yOmega2bar[0,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] * self.yOmega2[0,2] * self.yOmega2bar[0,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] * self.yOmega2[0,2] * self.yOmega2bar[0,2] + 1/8 * self.lambdaHatOmega2 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[0,mif2] * self.yOmega2bar[0,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.yd[mif1,2] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.yd[mif1,2] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.yd[mif1,2] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[0,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.yd[mif1,2] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.yd[mif1,2] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.yd[mif1,2] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[0,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,0] * self.yd[mif1,2] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,0] * self.yd[mif1,2] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,0] * self.yd[mif1,2] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[0,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.yd[mif1,0] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.yd[mif1,0] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.yd[mif1,0] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] * self.yOmega2[1,0] * self.yOmega2bar[1,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] * self.yOmega2[1,0] * self.yOmega2bar[1,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] * self.yOmega2[1,0] * self.yOmega2bar[1,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,1] * self.yOmega2[1,1] * self.yOmega2bar[1,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,1] * self.yOmega2[1,1] * self.yOmega2bar[1,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,1] * self.yOmega2[1,1] * self.yOmega2bar[1,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,2] * self.yOmega2[1,2] * self.yOmega2bar[1,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,2] * self.yOmega2[1,2] * self.yOmega2bar[1,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,2] * self.yOmega2[1,2] * self.yOmega2bar[1,0] + 1/8 * self.lambdaHatOmega2 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[1,mif2] * self.yOmega2bar[1,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.yd[mif1,0] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.yd[mif1,0] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.yd[mif1,0] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.yd[mif1,0] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.yd[mif1,0] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.yd[mif1,0] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.yd[mif1,1] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.yd[mif1,1] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.yd[mif1,1] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,0] * self.yOmega2[1,0] * self.yOmega2bar[1,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,0] * self.yOmega2[1,0] * self.yOmega2bar[1,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,0] * self.yOmega2[1,0] * self.yOmega2bar[1,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] * self.yOmega2[1,1] * self.yOmega2bar[1,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] * self.yOmega2[1,1] * self.yOmega2bar[1,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] * self.yOmega2[1,1] * self.yOmega2bar[1,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,2] * self.yOmega2[1,2] * self.yOmega2bar[1,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,2] * self.yOmega2[1,2] * self.yOmega2bar[1,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,2] * self.yOmega2[1,2] * self.yOmega2bar[1,1] + 1/8 * self.lambdaHatOmega2 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.yd[mif1,1] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.yd[mif1,1] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.yd[mif1,1] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.yd[mif1,1] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.yd[mif1,1] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.yd[mif1,1] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.yd[mif1,2] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.yd[mif1,2] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.yd[mif1,2] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[1,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,0] * self.yOmega2[1,0] * self.yOmega2bar[1,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,0] * self.yOmega2[1,0] * self.yOmega2bar[1,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,0] * self.yOmega2[1,0] * self.yOmega2bar[1,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,1] * self.yOmega2[1,1] * self.yOmega2bar[1,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,1] * self.yOmega2[1,1] * self.yOmega2bar[1,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,1] * self.yOmega2[1,1] * self.yOmega2bar[1,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] * self.yOmega2[1,2] * self.yOmega2bar[1,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] * self.yOmega2[1,2] * self.yOmega2bar[1,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] * self.yOmega2[1,2] * self.yOmega2bar[1,2] + 1/8 * self.lambdaHatOmega2 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[1,mif2] * self.yOmega2bar[1,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.yd[mif1,2] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.yd[mif1,2] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.yd[mif1,2] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[1,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,1] * self.yd[mif1,2] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,1] * self.yd[mif1,2] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,1] * self.yd[mif1,2] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[1,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.yd[mif1,0] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.yd[mif1,0] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.yd[mif1,0] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.yd[mif1,0] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.yd[mif1,0] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.yd[mif1,0] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,0] * self.yOmega2[2,0] * self.yOmega2bar[2,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,0] * self.yOmega2[2,0] * self.yOmega2bar[2,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,0] * self.yOmega2[2,0] * self.yOmega2bar[2,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,1] * self.yOmega2[2,1] * self.yOmega2bar[2,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,1] * self.yOmega2[2,1] * self.yOmega2bar[2,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,1] * self.yOmega2[2,1] * self.yOmega2bar[2,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,0] * self.ydbar[0,2] * self.yOmega2[2,2] * self.yOmega2bar[2,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,0] * self.ydbar[1,2] * self.yOmega2[2,2] * self.yOmega2bar[2,0] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,0] * self.ydbar[2,2] * self.yOmega2[2,2] * self.yOmega2bar[2,0] + 1/8 * self.lambdaHatOmega2 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.yOmega2[2,mif2] * self.yOmega2bar[2,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.yd[mif1,0] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.yd[mif1,0] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.yd[mif1,0] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,0] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.yd[mif1,1] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.yd[mif1,1] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.yd[mif1,1] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.yd[mif1,1] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.yd[mif1,1] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.yd[mif1,1] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,0] * self.yOmega2[2,0] * self.yOmega2bar[2,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,0] * self.yOmega2[2,0] * self.yOmega2bar[2,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,0] * self.yOmega2[2,0] * self.yOmega2bar[2,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,1] * self.yOmega2[2,1] * self.yOmega2bar[2,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,1] * self.yOmega2[2,1] * self.yOmega2bar[2,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,1] * self.yOmega2[2,1] * self.yOmega2bar[2,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,1] * self.ydbar[0,2] * self.yOmega2[2,2] * self.yOmega2bar[2,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,1] * self.ydbar[1,2] * self.yOmega2[2,2] * self.yOmega2bar[2,1] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,1] * self.ydbar[2,2] * self.yOmega2[2,2] * self.yOmega2bar[2,1] + 1/8 * self.lambdaHatOmega2 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.yOmega2[2,mif2] * self.yOmega2bar[2,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.yd[mif1,1] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.yd[mif1,1] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.yd[mif1,1] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,1] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.yd[mif1,2] * self.ydbar[0,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.yd[mif1,2] * self.ydbar[1,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.yd[mif1,2] * self.ydbar[2,0] * self.yOmega2[0,mif2] * self.yOmega2bar[2,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.yd[mif1,2] * self.ydbar[0,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.yd[mif1,2] * self.ydbar[1,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.yd[mif1,2] * self.ydbar[2,1] * self.yOmega2[1,mif2] * self.yOmega2bar[2,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,0] * self.yOmega2[2,0] * self.yOmega2bar[2,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,0] * self.yOmega2[2,0] * self.yOmega2bar[2,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,0] * self.yOmega2[2,0] * self.yOmega2bar[2,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,1] * self.yOmega2[2,1] * self.yOmega2bar[2,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,1] * self.yOmega2[2,1] * self.yOmega2bar[2,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,1] * self.yOmega2[2,1] * self.yOmega2bar[2,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,mif2] * self.yd[mif1,2] * self.ydbar[0,2] * self.yOmega2[2,2] * self.yOmega2bar[2,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,mif2] * self.yd[mif1,2] * self.ydbar[1,2] * self.yOmega2[2,2] * self.yOmega2bar[2,2] + 1/24 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,mif2] * self.yd[mif1,2] * self.ydbar[2,2] * self.yOmega2[2,2] * self.yOmega2bar[2,2] + 1/8 * self.lambdaHatOmega2 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[0,2] * self.yd[mif1,2] * self.ydbar[0,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[1,2] * self.yd[mif1,2] * self.ydbar[1,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,2] + -1/8 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[2,2] * self.yd[mif1,2] * self.ydbar[2,2] * self.yOmega2[2,mif2] * self.yOmega2bar[2,2])

    def alphaOeH(self, mif1,mif2):
        return 0

    def alphaOqq1(self, mif1,mif2,mif3,mif4):
        return (-1/1536 * (self.g3)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -1/12960 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/2304 * (self.g3)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4))

    def alphaOqq3(self, mif1,mif2,mif3,mif4):
        return -1/1536 * (self.g3)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3)

    def alphaOuu(self, mif1,mif2,mif3,mif4):
        return (-1/768 * (self.g3)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -1/810 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/2304 * (self.g3)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4))

    def alphaOdd(self, mif1,mif2,mif3,mif4):
        return (-1/768 * (self.g3)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.kronecker_delta(mif2,mif3) + -1/3240 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 1/2304 * (self.g3)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 11/1296 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + -17/3456 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 1/144 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + -1/384 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 1/108 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + -1/288 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + -1/108 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 1/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif1] + 17/1152 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif1] + 1/128 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif1] + 1/96 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif1] + -1/96 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif1] + 17/1152 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif3] + 1/128 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif3] + 1/96 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif3] + -1/96 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif2] * self.yOmega2bar[0,mif3] + 11/1296 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -17/3456 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/144 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/384 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/108 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/288 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/108 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -3/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif2] * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif1] * self.yOmega2bar[0,mif3] + 11/1296 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + -17/3456 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 1/144 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + -1/384 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 1/108 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + -1/288 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + -1/108 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 1/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif1] + 17/1152 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif1] + 1/128 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif1] + 1/96 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif1] + -1/96 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif1] + -1/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif4] * self.yOmega2[1,mif2] * self.yOmega2bar[0,mif3] * self.yOmega2bar[1,mif1] + -5/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif2] * self.yOmega2[1,mif4] * self.yOmega2bar[0,mif3] * self.yOmega2bar[1,mif1] + 17/1152 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif3] + 1/128 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif3] + 1/96 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif3] + -1/96 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif2] * self.yOmega2bar[1,mif3] + 11/1296 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -17/3456 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/144 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/384 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/108 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/288 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/108 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -5/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif4] * self.yOmega2[1,mif2] * self.yOmega2bar[0,mif1] * self.yOmega2bar[1,mif3] + -1/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif2] * self.yOmega2[1,mif4] * self.yOmega2bar[0,mif1] * self.yOmega2bar[1,mif3] + -3/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[1,mif2] * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif1] * self.yOmega2bar[1,mif3] + 11/1296 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + -17/3456 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + 1/144 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + -1/384 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + 1/108 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + -1/288 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + -1/108 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + 1/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif3,mif4) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif1] + 17/1152 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif1] + 1/128 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif1] + 1/96 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif1] + -1/96 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif2,mif3) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif1] + -1/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif4] * self.yOmega2[2,mif2] * self.yOmega2bar[0,mif3] * self.yOmega2bar[2,mif1] + -5/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif2] * self.yOmega2[2,mif4] * self.yOmega2bar[0,mif3] * self.yOmega2bar[2,mif1] + -1/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[1,mif4] * self.yOmega2[2,mif2] * self.yOmega2bar[1,mif3] * self.yOmega2bar[2,mif1] + -5/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[1,mif2] * self.yOmega2[2,mif4] * self.yOmega2bar[1,mif3] * self.yOmega2bar[2,mif1] + 17/1152 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif3] + 1/128 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif3] + 1/96 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif3] + -1/96 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif4) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif2] * self.yOmega2bar[2,mif3] + 11/1296 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -17/3456 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/144 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/384 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/108 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/288 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/108 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -5/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif4] * self.yOmega2[2,mif2] * self.yOmega2bar[0,mif1] * self.yOmega2bar[2,mif3] + -1/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[0,mif2] * self.yOmega2[2,mif4] * self.yOmega2bar[0,mif1] * self.yOmega2bar[2,mif3] + -5/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[1,mif4] * self.yOmega2[2,mif2] * self.yOmega2bar[1,mif1] * self.yOmega2bar[2,mif3] + -1/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[1,mif2] * self.yOmega2[2,mif4] * self.yOmega2bar[1,mif1] * self.yOmega2bar[2,mif3] + -3/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yOmega2[2,mif2] * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif1] * self.yOmega2bar[2,mif3])

    def alphaOud1(self, mif1,mif2,mif3,mif4):
        return (1/810 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -11/324 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/36 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/27 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/27 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -11/324 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/36 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/27 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/27 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -11/324 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/36 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/27 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/27 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3])

    def alphaOud8(self, mif1,mif2,mif3,mif4):
        return (-1/192 * (self.g3)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 17/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/32 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/24 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/24 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 17/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/32 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/24 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/24 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 17/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/32 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/24 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/24 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3])

    def alphaOqu1(self, mif1,mif2,mif3,mif4):
        return -1/1620 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOqu8(self, mif1,mif2,mif3,mif4):
        return -1/192 * (self.g3)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOqd1(self, mif1,mif2,mif3,mif4):
        return (1/3240 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + -11/1296 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/144 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/108 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/108 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -9/128 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -3/64 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 3/64 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -9/128 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[0,mif3] + -3/64 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[0,mif3] + 3/64 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[0,mif3] + -9/128 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[0,mif3] + -3/64 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[0,mif3] + 3/64 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[0,mif3] + -9/128 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[1,mif3] + -3/64 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[1,mif3] + 3/64 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[1,mif3] + -11/1296 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/144 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/108 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/108 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -9/128 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -3/64 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 3/64 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -9/128 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[1,mif3] + -3/64 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[1,mif3] + 3/64 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[1,mif3] + -9/128 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[2,mif3] + -3/64 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[2,mif3] + 3/64 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[2,mif3] + -9/128 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[2,mif3] + -3/64 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[2,mif3] + 3/64 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[2,mif3] + -11/1296 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/144 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/108 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/108 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -9/128 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -3/64 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 3/64 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3])

    def alphaOqd8(self, mif1,mif2,mif3,mif4):
        return (-1/192 * (self.g3)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 17/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/32 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/24 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/24 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -3/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/16 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -3/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[0,mif3] + -1/16 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[0,mif3] + 1/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[0,mif3] + -3/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[0,mif3] + -1/16 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[0,mif3] + 1/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,0] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[0,mif3] + -3/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[1,mif3] + -1/16 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[1,mif3] + 1/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[1,mif3] + 17/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/32 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/24 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/24 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -3/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/16 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -3/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[1,mif3] + -1/16 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[1,mif3] + 1/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,1] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[1,mif3] + -3/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[2,mif3] + -1/16 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[2,mif3] + 1/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,0] * self.yOmega2[0,mif4] * self.yOmega2bar[2,mif3] + -3/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[2,mif3] + -1/16 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[2,mif3] + 1/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,1] * self.yOmega2[1,mif4] * self.yOmega2bar[2,mif3] + 17/288 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/32 * (self.g3)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/24 * (self.g3)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/24 * (self.g3)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -3/32 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/16 * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/16 * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yd[mif1,2] * self.ydbar[mif2,2] * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3])

    def alphaOquqd1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOquqd8(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOll(self, mif1,mif2,mif3,mif4):
        return -1/1440 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOee(self, mif1,mif2,mif3,mif4):
        return -1/360 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOle(self, mif1,mif2,mif3,mif4):
        return -1/360 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOlq1(self, mif1,mif2,mif3,mif4):
        return 1/2160 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOlq3(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOeu(self, mif1,mif2,mif3,mif4):
        return 1/270 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOed(self, mif1,mif2,mif3,mif4):
        return (-1/540 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 11/216 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/24 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/18 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/18 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 11/216 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/24 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/18 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/18 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 11/216 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/24 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/18 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/18 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3])

    def alphaOqe(self, mif1,mif2,mif3,mif4):
        return 1/1080 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOlu(self, mif1,mif2,mif3,mif4):
        return 1/540 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4)

    def alphaOld(self, mif1,mif2,mif3,mif4):
        return (-1/1080 * (self.g1)**(4) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.kronecker_delta(mif3,mif4) + 11/432 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + -1/36 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[0,mif4] * self.yOmega2bar[0,mif3] + 11/432 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + -1/36 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[1,mif4] * self.yOmega2bar[1,mif3] + 11/432 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/48 * (self.g1)**(2) * (self.iCPV)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + 1/36 * (self.g1)**(2) * self.invepsilonbar * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3] + -1/36 * (self.g1)**(2) * (self.MOmega2)**(-2) * self.onelooporder * (np.pi)**(-2) * self.kronecker_delta(mif1,mif2) * np.log((self.MOmega2)**(2) * (self.mu)**(-2)) * self.yOmega2[2,mif4] * self.yOmega2bar[2,mif3])

    def alphaOledq(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOlequ1(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaOlequ3(self, mif1,mif2,mif3,mif4):
        return 0

    def alphaWeinberg(self, mif1,mif2):
        return 0
